initSidebarItems({"enum":[["CacheUsage","Value of this enum determines how `cpp_to_rust` uses data from the cache directory accumulated in a previous processing of the same library."],["DebugLoggingConfig","Value of this enum determines how extra logging information will be used."]],"fn":[["completed_marker_path","Returns path to the completion marker file indicating that processing of the library in this `cache_dir` was completed before. This function can be used to skip heavy preparation steps and avoid constructing a `Config` object. Note that the marker is not created if `write_cache` was set to false in `Config` during a previous run. The marker should only be used if cache usage is set to `CacheUsage::Full`."],["is_completed","Returns true if a library was already processed in this `cache_dir`. This function can be used to skip heavy preparation steps and avoid constructing a `Config` object. Note that the marker is not created if `write_cache` was set to false in `Config` during a previous run. The marker should only be used if cache usage is set to `CacheUsage::Full`."]],"struct":[["Config","The starting point of `cpp_to_rust` API. Create a `Config` object, set its properties, add custom functions if necessary, and start the processing with `Config::exec`."],["CrateDependency","Information about an extra non-`cpp_to_rust`-based dependency."],["CrateProperties","Information about the crate being generated. Most of information in this object will be used in the output `Cargo.toml`."]],"type":[["CppDataFilterFn","Function type used in `Config::add_cpp_data_filter`."],["CppFfiGeneratorFilterFn","Function type used in `Config::add_cpp_ffi_generator_filter`."]]});