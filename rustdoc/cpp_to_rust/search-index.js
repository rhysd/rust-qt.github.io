var searchIndex = {};
searchIndex["cpp_to_rust"] = {"doc":"","items":[[5,"is_processing_skipped","cpp_to_rust","",null,{"inputs":[],"output":{"name":"result"}}],[0,"config","","",null,null],[3,"Config","cpp_to_rust::config","The starting point of `cpp_to_rust` API.\nCreate a `Config` object, set its properties,\nadd custom functions if necessary, and start\nthe processing with `Config::exec`.",null,null],[6,"CppFfiGeneratorFilterFn","","Function type used in `Config::add_cpp_ffi_generator_filter`.",null,null],[6,"CppDataFilterFn","","Function type used in `Config::add_cpp_data_filter`.",null,null],[11,"default","","",0,{"inputs":[],"output":{"name":"config"}}],[11,"fmt","","",0,null],[11,"new","","Creates an empty `Config`.",0,{"inputs":[],"output":{"name":"config"}}],[11,"add_linked_lib","","Adds a library for linking. Used as `-l` option to the linker.",0,null],[11,"add_linked_framework","","Adds a framework for linking (OS X specific). Used as `-f` option to the linker.",0,null],[11,"add_cpp_parser_blocked_name","","Adds a C++ identifier that should be skipped\nby the C++ parser. Identifier can contain namespaces\nand nested classes, with `::` separator (like in\nC++ identifiers). Identifier may refer to a method,\na class, a enum or a namespace. All entities inside blacklisted\nentity (e.g. the methods of a blocked class or\nthe contents of a blocked namespace)\nwill also be skipped.\nAll class methods with names matching the blocked name\nwill be skipped, regardless of class name.",0,null],[11,"add_cpp_parser_blocked_names","","Adds multiple blocked names. See `Config::add_cpp_parser_blocked_name`.",0,null],[11,"add_cpp_parser_flag","","Adds a command line argument for clang C++ parser.",0,null],[11,"add_cpp_parser_flags","","Adds multiple flags. See `Config::add_cpp_parser_flag`.",0,null],[11,"add_cpp_compiler_flag","","Adds a command line argument for the C++ compiler.",0,null],[11,"add_cpp_compiler_flags","","Adds multiple flags. See `Config::add_cpp_compiler_flag`.",0,null],[11,"add_include_path","","Adds path to an include directory.\nIt&#39;s supplied to the C++ parser\nand the C++ compiler via `-I` option.",0,null],[11,"add_lib_path","","Adds path to a lib directory.\nIt&#39;s supplied to the linker via `-L` option or environment variables.",0,null],[11,"add_framework_path","","Adds path to a framework directory (OS X specific).\nIt&#39;s supplied to the linker via `-F` option or environment variables.",0,null],[11,"add_target_include_path","","Adds path to an include directory or an include file\nof the target library.\nAny C++ types and methods will be parsed and used only\nif they are declared within one of files or directories\nadded with this method.",0,null],[11,"add_include_directive","","Adds an include directive. Each directive will be added\nas `#include &lt;path&gt;` to the input file for the C++ parser.\nRelative paths should be used in this method.",0,null],[11,"add_cpp_ffi_generator_filter","","Adds a custom function that decides whether a C++ method should be\nadded to the C++ wrapper library. For each C++ method,\neach function will be run once. Filters are executed in the same order they\nwere added.",0,null],[11,"add_cpp_data_filter","","Adds a custom function that visits `&amp;mut CppData` and can perform any changes\nin the output of the C++ parser. Filters are executed in the same order they\nwere added. If the function returns `Err`, the processing is terminated.",0,null],[11,"exec","","Starts execution of the generator.\nThis function will print the necessary build script output to stdout.\nIt also displays some debugging output that can be made visible by\nrunning cargo commands with `-vv` option.",0,null],[11,"linked_libs","","",0,null],[11,"linked_frameworks","","",0,null],[11,"cpp_parser_blocked_names","","",0,null],[11,"cpp_parser_flags","","",0,null],[11,"cpp_compiler_flags","","",0,null],[11,"include_paths","","",0,null],[11,"lib_paths","","",0,null],[11,"framework_paths","","",0,null],[11,"target_include_paths","","",0,null],[11,"include_directives","","",0,null],[11,"cpp_ffi_generator_filters","","",0,null],[11,"cpp_data_filters","","",0,null],[0,"cpp_data","cpp_to_rust","",null,null],[3,"CppEnumValue","cpp_to_rust::cpp_data","One item of a C++ enum declaration",null,null],[12,"name","","Identifier",1,null],[12,"value","","Corresponding value",1,null],[12,"doc","","C++ documentation for this item in HTML",1,null],[3,"CppClassField","","Member field of a C++ class declaration",null,null],[12,"name","","Identifier",2,null],[12,"field_type","","Field type",2,null],[12,"visibility","","Visibility",2,null],[12,"size","","Size of type in bytes",2,null],[3,"CppOriginLocation","","Location of a C++ type&#39;s definition in header files.",null,null],[12,"include_file_path","","",3,null],[12,"line","","Line of the file",3,null],[12,"column","","Column of the file",3,null],[3,"CppTypeData","","Information about a C++ type declaration",null,null],[12,"name","","Identifier, including namespaces and nested classes\n(separated with &quot;::&quot;, like in C++)",4,null],[12,"include_file","","File name of the include file (without full path)",4,null],[12,"origin_location","","Exact location of the declaration",4,null],[12,"kind","","Type information",4,null],[12,"doc","","C++ documentation data for this type",4,null],[3,"CppTypeDoc","","C++ documentation for a type",null,null],[12,"html","","HTML content",5,null],[12,"url","","Absolute URL to online documentation page for this type",5,null],[12,"cross_references","","Absolute documentation URLs encountered in the content",5,null],[3,"CppData","","C++ parser output",null,null],[12,"types","","List of found type declarations",6,null],[12,"methods","","List of found methods",6,null],[12,"template_instantiations","","List of found template instantiations. Key is name of\nthe template class, value is list of instantiations.",6,null],[3,"CppTemplateInstantiation","","Information about a C++ template class\ninstantiation.",null,null],[12,"template_arguments","","List of template arguments used in this instantiation",7,null],[12,"size","","Size of resulted type in bytes",7,null],[3,"CppTemplateInstantiations","","List of template instantiations of\na template class.",null,null],[12,"class_name","","Template class name",8,null],[12,"cpp_doc","","C++ documentation for the template type",8,null],[12,"include_file","","File name of the include file (without full path)\nof the template type",8,null],[12,"instantiations","","List of encountered instantiations",8,null],[3,"CppClassUsingDirective","","A &quot;using&quot; directive inside a class definition,\nindicating that the class should inherite a\ncertain method of a base class.",null,null],[12,"class_name","","Name of the base class",9,null],[12,"method_name","","Name of the method",9,null],[3,"CppBaseSpecifier","","Item of base class list in a class declaration",null,null],[12,"base_type","","Base class type (can include template arguments)",10,null],[12,"is_virtual","","True if this base is virtual",10,null],[12,"visibility","","Base visibility (public, protected or private)",10,null],[3,"TemplateArgumentsDeclaration","","Information about template arguments of a C++ class type",null,null],[12,"nested_level","","Indicates how many template types this type is nested into.",11,null],[12,"names","","Names of template arguments. Names themselves are\nnot particularly important, but their count is.",11,null],[4,"CppTypeKind","","Information about a C++ type declaration",null,null],[13,"Enum","","Enum declaration",12,null],[12,"values","cpp_to_rust::cpp_data::CppTypeKind","List of items",12,null],[13,"Class","cpp_to_rust::cpp_data","Class declaration",12,null],[12,"size","cpp_to_rust::cpp_data::CppTypeKind","Size of type in bytes;\ncan be None if the type doesn&#39;t have known size,\ne.g. it&#39;s a template class",12,null],[12,"bases","","List of class types this class is derived from",12,null],[12,"fields","","List of class fields",12,null],[12,"template_arguments","","",12,null],[12,"using_directives","","List of using directives, like &quot;using BaseClass::method1;&quot;",12,null],[4,"CppVisibility","cpp_to_rust::cpp_data","Visibility of a C++ entity. Defaults to `Public`\nfor entities that can&#39;t have visibility (like free functions)",null,null],[13,"Public","","",13,null],[13,"Protected","","",13,null],[13,"Private","","",13,null],[11,"is_class","","Checks if the type is a class type.",4,null],[11,"default_class_type","","Creates CppTypeBase object representing type\nof an object of this type. See\ndefault_template_arguments() documentation\nfor details about handling template parameters.",4,null],[11,"default_template_arguments","","Creates template parameters expected for this type.\nFor example, QHash&lt;QString, int&gt; will have 2 default\ntemplate parameters with indexes 0 and 1. This function\nis helpful for determining type of &quot;this&quot; pointer.\nResult of this function may differ from actual template\nparameters, for example:\n- if a class is inside another template class,\nnested level should be 1 instead of 0;\n- if QList&lt;V&gt; type is used inside QHash&lt;K, V&gt; type,\nQList&#39;s template parameter will have index = 1\ninstead of 0.",4,null],[11,"inherits","","Checks if the type was directly derived from specified type.",4,null],[11,"ensure_explicit_destructors","","Adds destructors for every class that does not have explicitly\ndefined destructor, allowing to create wrappings for\ndestructors implicitly available in C++.",6,null],[11,"add_inherited_methods","","Adds methods of derived classes inherited from base classes.\nA method will not be added if there is a method with the same\nname in the derived class. Constructors, destructors and assignment\noperators are also not added. This reflects C++&#39;s method inheritance rules.",6,null],[11,"generate_methods_with_omitted_args","","Generates duplicate methods with fewer arguments for\nC++ methods with default argument values.",6,null],[11,"all_include_files","","",6,null],[11,"is_template_class","","Checks if specified class is a template class.",6,null],[11,"has_virtual_destructor","","Checks if specified class has virtual destructor (own or inherited).",6,null],[11,"has_public_destructor","","Checks if specified class has public destructor.",6,null],[11,"get_all_methods","","",6,null],[11,"has_pure_virtual_methods","","",6,null],[11,"add_field_accessors","","",6,null],[11,"post_process","","Performs data conversion to make it more suitable\nfor further wrapper generation.",6,null],[11,"count","","",11,null],[0,"cpp_method","cpp_to_rust","",null,null],[3,"CppFunctionArgument","cpp_to_rust::cpp_method","Information about an argument of a C++ method",null,null],[12,"name","","Identifier. If the argument doesn&#39;t have a name\n(which is allowed in C++), this field contains\ngenerated name &quot;argX&quot; (X is position of the argument).",14,null],[12,"argument_type","","Argument type",14,null],[12,"has_default_value","","Flag indicating that the argument has default value and\ntherefore can be omitted when calling the method",14,null],[3,"CppMethod","","Information about a C++ method",null,null],[12,"name","","Identifier. For class methods, this field includes\nonly the method&#39;s own name. For free functions,\nthis field also includes namespaces (if any).",15,null],[12,"class_membership","","Additional information about a class member function\nor None for free functions",15,null],[12,"operator","","If the method is a C++ operator, indicates its kind",15,null],[12,"return_type","","Return type of the method.\nReturn type is reported as void for constructors and destructors.",15,null],[12,"arguments","","List of the method&#39;s arguments",15,null],[12,"arguments_before_omitting","","If Some, the method is derived from another method by omitting arguments,\nand this field contains all arguments of the original method.",15,null],[12,"allows_variadic_arguments","","Whether the argument list is terminated with &quot;...&quot;",15,null],[12,"include_file","","File name of the include file where the method is defined\n(without full path)",15,null],[12,"origin_location","","Exact location of declaration of the method.\nCan be None if the method is generated automatically\nand doesn&#39;t have corresponding C++ declaration.",15,null],[12,"template_arguments","","Names of the method&#39;s template arguments.\nNone if this is not a template method.\nIf the method belongs to a template class,\nthe class&#39;s template arguments are not included here.",15,null],[12,"template_arguments_values","","For an instantiated template method, this field contains the types\nused for instantiation. For example, `T QObject::findChild&lt;T&gt;()` would have\nno `template_arguments_values` because it&#39;s not instantiated, and\n`QWidget* QObject::findChild&lt;QWidget*&gt;()` would have `QWidget*` type in\n`template_arguments_values`.",15,null],[12,"declaration_code","","C++ code of the method&#39;s declaration.\nNone if the method was not explicitly declared.",15,null],[12,"inheritance_chain","","List of base classes this method was inferited from.\nThe first item is the most base class.",15,null],[12,"doc","","C++ documentation data for this method",15,null],[3,"CppMethodClassMembership","","Information about a C++ class member method",null,null],[12,"class_type","","Type of the class where this method belong. This is used to construct\ntype of &quot;this&quot; pointer and return type of constructors.",16,null],[12,"kind","","Whether this method is a constructor, a destructor or an operator",16,null],[12,"is_virtual","","True if this is a virtual method",16,null],[12,"is_pure_virtual","","True if this is a pure virtual method (requires is_virtual = true)",16,null],[12,"is_const","","True if this is a const method, i.e. &quot;this&quot; pointer receives by\nthis method has const type",16,null],[12,"is_static","","True if this is a static method, i.e. it doesn&#39;t receive &quot;this&quot; pointer at all.",16,null],[12,"visibility","","Method visibility",16,null],[12,"is_signal","","True if the method is a Qt signal",16,null],[12,"field_accessor","","If this method is a generated field accessor, this field contains\ninformation about it. Field accessors do not have real C++ methods corresponding to them.",16,null],[3,"CppFieldAccessor","","Information about automatically generated method\nfor accessing a public field of a class",null,null],[12,"accessor_type","","Type of the accessor",17,null],[12,"field_name","","Name of the C++ field",17,null],[3,"CppMethodDoc","","C++ documentation for a method",null,null],[12,"anchor","","HTML anchor of this documentation entry\n(used to detect duplicates)",18,null],[12,"html","","HTML content",18,null],[12,"mismatched_declaration","","If the documentation parser couldn&#39;t find documentation for the exact same\nmethod, it can still provide documentation entry for the closest match.\nIn this case, this field should contain C++ declaration of the found method.",18,null],[12,"url","","Absolute URL to online documentation page for this method",18,null],[12,"cross_references","","Absolute documentation URLs encountered in the content",18,null],[4,"CppMethodKind","","Enumerator indicating special cases of C++ methods.",null,null],[13,"Regular","","Just a class method",19,null],[13,"Constructor","","Constructor",19,null],[13,"Destructor","","Destructor",19,null],[4,"CppFieldAccessorType","","Variation of a field accessor method",null,null],[13,"CopyGetter","","Returns copy of the field",20,null],[13,"ConstRefGetter","","Returns const reference to the field",20,null],[13,"MutRefGetter","","Returns mutable reference to the field",20,null],[13,"Setter","","Copies value from its argument to the field",20,null],[4,"ReturnValueAllocationPlace","","",null,null],[13,"Stack","","the method returns a class object by value (or is a constructor), and\nit&#39;s translated to &quot;output&quot; FFI argument and placement new",21,null],[13,"Heap","","the method returns a class object by value (or is a constructor), and\nit&#39;s translated to pointer FFI return type and plain new",21,null],[13,"NotApplicable","","the method does not return a class object by value, so\nthere is only one FFI wrapper for it",21,null],[11,"fmt","","",21,null],[11,"eq","","",21,null],[11,"clone","","",21,null],[11,"hash","","",21,null],[11,"is_constructor","","",19,null],[11,"is_destructor","","",19,null],[11,"is_regular","","",19,null],[11,"argument_types_equal","","Checks if two methods have exactly the same set of input argument types",15,null],[11,"needs_allocation_place_variants","","Checks if this method would need\nto have 2 wrappers with 2 different return value allocation places",15,null],[11,"c_signature","","Creates FFI method signature for this method:\n- converts all types to FFI types;\n- adds &quot;this&quot; argument explicitly if present;\n- adds &quot;output&quot; argument for return value if allocation_place is Stack.",15,null],[11,"to_ffi_signatures","","Generates either one or two FFI signatures for this method,\ndepending on its return type.",15,null],[11,"full_name","","",15,null],[11,"doc_id","","",15,null],[11,"short_text","","Returns short text representing values in this method\n(only for debug output purposes).",15,null],[11,"inheritance_chain_text","","",15,null],[11,"class_name","","",15,null],[11,"is_constructor","","",15,null],[11,"is_destructor","","",15,null],[11,"class_info_if_constructor","","",15,null],[11,"is_operator","","",15,null],[11,"all_involved_types","","",15,null],[0,"cpp_type","cpp_to_rust","",null,null],[3,"CppType","cpp_to_rust::cpp_type","Information about a C++ type",null,null],[12,"base","","Information about base type",22,null],[12,"indirection","","Indirection applied to base type",22,null],[12,"is_const","","If the type has const qualifier. Defaults to false\nwhen not applicable.",22,null],[12,"is_const2","","If 2nd indirection part of the type is const, e.g.\ntrue for &quot;int* const*&quot;.",22,null],[3,"CppTypeClassBase","","Information about base C++ class type",null,null],[12,"name","","Name, including namespaces and nested classes",23,null],[12,"template_arguments","","For template classes, C++ types used as template\narguments in this type,\nlike [QString, int] in QHash&lt;QString, int&gt;",23,null],[4,"CppBuiltInNumericType","","Available built-in C++ numeric types.\nAll these types have corresponding\n`clang::TypeKind` values (except for `CharS` and `CharU`\nwhich map to `CppBuiltInNumericType::Char`)",null,null],[13,"Bool","","",24,null],[13,"Char","","",24,null],[13,"SChar","","",24,null],[13,"UChar","","",24,null],[13,"WChar","","",24,null],[13,"Char16","","",24,null],[13,"Char32","","",24,null],[13,"Short","","",24,null],[13,"UShort","","",24,null],[13,"Int","","",24,null],[13,"UInt","","",24,null],[13,"Long","","",24,null],[13,"ULong","","",24,null],[13,"LongLong","","",24,null],[13,"ULongLong","","",24,null],[13,"Int128","","",24,null],[13,"UInt128","","",24,null],[13,"Float","","",24,null],[13,"Double","","",24,null],[13,"LongDouble","","",24,null],[4,"CppSpecificNumericTypeKind","","Information about a fixed-size primitive type",null,null],[13,"Integer","","",25,null],[12,"is_signed","cpp_to_rust::cpp_type::CppSpecificNumericTypeKind","",25,null],[13,"FloatingPoint","cpp_to_rust::cpp_type","",25,null],[4,"CppTypeBase","","Base C++ type. `CppType` can add indirection\nand constness to `CppTypeBase`, but otherwise\nthis enum lists all supported types.",null,null],[13,"Void","","Void",26,null],[13,"BuiltInNumeric","","Built-in C++ primitive type, like int",26,null],[13,"SpecificNumeric","","Fixed-size primitive type, like qint64 or int64_t\n(may be translated to Rust&#39;s i64)",26,null],[12,"name","cpp_to_rust::cpp_type::CppTypeBase","Type identifier (most likely a typedef name)",26,null],[12,"bits","","Size of type in bits",26,null],[12,"kind","","Information about the type (float or integer,\nsigned or unsigned)",26,null],[13,"PointerSizedInteger","cpp_to_rust::cpp_type","Pointer sized integer, like qintptr\n(may be translated to Rust&#39;s isize)",26,null],[12,"name","cpp_to_rust::cpp_type::CppTypeBase","",26,null],[12,"is_signed","","",26,null],[13,"Enum","cpp_to_rust::cpp_type","Enum type",26,null],[12,"name","cpp_to_rust::cpp_type::CppTypeBase","Name, including namespaces and nested classes",26,null],[13,"Class","cpp_to_rust::cpp_type","Class type",26,null],[13,"TemplateParameter","","Template parameter, like &quot;T&quot; anywhere inside\nQVector&lt;T&gt; declaration",26,null],[12,"nested_level","cpp_to_rust::cpp_type::CppTypeBase","Template instantiation level. For example,\nif there is a template class and a template method in it,\nthe class&#39;s template parameters will have level = 0 and\nthe method&#39;s template parameters will have level = 1.\nIf only the class or only the method is a template,\nthe level will be 0.",26,null],[12,"index","","Index of the parameter. In QHash&lt;K, V&gt; &quot;K&quot; has index = 0\nand &quot;V&quot; has index = 1.",26,null],[13,"FunctionPointer","cpp_to_rust::cpp_type","Function pointer type",26,null],[12,"return_type","cpp_to_rust::cpp_type::CppTypeBase","Return type of the function",26,null],[12,"arguments","","Arguments of the function",26,null],[12,"allows_variadic_arguments","","Whether arguments are terminated with &quot;...&quot;",26,null],[4,"CppTypeIndirection","cpp_to_rust::cpp_type","C++ type variants based on indirection",null,null],[13,"None","","No indirection",27,null],[13,"Ptr","","Pointer, like int*",27,null],[13,"Ref","","Reference, like int&amp;",27,null],[13,"PtrRef","","Reference to pointer, like int*&amp;",27,null],[13,"PtrPtr","","Pointer to pointer, like int**",27,null],[13,"RValueRef","","R-value reference, like Class&amp;&amp;",27,null],[4,"CppTypeRole","","",null,null],[13,"ReturnType","","",28,null],[13,"NotReturnType","","",28,null],[11,"combine","","",27,{"inputs":[{"name":"cpptypeindirection"},{"name":"cpptypeindirection"}],"output":{"name":"result"}}],[11,"to_cpp_code","","",24,null],[11,"all","","",24,null],[11,"to_cpp_code","","",23,null],[11,"caption","","",23,null],[11,"instantiate_class","","",23,null],[11,"to_cpp_pseudo_code","","",23,null],[11,"is_void","","",26,null],[11,"is_class","","",26,null],[11,"is_template_parameter","","",26,null],[11,"is_function_pointer","","",26,null],[11,"is_or_contains_template_parameter","","",26,null],[11,"to_cpp_code","","",26,null],[11,"maybe_name","","",26,null],[11,"caption","","Generates alphanumeric representation of self\nused to generate FFI function names",26,null],[11,"to_cpp_pseudo_code","","",26,null],[11,"fmt","","",28,null],[11,"clone","","",28,null],[11,"eq","","",28,null],[11,"void","","",22,{"inputs":[],"output":{"name":"self"}}],[11,"is_void","","",22,null],[11,"to_cpp_code","","",22,null],[11,"to_cpp_pseudo_code","","",22,null],[11,"to_cpp_ffi_type","","Converts this C++ type to its adaptation for FFI interface,\nremoving all features not supported by C ABI\n(e.g. references and passing objects by value)",22,null],[11,"caption","","Generates alphanumeric representation of self\nused to generate FFI function names",22,null],[11,"needs_allocation_place_variants","","Checks if a function with this return type would need\nto have 2 wrappers with 2 different return value allocation places",22,null],[11,"instantiate","","",22,null],[0,"cpp_operator","cpp_to_rust","",null,null],[3,"OperatorInfo","cpp_to_rust::cpp_operator","Constraints applied to a C++ operator method\nof a certain kind",null,null],[12,"function_name_suffix","","String that must appear after &quot;operator&quot; in the method name,\ne.g. &quot;&gt;&quot; for &quot;operator&gt;&quot;. &quot;operator&quot; prefix must\nbe present for any operator. This field is None for\nconversion operator, as its name includes\ncorresponding C++ type instead of a fixed string.",29,null],[12,"arguments_count","","Total number of arguments, including implicit &quot;this&quot; argument.\nMost operators can be class members or free functions,\nbut total number of arguments is the same in both cases.",29,null],[12,"allows_variadic_arguments","","True if this kind of operator can have variadic arguments.\nOnly the function call operator has this property.",29,null],[4,"CppOperator","","Available types of C++ operators",null,null],[13,"Conversion","","(type) a",30,null],[13,"Assignment","","a = b",30,null],[13,"Addition","","a + b",30,null],[13,"Subtraction","","a - b",30,null],[13,"UnaryPlus","","+a",30,null],[13,"UnaryMinus","","-a",30,null],[13,"Multiplication","","a * b",30,null],[13,"Division","","a / b",30,null],[13,"Modulo","","a % b",30,null],[13,"PrefixIncrement","","++a",30,null],[13,"PostfixIncrement","","a++",30,null],[13,"PrefixDecrement","","--a",30,null],[13,"PostfixDecrement","","a--",30,null],[13,"EqualTo","","a == b",30,null],[13,"NotEqualTo","","a != b",30,null],[13,"GreaterThan","","a &gt; b",30,null],[13,"LessThan","","a &lt; b",30,null],[13,"GreaterThanOrEqualTo","","a &gt;= b",30,null],[13,"LessThanOrEqualTo","","a &lt;= b",30,null],[13,"LogicalNot","","!a",30,null],[13,"LogicalAnd","","a &amp;&amp; b",30,null],[13,"LogicalOr","","a || b",30,null],[13,"BitwiseNot","","~a",30,null],[13,"BitwiseAnd","","a &amp; b",30,null],[13,"BitwiseOr","","a | b",30,null],[13,"BitwiseXor","","a ^ b",30,null],[13,"BitwiseLeftShift","","a &lt;&lt; b",30,null],[13,"BitwiseRightShift","","a &gt;&gt; b",30,null],[13,"AdditionAssignment","","a += b",30,null],[13,"SubtractionAssignment","","a -= b",30,null],[13,"MultiplicationAssignment","","a *= b",30,null],[13,"DivisionAssignment","","a /= b",30,null],[13,"ModuloAssignment","","a %= b",30,null],[13,"BitwiseAndAssignment","","a &amp;= b",30,null],[13,"BitwiseOrAssignment","","a |= b",30,null],[13,"BitwiseXorAssignment","","a ^= b",30,null],[13,"BitwiseLeftShiftAssignment","","a &lt;&lt;= b",30,null],[13,"BitwiseRightShiftAssignment","","a &gt;&gt;= b",30,null],[13,"Subscript","","a[b]",30,null],[13,"Indirection","","*a",30,null],[13,"AddressOf","","&amp;a",30,null],[13,"StructureDereference","","a-&gt;b",30,null],[13,"PointerToMember","","a-&gt;*b",30,null],[13,"FunctionCall","","a(a1, a2)",30,null],[13,"Comma","","a, b",30,null],[13,"New","","new type",30,null],[13,"NewArray","","new type[n]",30,null],[13,"Delete","","delete a",30,null],[13,"DeleteArray","","delete[] a",30,null],[11,"fmt","","",29,null],[11,"eq","","",29,null],[11,"ne","","",29,null],[11,"clone","","",29,null],[11,"info","","Reports information about this operator",30,null],[11,"c_name","","Returns alphanumeric identifier for this operator\nused to name FFI functions.",30,null],[11,"all","","Returns all existing operator kinds except for\nconversion operator which includes an arbitrary C++ type.",30,{"inputs":[],"output":{"name":"vec"}}],[0,"errors","cpp_to_rust","",null,null],[3,"Error","cpp_to_rust::errors","",null,null],[12,"0","","",31,null],[12,"1","","",31,null],[4,"ErrorKind","","",null,null],[13,"Msg","","",32,null],[13,"IO","","",32,null],[13,"Regex","","",32,null],[13,"Csv","","",32,null],[13,"Unexpected","","",32,null],[5,"unexpected","","",null,{"inputs":[{"name":"s"}],"output":{"name":"errorkind"}}],[5,"fancy_unwrap","","",null,{"inputs":[{"name":"result"}],"output":{"name":"t"}}],[6,"Result","","",null,null],[8,"ChainErr","","",null,null],[10,"chain_err","","",33,null],[11,"fmt","","",31,null],[11,"kind","","",31,null],[11,"into_kind","","",31,null],[11,"iter","","",31,null],[11,"backtrace","","",31,null],[11,"description","","",31,null],[11,"cause","","",31,null],[11,"fmt","","",31,null],[11,"from","","",31,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",31,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",31,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",31,{"inputs":[{"name":"errorkind"}],"output":{"name":"self"}}],[11,"from","","",31,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",31,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"fmt","","",32,null],[11,"fmt","","",32,null],[11,"description","","",32,null],[11,"from","","",32,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",32,{"inputs":[{"name":"string"}],"output":{"name":"self"}}],[11,"is_unexpected","","",31,null],[11,"discard_expected","","",31,null],[11,"display_report","","",31,null],[0,"file_utils","cpp_to_rust","",null,null],[3,"FileWrapper","cpp_to_rust::file_utils","",null,null],[3,"ReadDirWrapper","","",null,null],[5,"move_files","","",null,{"inputs":[{"name":"pathbuf"},{"name":"pathbuf"}],"output":{"name":"result"}}],[5,"copy_recursively","","",null,{"inputs":[{"name":"pathbuf"},{"name":"pathbuf"}],"output":{"name":"result"}}],[5,"move_one_file","","",null,{"inputs":[{"name":"pathbuf"},{"name":"pathbuf"}],"output":{"name":"result"}}],[5,"open_file","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"load_json","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"save_json","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"result"}}],[5,"load_toml","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"file_to_string","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"create_file","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"create_dir","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"create_dir_all","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"remove_dir","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"remove_dir_all","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"remove_file","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"rename_file","","",null,{"inputs":[{"name":"p"},{"name":"p2"}],"output":{"name":"result"}}],[5,"copy_file","","",null,{"inputs":[{"name":"p"},{"name":"p2"}],"output":{"name":"result"}}],[5,"read_dir","","",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"canonicalize","","",null,{"inputs":[{"name":"pathbuf"}],"output":{"name":"result"}}],[5,"path_to_str","","",null,{"inputs":[{"name":"path"}],"output":{"name":"result"}}],[5,"os_str_to_str","","",null,{"inputs":[{"name":"osstr"}],"output":{"name":"result"}}],[5,"os_string_into_string","","",null,{"inputs":[{"name":"osstring"}],"output":{"name":"result"}}],[8,"PathBufWithAdded","","",null,null],[10,"with_added","","",34,null],[11,"read_all","","",35,null],[11,"write","","",35,null],[11,"into_file","","",35,null],[11,"next","","",36,null],[0,"log","cpp_to_rust","",null,null],[5,"error","cpp_to_rust::log","",null,{"inputs":[{"name":"t"}],"output":null}],[5,"warning","","",null,{"inputs":[{"name":"t"}],"output":null}],[5,"info","","",null,{"inputs":[{"name":"t"}],"output":null}],[5,"debug","","",null,{"inputs":[{"name":"t"}],"output":null}],[5,"noisy","","",null,{"inputs":[{"name":"t"}],"output":null}],[0,"utils","cpp_to_rust","",null,null],[5,"is_msvc","cpp_to_rust::utils","",null,{"inputs":[],"output":{"name":"bool"}}],[5,"add_to_multihash","","",null,{"inputs":[{"name":"hashmap"},{"name":"k"},{"name":"t"}],"output":null}],[5,"run_command","","Runs a command, checks that it is successful, and\nreturns its output if requested",null,{"inputs":[{"name":"command"},{"name":"bool"},{"name":"bool"}],"output":{"name":"result"}}],[5,"add_env_path_item","","",null,{"inputs":[{"name":"str"},{"name":"vec"}],"output":{"name":"result"}}],[5,"manifest_dir","","",null,{"inputs":[],"output":{"name":"pathbuf"}}],[8,"MapIfOk","","",null,null],[10,"map_if_ok","","",37,null],[11,"clone","cpp_to_rust::cpp_data","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"fmt","","",1,null],[11,"hash","","",2,null],[11,"clone","","",2,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"fmt","","",2,null],[11,"hash","","",9,null],[11,"clone","","",9,null],[11,"eq","","",9,null],[11,"ne","","",9,null],[11,"fmt","","",9,null],[11,"hash","","",10,null],[11,"clone","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"fmt","","",10,null],[11,"clone","","",12,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"fmt","","",12,null],[11,"hash","","",3,null],[11,"clone","","",3,null],[11,"eq","","",3,null],[11,"ne","","",3,null],[11,"fmt","","",3,null],[11,"hash","","",13,null],[11,"clone","","",13,null],[11,"eq","","",13,null],[11,"fmt","","",13,null],[11,"clone","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"fmt","","",5,null],[11,"clone","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"fmt","","",4,null],[11,"hash","","",11,null],[11,"clone","","",11,null],[11,"eq","","",11,null],[11,"ne","","",11,null],[11,"fmt","","",11,null],[11,"default","","",7,{"inputs":[],"output":{"name":"cpptemplateinstantiation"}}],[11,"clone","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"fmt","","",7,null],[11,"default","","",8,{"inputs":[],"output":{"name":"cpptemplateinstantiations"}}],[11,"clone","","",8,null],[11,"eq","","",8,null],[11,"ne","","",8,null],[11,"fmt","","",8,null],[11,"default","","",6,{"inputs":[],"output":{"name":"cppdata"}}],[11,"clone","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"fmt","","",6,null],[11,"hash","cpp_to_rust::cpp_method","",14,null],[11,"clone","","",14,null],[11,"eq","","",14,null],[11,"ne","","",14,null],[11,"fmt","","",14,null],[11,"hash","","",19,null],[11,"clone","","",19,null],[11,"eq","","",19,null],[11,"fmt","","",19,null],[11,"hash","","",20,null],[11,"clone","","",20,null],[11,"eq","","",20,null],[11,"fmt","","",20,null],[11,"hash","","",17,null],[11,"clone","","",17,null],[11,"eq","","",17,null],[11,"ne","","",17,null],[11,"fmt","","",17,null],[11,"hash","","",16,null],[11,"clone","","",16,null],[11,"eq","","",16,null],[11,"ne","","",16,null],[11,"fmt","","",16,null],[11,"hash","","",18,null],[11,"clone","","",18,null],[11,"eq","","",18,null],[11,"ne","","",18,null],[11,"fmt","","",18,null],[11,"hash","","",15,null],[11,"clone","","",15,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"fmt","","",15,null],[11,"hash","cpp_to_rust::cpp_operator","",30,null],[11,"clone","","",30,null],[11,"eq","","",30,null],[11,"ne","","",30,null],[11,"fmt","","",30,null],[11,"hash","cpp_to_rust::cpp_type","",27,null],[11,"clone","","",27,null],[11,"eq","","",27,null],[11,"fmt","","",27,null],[11,"hash","","",24,null],[11,"clone","","",24,null],[11,"eq","","",24,null],[11,"fmt","","",24,null],[11,"hash","","",25,null],[11,"clone","","",25,null],[11,"eq","","",25,null],[11,"ne","","",25,null],[11,"fmt","","",25,null],[11,"hash","","",23,null],[11,"clone","","",23,null],[11,"eq","","",23,null],[11,"ne","","",23,null],[11,"fmt","","",23,null],[11,"hash","","",26,null],[11,"clone","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"fmt","","",26,null],[11,"hash","","",22,null],[11,"clone","","",22,null],[11,"eq","","",22,null],[11,"ne","","",22,null],[11,"fmt","","",22,null],[0,"string_utils","cpp_to_rust","",null,null],[3,"WordIterator","cpp_to_rust::string_utils","",null,null],[8,"JoinWithString","","",null,null],[10,"join","","",38,null],[8,"CaseOperations","","",null,null],[10,"to_class_case","","",39,null],[10,"to_snake_case","","",39,null],[8,"VecCaseOperations","","",null,null],[10,"to_class_case","","",40,null],[10,"to_snake_case","","",40,null],[11,"new","","",41,{"inputs":[{"name":"str"}],"output":{"name":"worditerator"}}],[11,"next","","",41,null]],"paths":[[3,"Config"],[3,"CppEnumValue"],[3,"CppClassField"],[3,"CppOriginLocation"],[3,"CppTypeData"],[3,"CppTypeDoc"],[3,"CppData"],[3,"CppTemplateInstantiation"],[3,"CppTemplateInstantiations"],[3,"CppClassUsingDirective"],[3,"CppBaseSpecifier"],[3,"TemplateArgumentsDeclaration"],[4,"CppTypeKind"],[4,"CppVisibility"],[3,"CppFunctionArgument"],[3,"CppMethod"],[3,"CppMethodClassMembership"],[3,"CppFieldAccessor"],[3,"CppMethodDoc"],[4,"CppMethodKind"],[4,"CppFieldAccessorType"],[4,"ReturnValueAllocationPlace"],[3,"CppType"],[3,"CppTypeClassBase"],[4,"CppBuiltInNumericType"],[4,"CppSpecificNumericTypeKind"],[4,"CppTypeBase"],[4,"CppTypeIndirection"],[4,"CppTypeRole"],[3,"OperatorInfo"],[4,"CppOperator"],[3,"Error"],[4,"ErrorKind"],[8,"ChainErr"],[8,"PathBufWithAdded"],[3,"FileWrapper"],[3,"ReadDirWrapper"],[8,"MapIfOk"],[8,"JoinWithString"],[8,"CaseOperations"],[8,"VecCaseOperations"],[3,"WordIterator"]]};
searchIndex["rustfmt"] = {"doc":"","items":[[3,"Summary","rustfmt","",null,null],[12,"has_diff","","",0,null],[3,"Indent","","",null,null],[12,"block_indent","","",1,null],[12,"alignment","","",1,null],[3,"FormattingError","","",null,null],[3,"FormatReport","","",null,null],[4,"ErrorKind","","",null,null],[13,"LineOverflow","","",2,null],[13,"TrailingWhitespace","","",2,null],[13,"BadIssue","","",2,null],[4,"Input","","",null,null],[13,"File","","",3,null],[13,"Text","","",3,null],[5,"format_input","","",null,{"inputs":[{"name":"input"},{"name":"config"},{"name":"option"}],"output":{"name":"result"}}],[5,"run","","",null,{"inputs":[{"name":"input"},{"name":"config"}],"output":{"name":"summary"}}],[0,"config","","",null,null],[3,"ConfigHelpItem","rustfmt::config","",null,null],[3,"Config","","",null,null],[12,"verbose","","",4,null],[12,"skip_children","","",4,null],[12,"file_lines","","",4,null],[12,"max_width","","",4,null],[12,"ideal_width","","",4,null],[12,"tab_spaces","","",4,null],[12,"fn_call_width","","",4,null],[12,"struct_lit_width","","",4,null],[12,"struct_variant_width","","",4,null],[12,"force_explicit_abi","","",4,null],[12,"newline_style","","",4,null],[12,"fn_brace_style","","",4,null],[12,"item_brace_style","","",4,null],[12,"else_if_brace_style","","",4,null],[12,"control_brace_style","","",4,null],[12,"impl_empty_single_line","","",4,null],[12,"fn_empty_single_line","","",4,null],[12,"fn_single_line","","",4,null],[12,"fn_return_indent","","",4,null],[12,"fn_args_paren_newline","","",4,null],[12,"fn_args_density","","",4,null],[12,"fn_args_layout","","",4,null],[12,"fn_arg_indent","","",4,null],[12,"type_punctuation_density","","",4,null],[12,"where_density","","",4,null],[12,"where_indent","","",4,null],[12,"where_layout","","",4,null],[12,"where_pred_indent","","",4,null],[12,"where_trailing_comma","","",4,null],[12,"generics_indent","","",4,null],[12,"struct_trailing_comma","","",4,null],[12,"struct_lit_trailing_comma","","",4,null],[12,"struct_lit_style","","",4,null],[12,"struct_lit_multiline_style","","",4,null],[12,"enum_trailing_comma","","",4,null],[12,"report_todo","","",4,null],[12,"report_fixme","","",4,null],[12,"chain_base_indent","","",4,null],[12,"chain_indent","","",4,null],[12,"chains_overflow_last","","",4,null],[12,"reorder_imports","","",4,null],[12,"reorder_imported_names","","",4,null],[12,"single_line_if_else_max_width","","",4,null],[12,"format_strings","","",4,null],[12,"force_format_strings","","",4,null],[12,"take_source_hints","","",4,null],[12,"hard_tabs","","",4,null],[12,"wrap_comments","","",4,null],[12,"normalize_comments","","",4,null],[12,"wrap_match_arms","","",4,null],[12,"match_block_trailing_comma","","",4,null],[12,"match_wildcard_trailing_comma","","",4,null],[12,"closure_block_indent_threshold","","",4,null],[12,"space_before_type_annotation","","",4,null],[12,"space_before_bound","","",4,null],[12,"use_try_shorthand","","",4,null],[12,"write_mode","","",4,null],[3,"ParsedConfig","","",null,null],[12,"verbose","","",5,null],[12,"skip_children","","",5,null],[12,"file_lines","","",5,null],[12,"max_width","","",5,null],[12,"ideal_width","","",5,null],[12,"tab_spaces","","",5,null],[12,"fn_call_width","","",5,null],[12,"struct_lit_width","","",5,null],[12,"struct_variant_width","","",5,null],[12,"force_explicit_abi","","",5,null],[12,"newline_style","","",5,null],[12,"fn_brace_style","","",5,null],[12,"item_brace_style","","",5,null],[12,"else_if_brace_style","","",5,null],[12,"control_brace_style","","",5,null],[12,"impl_empty_single_line","","",5,null],[12,"fn_empty_single_line","","",5,null],[12,"fn_single_line","","",5,null],[12,"fn_return_indent","","",5,null],[12,"fn_args_paren_newline","","",5,null],[12,"fn_args_density","","",5,null],[12,"fn_args_layout","","",5,null],[12,"fn_arg_indent","","",5,null],[12,"type_punctuation_density","","",5,null],[12,"where_density","","",5,null],[12,"where_indent","","",5,null],[12,"where_layout","","",5,null],[12,"where_pred_indent","","",5,null],[12,"where_trailing_comma","","",5,null],[12,"generics_indent","","",5,null],[12,"struct_trailing_comma","","",5,null],[12,"struct_lit_trailing_comma","","",5,null],[12,"struct_lit_style","","",5,null],[12,"struct_lit_multiline_style","","",5,null],[12,"enum_trailing_comma","","",5,null],[12,"report_todo","","",5,null],[12,"report_fixme","","",5,null],[12,"chain_base_indent","","",5,null],[12,"chain_indent","","",5,null],[12,"chains_overflow_last","","",5,null],[12,"reorder_imports","","",5,null],[12,"reorder_imported_names","","",5,null],[12,"single_line_if_else_max_width","","",5,null],[12,"format_strings","","",5,null],[12,"force_format_strings","","",5,null],[12,"take_source_hints","","",5,null],[12,"hard_tabs","","",5,null],[12,"wrap_comments","","",5,null],[12,"normalize_comments","","",5,null],[12,"wrap_match_arms","","",5,null],[12,"match_block_trailing_comma","","",5,null],[12,"match_wildcard_trailing_comma","","",5,null],[12,"closure_block_indent_threshold","","",5,null],[12,"space_before_type_annotation","","",5,null],[12,"space_before_bound","","",5,null],[12,"use_try_shorthand","","",5,null],[12,"write_mode","","",5,null],[4,"NewlineStyle","","",null,null],[13,"Windows","","",6,null],[13,"Unix","","",6,null],[13,"Native","","",6,null],[4,"BraceStyle","","",null,null],[13,"AlwaysNextLine","","",7,null],[13,"PreferSameLine","","",7,null],[13,"SameLineWhere","","",7,null],[4,"ControlBraceStyle","","",null,null],[13,"AlwaysSameLine","","",8,null],[13,"AlwaysNextLine","","",8,null],[4,"ElseIfBraceStyle","","",null,null],[13,"AlwaysSameLine","","",9,null],[13,"ClosingNextLine","","",9,null],[13,"AlwaysNextLine","","",9,null],[4,"ReturnIndent","","",null,null],[13,"WithArgs","","",10,null],[13,"WithWhereClause","","",10,null],[4,"StructLitStyle","","",null,null],[13,"Visual","","",11,null],[13,"Block","","",11,null],[4,"FnArgLayoutStyle","","",null,null],[13,"Visual","","",12,null],[13,"Block","","",12,null],[13,"BlockAlways","","",12,null],[4,"BlockIndentStyle","","",null,null],[13,"Inherit","","",13,null],[13,"Tabbed","","",13,null],[13,"Visual","","",13,null],[4,"Density","","",null,null],[13,"Compressed","","",14,null],[13,"Tall","","",14,null],[13,"CompressedIfEmpty","","",14,null],[13,"Vertical","","",14,null],[4,"TypeDensity","","",null,null],[13,"Compressed","","",15,null],[13,"Wide","","",15,null],[4,"LicensePolicy","","",null,null],[13,"NoLicense","","",16,null],[13,"TextLicense","","",16,null],[13,"FileLicense","","",16,null],[4,"MultilineStyle","","",null,null],[13,"PreferSingle","","",17,null],[13,"ForceMulti","","",17,null],[4,"ReportTactic","","",null,null],[13,"Always","","",18,null],[13,"Unnumbered","","",18,null],[13,"Never","","",18,null],[4,"WriteMode","","",null,null],[13,"Replace","","",19,null],[13,"Overwrite","","",19,null],[13,"Display","","",19,null],[13,"Diff","","",19,null],[13,"Coverage","","",19,null],[13,"Plain","","",19,null],[13,"Checkstyle","","",19,null],[8,"ConfigType","","Trait for types that can be used in `Config`.",null,null],[10,"doc_hint","","Returns hint text for use in `Config::print_docs()`. For enum types, this is a\npipe-separated list of variants; for other types it returns &quot;&lt;type&gt;&quot;.",20,{"inputs":[],"output":{"name":"string"}}],[11,"clone","","",6,null],[11,"eq","","",6,null],[11,"fmt","","",6,null],[11,"decode","","",6,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"from_str","","",6,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"doc_hint","","",6,{"inputs":[],"output":{"name":"string"}}],[11,"clone","","",7,null],[11,"eq","","",7,null],[11,"fmt","","",7,null],[11,"decode","","",7,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"from_str","","",7,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"doc_hint","","",7,{"inputs":[],"output":{"name":"string"}}],[11,"clone","","",8,null],[11,"eq","","",8,null],[11,"fmt","","",8,null],[11,"decode","","",8,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"from_str","","",8,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"doc_hint","","",8,{"inputs":[],"output":{"name":"string"}}],[11,"clone","","",9,null],[11,"eq","","",9,null],[11,"fmt","","",9,null],[11,"decode","","",9,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"from_str","","",9,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"doc_hint","","",9,{"inputs":[],"output":{"name":"string"}}],[11,"clone","","",10,null],[11,"eq","","",10,null],[11,"fmt","","",10,null],[11,"decode","","",10,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"from_str","","",10,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"doc_hint","","",10,{"inputs":[],"output":{"name":"string"}}],[11,"clone","","",11,null],[11,"eq","","",11,null],[11,"fmt","","",11,null],[11,"decode","","",11,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"from_str","","",11,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"doc_hint","","",11,{"inputs":[],"output":{"name":"string"}}],[11,"clone","","",12,null],[11,"eq","","",12,null],[11,"fmt","","",12,null],[11,"decode","","",12,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"from_str","","",12,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"doc_hint","","",12,{"inputs":[],"output":{"name":"string"}}],[11,"clone","","",13,null],[11,"eq","","",13,null],[11,"fmt","","",13,null],[11,"decode","","",13,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"from_str","","",13,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"doc_hint","","",13,{"inputs":[],"output":{"name":"string"}}],[11,"clone","","",14,null],[11,"eq","","",14,null],[11,"fmt","","",14,null],[11,"decode","","",14,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"from_str","","",14,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"doc_hint","","",14,{"inputs":[],"output":{"name":"string"}}],[11,"clone","","",15,null],[11,"eq","","",15,null],[11,"fmt","","",15,null],[11,"decode","","",15,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"from_str","","",15,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"doc_hint","","",15,{"inputs":[],"output":{"name":"string"}}],[11,"to_list_tactic","","",14,null],[11,"clone","","",16,null],[11,"eq","","",16,null],[11,"fmt","","",16,null],[11,"decode","","",16,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"from_str","","",16,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"doc_hint","","",16,{"inputs":[],"output":{"name":"string"}}],[11,"clone","","",17,null],[11,"eq","","",17,null],[11,"fmt","","",17,null],[11,"decode","","",17,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"from_str","","",17,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"doc_hint","","",17,{"inputs":[],"output":{"name":"string"}}],[11,"to_list_tactic","","",17,null],[11,"clone","","",18,null],[11,"eq","","",18,null],[11,"fmt","","",18,null],[11,"decode","","",18,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"from_str","","",18,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"doc_hint","","",18,{"inputs":[],"output":{"name":"string"}}],[11,"clone","","",19,null],[11,"eq","","",19,null],[11,"fmt","","",19,null],[11,"decode","","",19,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"from_str","","",19,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"doc_hint","","",19,{"inputs":[],"output":{"name":"string"}}],[11,"option_name","","",21,null],[11,"doc_string","","",21,null],[11,"variant_names","","",21,null],[11,"default","","",21,null],[11,"decode","","",4,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",4,null],[11,"decode","","",5,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",5,null],[11,"from_toml","","",4,{"inputs":[{"name":"str"}],"output":{"name":"config"}}],[11,"override_value","","",4,null],[11,"print_docs","","",4,{"inputs":[],"output":null}],[11,"default","","",4,{"inputs":[],"output":{"name":"config"}}],[0,"codemap","rustfmt","This module contains utilities that work with the `CodeMap` from libsyntax / syntex_syntax.\nThis includes extension traits and methods for looking up spans and line ranges for AST nodes.",null,null],[3,"LineRange","rustfmt::codemap","A range of lines in a file, inclusive of both ends.",null,null],[12,"file","","",22,null],[12,"lo","","",22,null],[12,"hi","","",22,null],[8,"SpanUtils","","",null,null],[10,"span_after","","",23,null],[10,"span_after_last","","",23,null],[10,"span_before","","",23,null],[8,"LineRangeUtils","","",null,null],[10,"lookup_line_range","","Returns the `LineRange` that corresponds to `span` in `self`.",24,null],[11,"file_name","","",22,null],[0,"filemap","rustfmt","",null,null],[5,"append_newline","rustfmt::filemap","",null,{"inputs":[{"name":"stringbuffer"}],"output":null}],[5,"write_all_files","","",null,{"inputs":[{"name":"filemap"},{"name":"t"},{"name":"config"}],"output":{"name":"result"}}],[5,"write_system_newlines","","",null,{"inputs":[{"name":"t"},{"name":"stringbuffer"},{"name":"config"}],"output":{"name":"result"}}],[5,"write_file","","",null,{"inputs":[{"name":"stringbuffer"},{"name":"str"},{"name":"t"},{"name":"config"}],"output":{"name":"result"}}],[6,"FileMap","","",null,null],[6,"FileRecord","","",null,null],[0,"file_lines","rustfmt","This module contains types and functions to support formatting specific line ranges.",null,null],[3,"FileLines","rustfmt::file_lines","A set of lines in files.",null,null],[3,"Files","","FileLines files iterator.",null,null],[11,"clone","","",25,null],[11,"fmt","","",25,null],[11,"default","","",25,{"inputs":[],"output":{"name":"filelines"}}],[11,"all","","Creates a `FileLines` that contains all lines in all files.",25,{"inputs":[],"output":{"name":"filelines"}}],[11,"files","","Returns an iterator over the files contained in `self`.",25,null],[11,"contains","","Returns true if `range` is fully contained in `self`.",25,null],[11,"intersects","","Returns true if any lines in `range` are in `self`.",25,null],[11,"next","","",26,null],[11,"from_str","","",25,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"decode","","",25,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[0,"visitor","rustfmt","",null,null],[3,"FmtVisitor","rustfmt::visitor","",null,null],[12,"parse_session","","",27,null],[12,"codemap","","",27,null],[12,"buffer","","",27,null],[12,"last_pos","","",27,null],[12,"block_indent","","",27,null],[12,"config","","",27,null],[11,"visit_block","","",27,null],[11,"visit_item","","",27,null],[11,"visit_trait_item","","",27,null],[11,"visit_impl_item","","",27,null],[11,"from_codemap","","",27,{"inputs":[{"name":"parsesess"},{"name":"config"}],"output":{"name":"fmtvisitor"}}],[11,"snippet","","",27,null],[11,"visit_attrs","","",27,null],[11,"format_separate_mod","","",27,null],[11,"get_context","","",27,null],[11,"format_foreign_mod","","",27,null],[11,"rewrite_fn","","",27,null],[11,"rewrite_required_fn","","",27,null],[11,"visit_enum","","",27,null],[11,"format_missing","","",27,null],[11,"format_missing_with_indent","","",27,null],[11,"format_missing_no_indent","","",27,null],[11,"format_imports","","",27,null],[11,"format_import","","",27,null],[0,"modules","rustfmt","",null,null],[5,"list_files","rustfmt::modules","List all the files containing modules of a crate.\nIf a file is used twice in a crate, it appears only once.",null,{"inputs":[{"name":"crate"},{"name":"codemap"}],"output":{"name":"hashmap"}}],[0,"rustfmt_diff","rustfmt","",null,null],[3,"Mismatch","rustfmt::rustfmt_diff","",null,null],[12,"line_number","","",28,null],[12,"lines","","",28,null],[4,"DiffLine","","",null,null],[13,"Context","","",29,null],[13,"Expected","","",29,null],[13,"Resulting","","",29,null],[5,"make_diff","","",null,{"inputs":[{"name":"str"},{"name":"str"},{"name":"usize"}],"output":{"name":"vec"}}],[5,"print_diff","","",null,{"inputs":[{"name":"vec"},{"name":"f"}],"output":null}],[5,"print_diff_basic","","",null,{"inputs":[{"name":"vec"},{"name":"f"}],"output":null}],[11,"fmt","","",29,null],[11,"eq","","",29,null],[11,"ne","","",29,null],[11,"fmt","","",28,null],[11,"eq","","",28,null],[11,"ne","","",28,null],[11,"fmt","rustfmt","",0,null],[11,"clone","","",0,null],[11,"new","","",0,{"inputs":[],"output":{"name":"summary"}}],[11,"has_operational_errors","","",0,null],[11,"has_parsing_errors","","",0,null],[11,"has_formatting_errors","","",0,null],[11,"add_operational_error","","",0,null],[11,"add_parsing_error","","",0,null],[11,"add_formatting_error","","",0,null],[11,"add_diff","","",0,null],[11,"has_no_errors","","",0,null],[11,"add","","",0,null],[8,"Spanned","","",null,null],[10,"span","","",30,null],[11,"clone","","",1,null],[11,"fmt","","",1,null],[11,"new","","",1,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"indent"}}],[11,"empty","","",1,{"inputs":[],"output":{"name":"indent"}}],[11,"block_indent","","",1,null],[11,"block_unindent","","",1,null],[11,"width","","",1,null],[11,"to_string","","",1,null],[11,"add","","",1,null],[11,"sub","","",1,null],[11,"add","","",1,null],[11,"sub","","",1,null],[11,"fmt","","",2,null],[11,"warning_count","","",31,null],[11,"has_warnings","","",31,null],[11,"fmt","","",31,null],[11,"fmt","","",3,null],[14,"impl_enum_decodable","","",null,null],[14,"try_opt","","",null,null],[11,"doc_hint","rustfmt::file_lines","",25,{"inputs":[],"output":{"name":"string"}}]],"paths":[[3,"Summary"],[3,"Indent"],[4,"ErrorKind"],[4,"Input"],[3,"Config"],[3,"ParsedConfig"],[4,"NewlineStyle"],[4,"BraceStyle"],[4,"ControlBraceStyle"],[4,"ElseIfBraceStyle"],[4,"ReturnIndent"],[4,"StructLitStyle"],[4,"FnArgLayoutStyle"],[4,"BlockIndentStyle"],[4,"Density"],[4,"TypeDensity"],[4,"LicensePolicy"],[4,"MultilineStyle"],[4,"ReportTactic"],[4,"WriteMode"],[8,"ConfigType"],[3,"ConfigHelpItem"],[3,"LineRange"],[8,"SpanUtils"],[8,"LineRangeUtils"],[3,"FileLines"],[3,"Files"],[3,"FmtVisitor"],[3,"Mismatch"],[4,"DiffLine"],[8,"Spanned"],[3,"FormatReport"]]};
searchIndex["syntex_syntax"] = {"doc":"The Rust parser and macro expander.","items":[[0,"diagnostics","syntex_syntax","",null,null],[0,"plugin","syntex_syntax::diagnostics","",null,null],[3,"ErrorInfo","syntex_syntax::diagnostics::plugin","Error information type.",null,null],[12,"description","","",0,null],[12,"use_site","","",0,null],[5,"expand_diagnostic_used","","",null,null],[5,"expand_register_diagnostic","","",null,null],[5,"expand_build_diagnostic_array","","",null,null],[6,"ErrorMap","","Mapping from error codes to metadata.",null,null],[0,"metadata","syntex_syntax::diagnostics","This module contains utilities for outputting metadata for diagnostic errors.",null,null],[3,"ErrorMetadata","syntex_syntax::diagnostics::metadata","JSON encodable/decodable version of `ErrorInfo`.",null,null],[12,"description","","",1,null],[12,"use_site","","",1,null],[3,"ErrorLocation","","JSON encodable error location type with filename and line number.",null,null],[12,"filename","","",2,null],[12,"line","","",2,null],[5,"get_metadata_dir","","Get the directory where metadata for a given `prefix` should be stored.",null,{"inputs":[{"name":"str"}],"output":{"name":"pathbuf"}}],[5,"output_metadata","","Write metadata for the errors in `err_map` to disk, to a file corresponding to `prefix/name`.",null,{"inputs":[{"name":"extctxt"},{"name":"str"},{"name":"str"},{"name":"errormap"}],"output":{"name":"result"}}],[6,"ErrorMetadataMap","","Mapping from error codes to metadata that can be (de)serialized.",null,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"decode","","",1,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",1,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"decode","","",2,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",2,null],[11,"from_span","","Create an error location from a span.",2,{"inputs":[{"name":"extctxt"},{"name":"span"}],"output":{"name":"errorlocation"}}],[0,"util","syntex_syntax","",null,null],[3,"ThinVec","syntex_syntax::util","A vector type optimized for cases where this size is usually 0 (c.f. `SmallVector`).\nThe `Option&lt;Box&lt;..&gt;&gt;` wrapping allows us to represent a zero sized vector with `None`,\nwhich uses only a single (null) pointer.",null,null],[0,"interner","","An &quot;interner&quot; is a data structure that associates values with usize tags and\nallows bidirectional lookup; i.e. given a value, one can easily find the\ntype, and vice versa.",null,null],[3,"Interner","syntex_syntax::util::interner","",null,null],[11,"default","","",3,{"inputs":[],"output":{"name":"interner"}}],[11,"new","","",3,{"inputs":[],"output":{"name":"self"}}],[11,"prefill","","",3,null],[11,"intern","","",3,null],[11,"gensym","","",3,null],[11,"gensym_copy","","Create a gensym with the same name as an existing entry.",3,null],[11,"get","","",3,null],[11,"find","","",3,null],[0,"lev_distance","syntex_syntax::util","",null,null],[5,"lev_distance","syntex_syntax::util::lev_distance","To find the Levenshtein distance between two strings",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"usize"}}],[5,"find_best_match_for_name","","To find the best match for a given string from an iterator of names\nAs a loose rule to avoid the obviously incorrect suggestions, it takes\nan optional limit for the maximum allowable edit distance, which defaults\nto one-third of the given word",null,{"inputs":[{"name":"t"},{"name":"str"},{"name":"option"}],"output":{"name":"option"}}],[0,"node_count","syntex_syntax::util","",null,null],[3,"NodeCounter","syntex_syntax::util::node_count","",null,null],[12,"count","","",4,null],[11,"new","","",4,{"inputs":[],"output":{"name":"nodecounter"}}],[11,"visit_ident","","",4,null],[11,"visit_mod","","",4,null],[11,"visit_foreign_item","","",4,null],[11,"visit_item","","",4,null],[11,"visit_local","","",4,null],[11,"visit_block","","",4,null],[11,"visit_stmt","","",4,null],[11,"visit_arm","","",4,null],[11,"visit_pat","","",4,null],[11,"visit_expr","","",4,null],[11,"visit_ty","","",4,null],[11,"visit_generics","","",4,null],[11,"visit_fn","","",4,null],[11,"visit_trait_item","","",4,null],[11,"visit_impl_item","","",4,null],[11,"visit_trait_ref","","",4,null],[11,"visit_ty_param_bound","","",4,null],[11,"visit_poly_trait_ref","","",4,null],[11,"visit_variant_data","","",4,null],[11,"visit_struct_field","","",4,null],[11,"visit_enum_def","","",4,null],[11,"visit_variant","","",4,null],[11,"visit_lifetime","","",4,null],[11,"visit_lifetime_def","","",4,null],[11,"visit_mac","","",4,null],[11,"visit_path","","",4,null],[11,"visit_path_list_item","","",4,null],[11,"visit_path_parameters","","",4,null],[11,"visit_assoc_type_binding","","",4,null],[11,"visit_attribute","","",4,null],[11,"visit_macro_def","","",4,null],[0,"parser","syntex_syntax::util","",null,null],[4,"AssocOp","syntex_syntax::util::parser","Associative operator with precedence.",null,null],[13,"Add","","`+`",5,null],[13,"Subtract","","`-`",5,null],[13,"Multiply","","`*`",5,null],[13,"Divide","","`/`",5,null],[13,"Modulus","","`%`",5,null],[13,"LAnd","","`&amp;&amp;`",5,null],[13,"LOr","","`||`",5,null],[13,"BitXor","","`^`",5,null],[13,"BitAnd","","`&amp;`",5,null],[13,"BitOr","","`|`",5,null],[13,"ShiftLeft","","`&lt;&lt;`",5,null],[13,"ShiftRight","","`&gt;&gt;`",5,null],[13,"Equal","","`==`",5,null],[13,"Less","","`&lt;`",5,null],[13,"LessEqual","","`&lt;=`",5,null],[13,"NotEqual","","`!=`",5,null],[13,"Greater","","`&gt;`",5,null],[13,"GreaterEqual","","`&gt;=`",5,null],[13,"Assign","","`=`",5,null],[13,"Inplace","","`&lt;-`",5,null],[13,"AssignOp","","`?=` where ? is one of the BinOpToken",5,null],[13,"As","","`as`",5,null],[13,"DotDot","","`..` range",5,null],[13,"DotDotDot","","`...` range",5,null],[13,"Colon","","`:`",5,null],[4,"Fixity","","",null,null],[13,"Left","","The operator is left-associative",6,null],[13,"Right","","The operator is right-associative",6,null],[13,"None","","The operator is not associative",6,null],[11,"fmt","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"fmt","","",6,null],[11,"eq","","",6,null],[11,"from_token","","Create a new AssocOP from a token",5,{"inputs":[{"name":"token"}],"output":{"name":"option"}}],[11,"from_ast_binop","","Create a new AssocOp from ast::BinOpKind.",5,{"inputs":[{"name":"binopkind"}],"output":{"name":"self"}}],[11,"precedence","","Gets the precedence of this operator",5,null],[11,"fixity","","Gets the fixity of this operator",5,null],[11,"is_comparison","","",5,null],[11,"is_assign_like","","",5,null],[11,"to_ast_binop","","",5,null],[0,"small_vector","syntex_syntax::util","",null,null],[3,"SmallVector","syntex_syntax::util::small_vector","A vector type optimized for cases where the size is almost always 0 or 1",null,null],[3,"IntoIter","","",null,null],[11,"into","","",7,null],[11,"from_iter","","",7,{"inputs":[{"name":"i"}],"output":{"name":"smallvector"}}],[11,"extend","","",7,null],[11,"zero","","",7,{"inputs":[],"output":{"name":"smallvector"}}],[11,"one","","",7,{"inputs":[{"name":"t"}],"output":{"name":"smallvector"}}],[11,"many","","",7,{"inputs":[{"name":"vec"}],"output":{"name":"smallvector"}}],[11,"as_slice","","",7,null],[11,"pop","","",7,null],[11,"push","","",7,null],[11,"push_all","","",7,null],[11,"get","","",7,null],[11,"expect_one","","",7,null],[11,"len","","",7,null],[11,"is_empty","","",7,null],[11,"map","","",7,null],[11,"into_iter","","",7,null],[11,"next","","",8,null],[11,"size_hint","","",8,null],[11,"move_flat_map","","",7,null],[0,"move_map","syntex_syntax::util","",null,null],[8,"MoveMap","syntex_syntax::util::move_map","",null,null],[11,"move_map","","",9,null],[10,"move_flat_map","","",9,null],[11,"clone","syntex_syntax::util","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"encode","","",10,null],[11,"decode","","",10,{"inputs":[{"name":"__dt"}],"output":{"name":"result"}}],[11,"hash","","",10,null],[11,"fmt","","",10,null],[11,"new","","",10,{"inputs":[],"output":{"name":"self"}}],[11,"from","","",10,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"into","","",10,null],[11,"deref","","",10,null],[11,"extend","","",10,null],[0,"json","syntex_syntax","A JSON emitter for errors.",null,null],[3,"JsonEmitter","syntex_syntax::json","",null,null],[11,"basic","","",11,{"inputs":[],"output":{"name":"jsonemitter"}}],[11,"stderr","","",11,{"inputs":[{"name":"option"},{"name":"rc"}],"output":{"name":"jsonemitter"}}],[11,"emit","","",11,null],[0,"syntax","syntex_syntax","",null,null],[0,"abi","","",null,null],[3,"AbiData","syntex_syntax::abi","",null,null],[4,"Os","","",null,null],[13,"Windows","","",12,null],[13,"Macos","","",12,null],[13,"Linux","","",12,null],[13,"Android","","",12,null],[13,"Freebsd","","",12,null],[13,"iOS","","",12,null],[13,"Dragonfly","","",12,null],[13,"Bitrig","","",12,null],[13,"Netbsd","","",12,null],[13,"Openbsd","","",12,null],[13,"NaCl","","",12,null],[13,"Solaris","","",12,null],[4,"Abi","","",null,null],[13,"Cdecl","","",13,null],[13,"Stdcall","","",13,null],[13,"Fastcall","","",13,null],[13,"Vectorcall","","",13,null],[13,"Aapcs","","",13,null],[13,"Win64","","",13,null],[13,"Rust","","",13,null],[13,"C","","",13,null],[13,"System","","",13,null],[13,"RustIntrinsic","","",13,null],[13,"RustCall","","",13,null],[13,"PlatformIntrinsic","","",13,null],[4,"Architecture","","",null,null],[13,"X86","","",14,null],[13,"X86_64","","",14,null],[13,"Arm","","",14,null],[13,"Mips","","",14,null],[13,"Mipsel","","",14,null],[4,"AbiArchitecture","","",null,null],[13,"Rust","","Not a real ABI (e.g., intrinsic)",15,null],[13,"All","","An ABI that specifies cross-platform defaults (e.g., &quot;C&quot;)",15,null],[13,"Archs","","Multiple architectures (bitset)",15,null],[5,"lookup","","Returns the ABI with the given name (if any).",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[5,"all_names","","",null,{"inputs":[],"output":{"name":"vec"}}],[11,"clone","","",12,null],[11,"eq","","",12,null],[11,"fmt","","",12,null],[11,"eq","","",13,null],[11,"hash","","",13,null],[11,"encode","","",13,null],[11,"decode","","",13,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",13,null],[11,"fmt","","",13,null],[11,"clone","","",14,null],[11,"eq","","",14,null],[11,"fmt","","",14,null],[11,"clone","","",16,null],[11,"clone","","",15,null],[11,"index","","",13,null],[11,"data","","",13,null],[11,"name","","",13,null],[11,"fmt","","",13,null],[11,"fmt","","",12,null],[0,"ast","syntex_syntax","",null,null],[3,"ThinVec","syntex_syntax::ast","A vector type optimized for cases where this size is usually 0 (c.f. `SmallVector`).\nThe `Option&lt;Box&lt;..&gt;&gt;` wrapping allows us to represent a zero sized vector with `None`,\nwhich uses only a single (null) pointer.",null,null],[3,"Name","","A name is a part of an identifier, representing a string or gensym. It&#39;s\nthe result of interning.",null,null],[12,"0","","",17,null],[3,"Ident","","An identifier contains a Name (index into the interner\ntable) and a SyntaxContext to track renaming and\nmacro expansion per Flatt et al., &quot;Macros That Work Together&quot;",null,null],[12,"name","","",18,null],[12,"ctxt","","",18,null],[3,"Lifetime","","",null,null],[12,"id","","",19,null],[12,"span","","",19,null],[12,"name","","",19,null],[3,"LifetimeDef","","A lifetime definition, e.g. `&#39;a: &#39;b+&#39;c+&#39;d`",null,null],[12,"lifetime","","",20,null],[12,"bounds","","",20,null],[3,"Path","","A &quot;Path&quot; is essentially Rust&#39;s notion of a name.",null,null],[12,"span","","",21,null],[12,"global","","A `::foo` path, is relative to the crate root rather than current\nmodule (like paths in an import).",21,null],[12,"segments","","The segments in the path: the things separated by `::`.",21,null],[3,"PathSegment","","A segment of a path: an identifier, an optional lifetime, and a set of types.",null,null],[12,"identifier","","The identifier portion of this path segment.",22,null],[12,"parameters","","Type/lifetime parameters attached to this path. They come in\ntwo flavors: `Path&lt;A,B,C&gt;` and `Path(A,B) -&gt; C`. Note that\nthis is more than just simple syntactic sugar; the use of\nparens affects the region binding rules, so we preserve the\ndistinction.",22,null],[3,"AngleBracketedParameterData","","A path like `Foo&lt;&#39;a, T&gt;`",null,null],[12,"lifetimes","","The lifetime parameters for this path segment.",23,null],[12,"types","","The type parameters for this path segment, if present.",23,null],[12,"bindings","","Bindings (equality constraints) on associated types, if present.",23,null],[3,"ParenthesizedParameterData","","A path like `Foo(A,B) -&gt; C`",null,null],[12,"span","","Overall span",24,null],[12,"inputs","","`(A,B)`",24,null],[12,"output","","`C`",24,null],[3,"TyParam","","",null,null],[12,"ident","","",25,null],[12,"id","","",25,null],[12,"bounds","","",25,null],[12,"default","","",25,null],[12,"span","","",25,null],[3,"Generics","","Represents lifetimes and type parameters attached to a declaration\nof a function, enum, trait, etc.",null,null],[12,"lifetimes","","",26,null],[12,"ty_params","","",26,null],[12,"where_clause","","",26,null],[12,"span","","",26,null],[3,"WhereClause","","A `where` clause in a definition",null,null],[12,"id","","",27,null],[12,"predicates","","",27,null],[3,"WhereBoundPredicate","","A type bound.",null,null],[12,"span","","",28,null],[12,"bound_lifetimes","","Any lifetimes from a `for` binding",28,null],[12,"bounded_ty","","The type being bounded",28,null],[12,"bounds","","Trait and lifetime bounds (`Clone+Send+&#39;static`)",28,null],[3,"WhereRegionPredicate","","A lifetime predicate.",null,null],[12,"span","","",29,null],[12,"lifetime","","",29,null],[12,"bounds","","",29,null],[3,"WhereEqPredicate","","An equality predicate (unsupported).",null,null],[12,"id","","",30,null],[12,"span","","",30,null],[12,"path","","",30,null],[12,"ty","","",30,null],[3,"Crate","","",null,null],[12,"module","","",31,null],[12,"attrs","","",31,null],[12,"config","","",31,null],[12,"span","","",31,null],[12,"exported_macros","","",31,null],[3,"Block","","A Block (`{ .. }`).",null,null],[12,"stmts","","Statements in a block",32,null],[12,"id","","",32,null],[12,"rules","","Distinguishes between `unsafe { ... }` and `{ ... }`",32,null],[12,"span","","",32,null],[3,"Pat","","",null,null],[12,"id","","",33,null],[12,"node","","",33,null],[12,"span","","",33,null],[3,"FieldPat","","A single field in a struct pattern",null,null],[12,"ident","","The identifier for the field",34,null],[12,"pat","","The pattern the field is destructured to",34,null],[12,"is_shorthand","","",34,null],[3,"Stmt","","A statement",null,null],[12,"id","","",35,null],[12,"node","","",35,null],[12,"span","","",35,null],[3,"Local","","Local represents a `let` statement, e.g., `let &lt;pat&gt;:&lt;ty&gt; = &lt;expr&gt;;`",null,null],[12,"pat","","",36,null],[12,"ty","","",36,null],[12,"init","","Initializer expression to set the value, if any",36,null],[12,"id","","",36,null],[12,"span","","",36,null],[12,"attrs","","",36,null],[3,"Arm","","An arm of a &#39;match&#39;.",null,null],[12,"attrs","","",37,null],[12,"pats","","",37,null],[12,"guard","","",37,null],[12,"body","","",37,null],[3,"Field","","",null,null],[12,"ident","","",38,null],[12,"expr","","",38,null],[12,"span","","",38,null],[3,"Expr","","An expression",null,null],[12,"id","","",39,null],[12,"node","","",39,null],[12,"span","","",39,null],[12,"attrs","","",39,null],[3,"QSelf","","The explicit Self type in a &quot;qualified path&quot;. The actual\npath, including the trait and the associated item, is stored\nseparately. `position` represents the index of the associated\nitem qualified with this Self type.",null,null],[12,"ty","","",40,null],[12,"position","","",40,null],[3,"Mac_","","Represents a macro invocation. The Path indicates which macro\nis being invoked, and the vector of token-trees contains the source\nof the macro invocation.",null,null],[12,"path","","",41,null],[12,"tts","","",41,null],[3,"MutTy","","",null,null],[12,"ty","","",42,null],[12,"mutbl","","",42,null],[3,"MethodSig","","Represents a method&#39;s signature in a trait declaration,\nor in an implementation.",null,null],[12,"unsafety","","",43,null],[12,"constness","","",43,null],[12,"abi","","",43,null],[12,"decl","","",43,null],[12,"generics","","",43,null],[3,"TraitItem","","Represents an item declaration within a trait declaration,\npossibly including a default implementation. A trait item is\neither required (meaning it doesn&#39;t have an implementation, just a\nsignature) or provided (meaning it has a default implementation).",null,null],[12,"id","","",44,null],[12,"ident","","",44,null],[12,"attrs","","",44,null],[12,"node","","",44,null],[12,"span","","",44,null],[3,"ImplItem","","",null,null],[12,"id","","",45,null],[12,"ident","","",45,null],[12,"vis","","",45,null],[12,"defaultness","","",45,null],[12,"attrs","","",45,null],[12,"node","","",45,null],[12,"span","","",45,null],[3,"TypeBinding","","",null,null],[12,"id","","",46,null],[12,"ident","","",46,null],[12,"ty","","",46,null],[12,"span","","",46,null],[3,"Ty","","",null,null],[12,"id","","",47,null],[12,"node","","",47,null],[12,"span","","",47,null],[3,"BareFnTy","","",null,null],[12,"unsafety","","",48,null],[12,"abi","","",48,null],[12,"lifetimes","","",48,null],[12,"decl","","",48,null],[3,"InlineAsmOutput","","Inline assembly.",null,null],[12,"constraint","","",49,null],[12,"expr","","",49,null],[12,"is_rw","","",49,null],[12,"is_indirect","","",49,null],[3,"InlineAsm","","Inline assembly.",null,null],[12,"asm","","",50,null],[12,"asm_str_style","","",50,null],[12,"outputs","","",50,null],[12,"inputs","","",50,null],[12,"clobbers","","",50,null],[12,"volatile","","",50,null],[12,"alignstack","","",50,null],[12,"dialect","","",50,null],[12,"expn_id","","",50,null],[3,"Arg","","An argument in a function header.",null,null],[12,"ty","","",51,null],[12,"pat","","",51,null],[12,"id","","",51,null],[3,"FnDecl","","Header (not the body) of a function declaration.",null,null],[12,"inputs","","",52,null],[12,"output","","",52,null],[12,"variadic","","",52,null],[3,"Mod","","Module declaration.",null,null],[12,"inner","","A span from the first token past `{` to the last token until `}`.\nFor `mod foo;`, the inner span ranges from the first token\nto the last token in the external file.",53,null],[12,"items","","",53,null],[3,"ForeignMod","","Foreign module declaration.",null,null],[12,"abi","","",54,null],[12,"items","","",54,null],[3,"EnumDef","","",null,null],[12,"variants","","",55,null],[3,"Variant_","","",null,null],[12,"name","","",56,null],[12,"attrs","","",56,null],[12,"data","","",56,null],[12,"disr_expr","","Explicit discriminant, e.g. `Foo = 1`",56,null],[3,"PathListItem_","","",null,null],[12,"name","","",57,null],[12,"rename","","renamed in list, e.g. `use foo::{bar as baz};`",57,null],[12,"id","","",57,null],[3,"AttrId","","",null,null],[12,"0","","",58,null],[3,"Attribute_","","Doc-comments are promoted to attributes that have is_sugared_doc = true",null,null],[12,"id","","",59,null],[12,"style","","",59,null],[12,"value","","",59,null],[12,"is_sugared_doc","","",59,null],[3,"TraitRef","","TraitRef&#39;s appear in impls.",null,null],[12,"path","","",60,null],[12,"ref_id","","",60,null],[3,"PolyTraitRef","","",null,null],[12,"bound_lifetimes","","The `&#39;a` in `&lt;&#39;a&gt; Foo&lt;&amp;&#39;a T&gt;`",61,null],[12,"trait_ref","","The `Foo&lt;&amp;&#39;a T&gt;` in `&lt;&#39;a&gt; Foo&lt;&amp;&#39;a T&gt;`",61,null],[12,"span","","",61,null],[3,"StructField","","Field of a struct.",null,null],[12,"span","","",62,null],[12,"ident","","",62,null],[12,"vis","","",62,null],[12,"id","","",62,null],[12,"ty","","",62,null],[12,"attrs","","",62,null],[3,"Item","","An item",null,null],[12,"ident","","",63,null],[12,"attrs","","",63,null],[12,"id","","",63,null],[12,"node","","",63,null],[12,"vis","","",63,null],[12,"span","","",63,null],[3,"ForeignItem","","",null,null],[12,"ident","","",64,null],[12,"attrs","","",64,null],[12,"node","","",64,null],[12,"id","","",64,null],[12,"span","","",64,null],[12,"vis","","",64,null],[3,"MacroDef","","A macro definition, in this crate or imported from another.",null,null],[12,"ident","","",65,null],[12,"attrs","","",65,null],[12,"id","","",65,null],[12,"span","","",65,null],[12,"imported_from","","",65,null],[12,"export","","",65,null],[12,"use_locally","","",65,null],[12,"allow_internal_unstable","","",65,null],[12,"body","","",65,null],[4,"PathParameters","","Parameters of a path segment.",null,null],[13,"AngleBracketed","","The `&lt;&#39;a, A,B,C&gt;` in `foo::bar::baz::&lt;&#39;a, A,B,C&gt;`",66,null],[13,"Parenthesized","","The `(A,B)` and `C` in `Foo(A,B) -&gt; C`",66,null],[4,"TyParamBound","","The AST represents all type param bounds as types.\ntypeck::collect::compute_bounds matches these against\nthe &quot;special&quot; built-in traits (see middle::lang_items) and\ndetects Copy, Send and Sync.",null,null],[13,"TraitTyParamBound","","",67,null],[13,"RegionTyParamBound","","",67,null],[4,"TraitBoundModifier","","A modifier on a bound, currently this is only used for `?Sized`, where the\nmodifier is `Maybe`. Negative bounds should also be handled here.",null,null],[13,"None","","",68,null],[13,"Maybe","","",68,null],[4,"WherePredicate","","A single predicate in a `where` clause",null,null],[13,"BoundPredicate","","A type binding, e.g. `for&lt;&#39;c&gt; Foo: Send+Clone+&#39;c`",69,null],[13,"RegionPredicate","","A lifetime predicate, e.g. `&#39;a: &#39;b+&#39;c`",69,null],[13,"EqPredicate","","An equality predicate (unsupported)",69,null],[4,"NestedMetaItemKind","","Possible values inside of compile-time attribute lists.",null,null],[13,"MetaItem","","A full MetaItem, for recursive meta items.",70,null],[13,"Literal","","A literal.",70,null],[4,"MetaItemKind","","A compile-time attribute item.",null,null],[13,"Word","","Word meta item.",71,null],[13,"List","","List meta item.",71,null],[13,"NameValue","","Name value meta item.",71,null],[4,"BindingMode","","",null,null],[13,"ByRef","","",72,null],[13,"ByValue","","",72,null],[4,"PatKind","","",null,null],[13,"Wild","","Represents a wildcard pattern (`_`)",73,null],[13,"Ident","","A `PatKind::Ident` may either be a new bound variable (`ref mut binding @ OPT_SUBPATTERN`),\nor a unit struct/variant pattern, or a const pattern (in the last two cases the third\nfield must be `None`). Disambiguation cannot be done with parser alone, so it happens\nduring name resolution.",73,null],[13,"Struct","","A struct or struct variant pattern, e.g. `Variant {x, y, ..}`.\nThe `bool` is `true` in the presence of a `..`.",73,null],[13,"TupleStruct","","A tuple struct/variant pattern `Variant(x, y, .., z)`.\nIf the `..` pattern fragment is present, then `Option&lt;usize&gt;` denotes its position.\n0 &lt;= position &lt;= subpats.len()",73,null],[13,"Path","","A possibly qualified path pattern.\nUnquailfied path patterns `A::B::C` can legally refer to variants, structs, constants\nor associated constants. Quailfied path patterns `&lt;A&gt;::B::C`/`&lt;A as Trait&gt;::B::C` can\nonly legally refer to associated constants.",73,null],[13,"Tuple","","A tuple pattern `(a, b)`.\nIf the `..` pattern fragment is present, then `Option&lt;usize&gt;` denotes its position.\n0 &lt;= position &lt;= subpats.len()",73,null],[13,"Box","","A `box` pattern",73,null],[13,"Ref","","A reference pattern, e.g. `&amp;mut (a, b)`",73,null],[13,"Lit","","A literal",73,null],[13,"Range","","A range pattern, e.g. `1...2`",73,null],[13,"Vec","","`[a, b, ..i, y, z]` is represented as:\n`PatKind::Vec(box [a, b], Some(i), box [y, z])`",73,null],[13,"Mac","","A macro pattern; pre-expansion",73,null],[4,"Mutability","","",null,null],[13,"Mutable","","",74,null],[13,"Immutable","","",74,null],[4,"BinOpKind","","",null,null],[13,"Add","","The `+` operator (addition)",75,null],[13,"Sub","","The `-` operator (subtraction)",75,null],[13,"Mul","","The `*` operator (multiplication)",75,null],[13,"Div","","The `/` operator (division)",75,null],[13,"Rem","","The `%` operator (modulus)",75,null],[13,"And","","The `&amp;&amp;` operator (logical and)",75,null],[13,"Or","","The `||` operator (logical or)",75,null],[13,"BitXor","","The `^` operator (bitwise xor)",75,null],[13,"BitAnd","","The `&amp;` operator (bitwise and)",75,null],[13,"BitOr","","The `|` operator (bitwise or)",75,null],[13,"Shl","","The `&lt;&lt;` operator (shift left)",75,null],[13,"Shr","","The `&gt;&gt;` operator (shift right)",75,null],[13,"Eq","","The `==` operator (equality)",75,null],[13,"Lt","","The `&lt;` operator (less than)",75,null],[13,"Le","","The `&lt;=` operator (less than or equal to)",75,null],[13,"Ne","","The `!=` operator (not equal to)",75,null],[13,"Ge","","The `&gt;=` operator (greater than or equal to)",75,null],[13,"Gt","","The `&gt;` operator (greater than)",75,null],[4,"UnOp","","",null,null],[13,"Deref","","The `*` operator for dereferencing",76,null],[13,"Not","","The `!` operator for logical inversion",76,null],[13,"Neg","","The `-` operator for negation",76,null],[4,"StmtKind","","",null,null],[13,"Local","","A local (let) binding.",77,null],[13,"Item","","An item definition.",77,null],[13,"Expr","","Expr without trailing semi-colon.",77,null],[13,"Semi","","",77,null],[13,"Mac","","",77,null],[4,"MacStmtStyle","","",null,null],[13,"Semicolon","","The macro statement had a trailing semicolon, e.g. `foo! { ... };`\n`foo!(...);`, `foo![...];`",78,null],[13,"Braces","","The macro statement had braces; e.g. foo! { ... }",78,null],[13,"NoBraces","","The macro statement had parentheses or brackets and no semicolon; e.g.\n`foo!(...)`. All of these will end up being converted into macro\nexpressions.",78,null],[4,"BlockCheckMode","","",null,null],[13,"Default","","",79,null],[13,"Unsafe","","",79,null],[4,"UnsafeSource","","",null,null],[13,"CompilerGenerated","","",80,null],[13,"UserProvided","","",80,null],[4,"RangeLimits","","Limit types of a range (inclusive or exclusive)",null,null],[13,"HalfOpen","","Inclusive at the beginning, exclusive at the end",81,null],[13,"Closed","","Inclusive at the beginning and end",81,null],[4,"ExprKind","","",null,null],[13,"Box","","A `box x` expression.",82,null],[13,"InPlace","","First expr is the place; second expr is the value.",82,null],[13,"Vec","","An array (`[a, b, c, d]`)",82,null],[13,"Call","","A function call",82,null],[13,"MethodCall","","A method call (`x.foo::&lt;Bar, Baz&gt;(a, b, c, d)`)",82,null],[13,"Tup","","A tuple (`(a, b, c ,d)`)",82,null],[13,"Binary","","A binary operation (For example: `a + b`, `a * b`)",82,null],[13,"Unary","","A unary operation (For example: `!x`, `*x`)",82,null],[13,"Lit","","A literal (For example: `1`, `&quot;foo&quot;`)",82,null],[13,"Cast","","A cast (`foo as f64`)",82,null],[13,"Type","","",82,null],[13,"If","","An `if` block, with an optional else block",82,null],[13,"IfLet","","An `if let` expression with an optional else block",82,null],[13,"While","","A while loop, with an optional label",82,null],[13,"WhileLet","","A while-let loop, with an optional label",82,null],[13,"ForLoop","","A for loop, with an optional label",82,null],[13,"Loop","","Conditionless loop (can be exited with break, continue, or return)",82,null],[13,"Match","","A `match` block.",82,null],[13,"Closure","","A closure (for example, `move |a, b, c| {a + b + c}`)",82,null],[13,"Block","","A block (`{ ... }`)",82,null],[13,"Assign","","An assignment (`a = foo()`)",82,null],[13,"AssignOp","","An assignment with an operator",82,null],[13,"Field","","Access of a named struct field (`obj.foo`)",82,null],[13,"TupField","","Access of an unnamed field of a struct or tuple-struct",82,null],[13,"Index","","An indexing operation (`foo[2]`)",82,null],[13,"Range","","A range (`1..2`, `1..`, `..2`, `1...2`, `1...`, `...2`)",82,null],[13,"Path","","Variable reference, possibly containing `::` and/or type\nparameters, e.g. foo::bar::&lt;baz&gt;.",82,null],[13,"AddrOf","","A referencing operation (`&amp;a` or `&amp;mut a`)",82,null],[13,"Break","","A `break`, with an optional label to break",82,null],[13,"Continue","","A `continue`, with an optional label",82,null],[13,"Ret","","A `return`, with an optional value to be returned",82,null],[13,"InlineAsm","","Output of the `asm!()` macro",82,null],[13,"Mac","","A macro invocation; pre-expansion",82,null],[13,"Struct","","A struct literal expression.",82,null],[13,"Repeat","","An array literal constructed from one repeated element.",82,null],[13,"Paren","","No-op: used solely so we can pretty-print faithfully",82,null],[13,"Try","","`expr?`",82,null],[4,"CaptureBy","","A capture clause",null,null],[13,"Value","","",83,null],[13,"Ref","","",83,null],[4,"StrStyle","","",null,null],[13,"Cooked","","A regular string, like `&quot;foo&quot;`",84,null],[13,"Raw","","A raw string, like `r##&quot;foo&quot;##`",84,null],[4,"LitIntType","","",null,null],[13,"Signed","","",85,null],[13,"Unsigned","","",85,null],[13,"Unsuffixed","","",85,null],[4,"LitKind","","Literal kind.",null,null],[13,"Str","","A string literal (`&quot;foo&quot;`)",86,null],[13,"ByteStr","","A byte string (`b&quot;foo&quot;`)",86,null],[13,"Byte","","A byte char (`b&#39;f&#39;`)",86,null],[13,"Char","","A character literal (`&#39;a&#39;`)",86,null],[13,"Int","","An integer literal (`1`)",86,null],[13,"Float","","A float literal (`1f64` or `1E10f64`)",86,null],[13,"FloatUnsuffixed","","A float literal without a suffix (`1.0 or 1.0E10`)",86,null],[13,"Bool","","A boolean literal",86,null],[4,"TraitItemKind","","",null,null],[13,"Const","","",87,null],[13,"Method","","",87,null],[13,"Type","","",87,null],[13,"Macro","","",87,null],[4,"ImplItemKind","","",null,null],[13,"Const","","",88,null],[13,"Method","","",88,null],[13,"Type","","",88,null],[13,"Macro","","",88,null],[4,"IntTy","","",null,null],[13,"Is","","",89,null],[13,"I8","","",89,null],[13,"I16","","",89,null],[13,"I32","","",89,null],[13,"I64","","",89,null],[4,"UintTy","","",null,null],[13,"Us","","",90,null],[13,"U8","","",90,null],[13,"U16","","",90,null],[13,"U32","","",90,null],[13,"U64","","",90,null],[4,"FloatTy","","",null,null],[13,"F32","","",91,null],[13,"F64","","",91,null],[4,"TyKind","","The different kinds of types recognized by the compiler",null,null],[13,"Vec","","A variable-length array (`[T]`)",92,null],[13,"FixedLengthVec","","A fixed length array (`[T; n]`)",92,null],[13,"Ptr","","A raw pointer (`*const T` or `*mut T`)",92,null],[13,"Rptr","","A reference (`&amp;&#39;a T` or `&amp;&#39;a mut T`)",92,null],[13,"BareFn","","A bare function (e.g. `fn(usize) -&gt; bool`)",92,null],[13,"Never","","The never type (`!`)",92,null],[13,"Tup","","A tuple (`(A, B, C, D,...)`)",92,null],[13,"Path","","A path (`module::module::...::Type`), optionally\n&quot;qualified&quot;, e.g. `&lt;Vec&lt;T&gt; as SomeTrait&gt;::SomeType`.",92,null],[13,"ObjectSum","","Something like `A+B`. Note that `B` must always be a path.",92,null],[13,"PolyTraitRef","","A type like `for&lt;&#39;a&gt; Foo&lt;&amp;&#39;a Bar&gt;`",92,null],[13,"ImplTrait","","An `impl TraitA+TraitB` type.",92,null],[13,"Paren","","No-op; kept solely so that we can pretty-print faithfully",92,null],[13,"Typeof","","Unused for now",92,null],[13,"Infer","","TyKind::Infer means the type should be inferred instead of it having been\nspecified. This can appear anywhere in a type.",92,null],[13,"ImplicitSelf","","Inferred type of a `self` or `&amp;self` argument in a method.",92,null],[13,"Mac","","",92,null],[4,"AsmDialect","","Inline assembly dialect.",null,null],[13,"Att","","",93,null],[13,"Intel","","",93,null],[4,"SelfKind","","Alternative representation for `Arg`s describing `self` parameter of methods.",null,null],[13,"Value","","`self`, `mut self`",94,null],[13,"Region","","`&amp;&#39;lt self`, `&amp;&#39;lt mut self`",94,null],[13,"Explicit","","`self: TYPE`, `mut self: TYPE`",94,null],[4,"Unsafety","","",null,null],[13,"Unsafe","","",95,null],[13,"Normal","","",95,null],[4,"Constness","","",null,null],[13,"Const","","",96,null],[13,"NotConst","","",96,null],[4,"Defaultness","","",null,null],[13,"Default","","",97,null],[13,"Final","","",97,null],[4,"ImplPolarity","","",null,null],[13,"Positive","","`impl Trait for Type`",98,null],[13,"Negative","","`impl !Trait for Type`",98,null],[4,"FunctionRetTy","","",null,null],[13,"Default","","Return type is not specified.",99,null],[13,"Ty","","Everything else",99,null],[4,"ViewPath_","","",null,null],[13,"ViewPathSimple","","`foo::bar::baz as quux`",100,null],[13,"ViewPathGlob","","`foo::bar::*`",100,null],[13,"ViewPathList","","`foo::bar::{a,b,c}`",100,null],[4,"AttrStyle","","Distinguishes between Attributes that decorate items and Attributes that\nare contained as statements within items. These two cases need to be\ndistinguished for pretty-printing.",null,null],[13,"Outer","","",101,null],[13,"Inner","","",101,null],[4,"Visibility","","",null,null],[13,"Public","","",102,null],[13,"Crate","","",102,null],[13,"Restricted","","",102,null],[12,"path","syntex_syntax::ast::Visibility","",102,null],[12,"id","","",102,null],[13,"Inherited","syntex_syntax::ast","",102,null],[4,"VariantData","","Fields and Ids of enum variants and structs",null,null],[13,"Struct","","Struct variant.",103,null],[13,"Tuple","","Tuple variant.",103,null],[13,"Unit","","Unit variant.",103,null],[4,"ItemKind","","",null,null],[13,"ExternCrate","","An`extern crate` item, with optional original crate name.",104,null],[13,"Use","","A use declaration (`use` or `pub use`) item.",104,null],[13,"Static","","A static item (`static` or `pub static`).",104,null],[13,"Const","","A constant item (`const` or `pub const`).",104,null],[13,"Fn","","A function declaration (`fn` or `pub fn`).",104,null],[13,"Mod","","A module declaration (`mod` or `pub mod`).",104,null],[13,"ForeignMod","","An external module (`extern` or `pub extern`).",104,null],[13,"Ty","","A type alias (`type` or `pub type`).",104,null],[13,"Enum","","An enum definition (`enum` or `pub enum`).",104,null],[13,"Struct","","A struct definition (`struct` or `pub struct`).",104,null],[13,"Union","","A union definition (`union` or `pub union`).",104,null],[13,"Trait","","A Trait declaration (`trait` or `pub trait`).",104,null],[13,"DefaultImpl","","",104,null],[13,"Impl","","An implementation.",104,null],[13,"Mac","","A macro invocation (which includes macro definition).",104,null],[4,"ForeignItemKind","","An item within an `extern` block",null,null],[13,"Fn","","A foreign function",105,null],[13,"Static","","A foreign static item (`static ext: u8`), with optional mutability\n(the boolean is true when mutable)",105,null],[6,"CrateNum","","",null,null],[6,"NodeId","","",null,null],[6,"TyParamBounds","","",null,null],[6,"CrateConfig","","The set of MetaItems that define the compilation environment of the crate,\nused to drive conditional compilation",null,null],[6,"NestedMetaItem","","A spanned compile-time attribute list item.",null,null],[6,"MetaItem","","A spanned compile-time attribute item.",null,null],[6,"BinOp","","",null,null],[6,"SpannedIdent","","",null,null],[6,"Mac","","",null,null],[6,"Lit","","A literal",null,null],[6,"ExplicitSelf","","",null,null],[6,"Variant","","",null,null],[6,"PathListItem","","",null,null],[6,"ViewPath","","",null,null],[6,"Attribute","","Meta-data associated with an item",null,null],[17,"CRATE_NODE_ID","","Node id used to represent the root of the crate.",null,null],[17,"DUMMY_NODE_ID","","When parsing and doing expansions, we initially give all AST nodes this AST\nnode value. Then later, in the renumber pass, we renumber them to have\nsmall, positive ids.",null,null],[11,"clone","","",17,null],[11,"eq","","",17,null],[11,"ne","","",17,null],[11,"partial_cmp","","",17,null],[11,"lt","","",17,null],[11,"le","","",17,null],[11,"gt","","",17,null],[11,"ge","","",17,null],[11,"cmp","","",17,null],[11,"hash","","",17,null],[11,"clone","","",18,null],[11,"eq","","",18,null],[11,"ne","","",18,null],[11,"hash","","",18,null],[11,"as_str","","",17,null],[11,"fmt","","",17,null],[11,"fmt","","",17,null],[11,"encode","","",17,null],[11,"decode","","",17,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"with_empty_ctxt","","",18,{"inputs":[{"name":"name"}],"output":{"name":"ident"}}],[11,"fmt","","",18,null],[11,"fmt","","",18,null],[11,"encode","","",18,null],[11,"decode","","",18,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"clone","","",19,null],[11,"eq","","",19,null],[11,"ne","","",19,null],[11,"encode","","",19,null],[11,"decode","","",19,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",19,null],[11,"fmt","","",19,null],[11,"clone","","",20,null],[11,"eq","","",20,null],[11,"ne","","",20,null],[11,"encode","","",20,null],[11,"decode","","",20,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",20,null],[11,"fmt","","",20,null],[11,"clone","","",21,null],[11,"eq","","",21,null],[11,"ne","","",21,null],[11,"encode","","",21,null],[11,"decode","","",21,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",21,null],[11,"fmt","","",21,null],[11,"fmt","","",21,null],[11,"from_ident","","",21,{"inputs":[{"name":"span"},{"name":"ident"}],"output":{"name":"path"}}],[11,"clone","","",22,null],[11,"eq","","",22,null],[11,"ne","","",22,null],[11,"encode","","",22,null],[11,"decode","","",22,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",22,null],[11,"fmt","","",22,null],[11,"clone","","",66,null],[11,"eq","","",66,null],[11,"ne","","",66,null],[11,"encode","","",66,null],[11,"decode","","",66,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",66,null],[11,"fmt","","",66,null],[11,"none","","",66,{"inputs":[],"output":{"name":"pathparameters"}}],[11,"is_empty","","",66,null],[11,"has_lifetimes","","",66,null],[11,"has_types","","",66,null],[11,"types","","Returns the types that the user wrote. Note that these do not necessarily map to the type\nparameters in the parenthesized case.",66,null],[11,"lifetimes","","",66,null],[11,"bindings","","",66,null],[11,"clone","","",23,null],[11,"eq","","",23,null],[11,"ne","","",23,null],[11,"encode","","",23,null],[11,"decode","","",23,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",23,null],[11,"fmt","","",23,null],[11,"clone","","",24,null],[11,"eq","","",24,null],[11,"ne","","",24,null],[11,"encode","","",24,null],[11,"decode","","",24,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",24,null],[11,"fmt","","",24,null],[11,"clone","","",67,null],[11,"eq","","",67,null],[11,"ne","","",67,null],[11,"encode","","",67,null],[11,"decode","","",67,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",67,null],[11,"fmt","","",67,null],[11,"clone","","",68,null],[11,"eq","","",68,null],[11,"encode","","",68,null],[11,"decode","","",68,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",68,null],[11,"fmt","","",68,null],[11,"clone","","",25,null],[11,"eq","","",25,null],[11,"ne","","",25,null],[11,"encode","","",25,null],[11,"decode","","",25,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",25,null],[11,"fmt","","",25,null],[11,"clone","","",26,null],[11,"eq","","",26,null],[11,"ne","","",26,null],[11,"encode","","",26,null],[11,"decode","","",26,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",26,null],[11,"fmt","","",26,null],[11,"is_lt_parameterized","","",26,null],[11,"is_type_parameterized","","",26,null],[11,"is_parameterized","","",26,null],[11,"default","","",26,{"inputs":[],"output":{"name":"generics"}}],[11,"clone","","",27,null],[11,"eq","","",27,null],[11,"ne","","",27,null],[11,"encode","","",27,null],[11,"decode","","",27,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",27,null],[11,"fmt","","",27,null],[11,"clone","","",69,null],[11,"eq","","",69,null],[11,"ne","","",69,null],[11,"encode","","",69,null],[11,"decode","","",69,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",69,null],[11,"fmt","","",69,null],[11,"clone","","",28,null],[11,"eq","","",28,null],[11,"ne","","",28,null],[11,"encode","","",28,null],[11,"decode","","",28,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",28,null],[11,"fmt","","",28,null],[11,"clone","","",29,null],[11,"eq","","",29,null],[11,"ne","","",29,null],[11,"encode","","",29,null],[11,"decode","","",29,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",29,null],[11,"fmt","","",29,null],[11,"clone","","",30,null],[11,"eq","","",30,null],[11,"ne","","",30,null],[11,"encode","","",30,null],[11,"decode","","",30,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",30,null],[11,"fmt","","",30,null],[11,"clone","","",31,null],[11,"eq","","",31,null],[11,"ne","","",31,null],[11,"encode","","",31,null],[11,"decode","","",31,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",31,null],[11,"fmt","","",31,null],[11,"clone","","",70,null],[11,"encode","","",70,null],[11,"decode","","",70,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",70,null],[11,"fmt","","",70,null],[11,"eq","","",70,null],[11,"ne","","",70,null],[11,"clone","","",71,null],[11,"encode","","",71,null],[11,"decode","","",71,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",71,null],[11,"fmt","","",71,null],[11,"eq","","",71,null],[11,"clone","","",32,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"encode","","",32,null],[11,"decode","","",32,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",32,null],[11,"fmt","","",32,null],[11,"clone","","",33,null],[11,"eq","","",33,null],[11,"ne","","",33,null],[11,"encode","","",33,null],[11,"decode","","",33,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",33,null],[11,"fmt","","",33,null],[11,"walk","","",33,null],[11,"clone","","",34,null],[11,"eq","","",34,null],[11,"ne","","",34,null],[11,"encode","","",34,null],[11,"decode","","",34,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",34,null],[11,"fmt","","",34,null],[11,"clone","","",72,null],[11,"eq","","",72,null],[11,"ne","","",72,null],[11,"encode","","",72,null],[11,"decode","","",72,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",72,null],[11,"fmt","","",72,null],[11,"clone","","",73,null],[11,"eq","","",73,null],[11,"ne","","",73,null],[11,"encode","","",73,null],[11,"decode","","",73,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",73,null],[11,"fmt","","",73,null],[11,"clone","","",74,null],[11,"eq","","",74,null],[11,"encode","","",74,null],[11,"decode","","",74,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",74,null],[11,"fmt","","",74,null],[11,"clone","","",75,null],[11,"eq","","",75,null],[11,"encode","","",75,null],[11,"decode","","",75,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",75,null],[11,"fmt","","",75,null],[11,"to_string","","",75,null],[11,"lazy","","",75,null],[11,"is_shift","","",75,null],[11,"is_comparison","","",75,null],[11,"is_by_value","","Returns `true` if the binary operator takes its arguments by value",75,null],[11,"clone","","",76,null],[11,"eq","","",76,null],[11,"encode","","",76,null],[11,"decode","","",76,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",76,null],[11,"fmt","","",76,null],[11,"is_by_value","","Returns `true` if the unary operator takes its argument by value",76,{"inputs":[{"name":"unop"}],"output":{"name":"bool"}}],[11,"to_string","","",76,{"inputs":[{"name":"unop"}],"output":{"name":"str"}}],[11,"clone","","",35,null],[11,"eq","","",35,null],[11,"ne","","",35,null],[11,"encode","","",35,null],[11,"decode","","",35,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",35,null],[11,"add_trailing_semicolon","","",35,null],[11,"fmt","","",35,null],[11,"clone","","",77,null],[11,"eq","","",77,null],[11,"ne","","",77,null],[11,"encode","","",77,null],[11,"decode","","",77,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",77,null],[11,"clone","","",78,null],[11,"eq","","",78,null],[11,"encode","","",78,null],[11,"decode","","",78,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",78,null],[11,"fmt","","",78,null],[11,"clone","","",36,null],[11,"eq","","",36,null],[11,"ne","","",36,null],[11,"encode","","",36,null],[11,"decode","","",36,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",36,null],[11,"fmt","","",36,null],[11,"clone","","",37,null],[11,"eq","","",37,null],[11,"ne","","",37,null],[11,"encode","","",37,null],[11,"decode","","",37,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",37,null],[11,"fmt","","",37,null],[11,"clone","","",38,null],[11,"eq","","",38,null],[11,"ne","","",38,null],[11,"encode","","",38,null],[11,"decode","","",38,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",38,null],[11,"fmt","","",38,null],[11,"clone","","",79,null],[11,"eq","","",79,null],[11,"ne","","",79,null],[11,"encode","","",79,null],[11,"decode","","",79,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",79,null],[11,"fmt","","",79,null],[11,"clone","","",80,null],[11,"eq","","",80,null],[11,"encode","","",80,null],[11,"decode","","",80,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",80,null],[11,"fmt","","",80,null],[11,"clone","","",39,null],[11,"eq","","",39,null],[11,"ne","","",39,null],[11,"encode","","",39,null],[11,"decode","","",39,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",39,null],[11,"fmt","","",39,null],[11,"clone","","",81,null],[11,"eq","","",81,null],[11,"encode","","",81,null],[11,"decode","","",81,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",81,null],[11,"fmt","","",81,null],[11,"clone","","",82,null],[11,"eq","","",82,null],[11,"ne","","",82,null],[11,"encode","","",82,null],[11,"decode","","",82,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",82,null],[11,"fmt","","",82,null],[11,"clone","","",40,null],[11,"eq","","",40,null],[11,"ne","","",40,null],[11,"encode","","",40,null],[11,"decode","","",40,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",40,null],[11,"fmt","","",40,null],[11,"clone","","",83,null],[11,"eq","","",83,null],[11,"encode","","",83,null],[11,"decode","","",83,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",83,null],[11,"fmt","","",83,null],[11,"clone","","",41,null],[11,"eq","","",41,null],[11,"ne","","",41,null],[11,"encode","","",41,null],[11,"decode","","",41,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",41,null],[11,"fmt","","",41,null],[11,"clone","","",84,null],[11,"eq","","",84,null],[11,"ne","","",84,null],[11,"encode","","",84,null],[11,"decode","","",84,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",84,null],[11,"fmt","","",84,null],[11,"clone","","",85,null],[11,"eq","","",85,null],[11,"ne","","",85,null],[11,"encode","","",85,null],[11,"decode","","",85,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",85,null],[11,"fmt","","",85,null],[11,"clone","","",86,null],[11,"eq","","",86,null],[11,"ne","","",86,null],[11,"encode","","",86,null],[11,"decode","","",86,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",86,null],[11,"fmt","","",86,null],[11,"is_str","","Returns true if this literal is a string and false otherwise.",86,null],[11,"is_unsuffixed","","Returns true if this literal has no suffix. Note: this will return true\nfor literals with prefixes such as raw strings and byte strings.",86,null],[11,"is_suffixed","","Returns true if this literal has a suffix.",86,null],[11,"clone","","",42,null],[11,"eq","","",42,null],[11,"ne","","",42,null],[11,"encode","","",42,null],[11,"decode","","",42,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",42,null],[11,"fmt","","",42,null],[11,"clone","","",43,null],[11,"eq","","",43,null],[11,"ne","","",43,null],[11,"encode","","",43,null],[11,"decode","","",43,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",43,null],[11,"fmt","","",43,null],[11,"clone","","",44,null],[11,"eq","","",44,null],[11,"ne","","",44,null],[11,"encode","","",44,null],[11,"decode","","",44,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",44,null],[11,"fmt","","",44,null],[11,"clone","","",87,null],[11,"eq","","",87,null],[11,"ne","","",87,null],[11,"encode","","",87,null],[11,"decode","","",87,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",87,null],[11,"fmt","","",87,null],[11,"clone","","",45,null],[11,"eq","","",45,null],[11,"ne","","",45,null],[11,"encode","","",45,null],[11,"decode","","",45,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",45,null],[11,"fmt","","",45,null],[11,"clone","","",88,null],[11,"eq","","",88,null],[11,"ne","","",88,null],[11,"encode","","",88,null],[11,"decode","","",88,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",88,null],[11,"fmt","","",88,null],[11,"clone","","",89,null],[11,"eq","","",89,null],[11,"encode","","",89,null],[11,"decode","","",89,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",89,null],[11,"fmt","","",89,null],[11,"fmt","","",89,null],[11,"ty_to_string","","",89,null],[11,"val_to_string","","",89,null],[11,"ty_max","","",89,null],[11,"bit_width","","",89,null],[11,"clone","","",90,null],[11,"eq","","",90,null],[11,"encode","","",90,null],[11,"decode","","",90,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",90,null],[11,"ty_to_string","","",90,null],[11,"val_to_string","","",90,null],[11,"ty_max","","",90,null],[11,"bit_width","","",90,null],[11,"fmt","","",90,null],[11,"fmt","","",90,null],[11,"clone","","",91,null],[11,"eq","","",91,null],[11,"encode","","",91,null],[11,"decode","","",91,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",91,null],[11,"fmt","","",91,null],[11,"fmt","","",91,null],[11,"ty_to_string","","",91,null],[11,"bit_width","","",91,null],[11,"clone","","",46,null],[11,"eq","","",46,null],[11,"ne","","",46,null],[11,"encode","","",46,null],[11,"decode","","",46,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",46,null],[11,"fmt","","",46,null],[11,"clone","","",47,null],[11,"eq","","",47,null],[11,"ne","","",47,null],[11,"encode","","",47,null],[11,"decode","","",47,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",47,null],[11,"fmt","","",47,null],[11,"clone","","",48,null],[11,"eq","","",48,null],[11,"ne","","",48,null],[11,"encode","","",48,null],[11,"decode","","",48,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",48,null],[11,"fmt","","",48,null],[11,"clone","","",92,null],[11,"eq","","",92,null],[11,"ne","","",92,null],[11,"encode","","",92,null],[11,"decode","","",92,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",92,null],[11,"fmt","","",92,null],[11,"clone","","",93,null],[11,"eq","","",93,null],[11,"encode","","",93,null],[11,"decode","","",93,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",93,null],[11,"fmt","","",93,null],[11,"clone","","",49,null],[11,"eq","","",49,null],[11,"ne","","",49,null],[11,"encode","","",49,null],[11,"decode","","",49,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",49,null],[11,"fmt","","",49,null],[11,"clone","","",50,null],[11,"eq","","",50,null],[11,"ne","","",50,null],[11,"encode","","",50,null],[11,"decode","","",50,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",50,null],[11,"fmt","","",50,null],[11,"clone","","",51,null],[11,"eq","","",51,null],[11,"ne","","",51,null],[11,"encode","","",51,null],[11,"decode","","",51,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",51,null],[11,"fmt","","",51,null],[11,"clone","","",94,null],[11,"eq","","",94,null],[11,"ne","","",94,null],[11,"encode","","",94,null],[11,"decode","","",94,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",94,null],[11,"fmt","","",94,null],[11,"to_self","","",51,null],[11,"is_self","","",51,null],[11,"from_self","","",51,{"inputs":[{"name":"explicitself"},{"name":"spannedident"}],"output":{"name":"arg"}}],[11,"clone","","",52,null],[11,"eq","","",52,null],[11,"ne","","",52,null],[11,"encode","","",52,null],[11,"decode","","",52,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",52,null],[11,"fmt","","",52,null],[11,"get_self","","",52,null],[11,"has_self","","",52,null],[11,"clone","","",95,null],[11,"eq","","",95,null],[11,"encode","","",95,null],[11,"decode","","",95,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",95,null],[11,"fmt","","",95,null],[11,"clone","","",96,null],[11,"eq","","",96,null],[11,"encode","","",96,null],[11,"decode","","",96,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",96,null],[11,"fmt","","",96,null],[11,"clone","","",97,null],[11,"eq","","",97,null],[11,"encode","","",97,null],[11,"decode","","",97,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",97,null],[11,"fmt","","",97,null],[11,"fmt","","",95,null],[11,"clone","","",98,null],[11,"eq","","",98,null],[11,"encode","","",98,null],[11,"decode","","",98,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",98,null],[11,"fmt","","",98,null],[11,"clone","","",99,null],[11,"eq","","",99,null],[11,"ne","","",99,null],[11,"encode","","",99,null],[11,"decode","","",99,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",99,null],[11,"fmt","","",99,null],[11,"span","","",99,null],[11,"clone","","",53,null],[11,"eq","","",53,null],[11,"ne","","",53,null],[11,"encode","","",53,null],[11,"decode","","",53,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",53,null],[11,"fmt","","",53,null],[11,"clone","","",54,null],[11,"eq","","",54,null],[11,"ne","","",54,null],[11,"encode","","",54,null],[11,"decode","","",54,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",54,null],[11,"fmt","","",54,null],[11,"clone","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"encode","","",55,null],[11,"decode","","",55,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",55,null],[11,"fmt","","",55,null],[11,"clone","","",56,null],[11,"eq","","",56,null],[11,"ne","","",56,null],[11,"encode","","",56,null],[11,"decode","","",56,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",56,null],[11,"fmt","","",56,null],[11,"clone","","",57,null],[11,"eq","","",57,null],[11,"ne","","",57,null],[11,"encode","","",57,null],[11,"decode","","",57,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",57,null],[11,"fmt","","",57,null],[11,"clone","","",100,null],[11,"eq","","",100,null],[11,"ne","","",100,null],[11,"encode","","",100,null],[11,"decode","","",100,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",100,null],[11,"fmt","","",100,null],[11,"path","","",100,null],[11,"clone","","",101,null],[11,"eq","","",101,null],[11,"encode","","",101,null],[11,"decode","","",101,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",101,null],[11,"fmt","","",101,null],[11,"clone","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"encode","","",58,null],[11,"decode","","",58,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",58,null],[11,"fmt","","",58,null],[11,"clone","","",59,null],[11,"eq","","",59,null],[11,"ne","","",59,null],[11,"encode","","",59,null],[11,"decode","","",59,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",59,null],[11,"fmt","","",59,null],[11,"clone","","",60,null],[11,"eq","","",60,null],[11,"ne","","",60,null],[11,"encode","","",60,null],[11,"decode","","",60,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",60,null],[11,"fmt","","",60,null],[11,"clone","","",61,null],[11,"eq","","",61,null],[11,"ne","","",61,null],[11,"encode","","",61,null],[11,"decode","","",61,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",61,null],[11,"fmt","","",61,null],[11,"clone","","",102,null],[11,"eq","","",102,null],[11,"ne","","",102,null],[11,"encode","","",102,null],[11,"decode","","",102,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",102,null],[11,"fmt","","",102,null],[11,"clone","","",62,null],[11,"eq","","",62,null],[11,"ne","","",62,null],[11,"encode","","",62,null],[11,"decode","","",62,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",62,null],[11,"fmt","","",62,null],[11,"clone","","",103,null],[11,"eq","","",103,null],[11,"ne","","",103,null],[11,"encode","","",103,null],[11,"decode","","",103,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",103,null],[11,"fmt","","",103,null],[11,"fields","","",103,null],[11,"id","","",103,null],[11,"is_struct","","",103,null],[11,"is_tuple","","",103,null],[11,"is_unit","","",103,null],[11,"clone","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"encode","","",63,null],[11,"decode","","",63,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",63,null],[11,"fmt","","",63,null],[11,"clone","","",104,null],[11,"eq","","",104,null],[11,"ne","","",104,null],[11,"encode","","",104,null],[11,"decode","","",104,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",104,null],[11,"fmt","","",104,null],[11,"descriptive_variant","","",104,null],[11,"clone","","",64,null],[11,"eq","","",64,null],[11,"ne","","",64,null],[11,"encode","","",64,null],[11,"decode","","",64,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",64,null],[11,"fmt","","",64,null],[11,"clone","","",105,null],[11,"eq","","",105,null],[11,"ne","","",105,null],[11,"encode","","",105,null],[11,"decode","","",105,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",105,null],[11,"fmt","","",105,null],[11,"descriptive_variant","","",105,null],[11,"clone","","",65,null],[11,"eq","","",65,null],[11,"ne","","",65,null],[11,"encode","","",65,null],[11,"decode","","",65,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",65,null],[11,"fmt","","",65,null],[0,"attr","syntex_syntax","",null,null],[3,"Stability","syntex_syntax::attr","Represents the #[stable], #[unstable] and #[rustc_deprecated] attributes.",null,null],[12,"level","","",106,null],[12,"feature","","",106,null],[12,"rustc_depr","","",106,null],[3,"RustcDeprecation","","",null,null],[12,"since","","",107,null],[12,"reason","","",107,null],[3,"Deprecation","","",null,null],[12,"since","","",108,null],[12,"note","","",108,null],[4,"InlineAttr","","",null,null],[13,"None","","",109,null],[13,"Hint","","",109,null],[13,"Always","","",109,null],[13,"Never","","",109,null],[4,"StabilityLevel","","The available stability levels.",null,null],[13,"Unstable","","",110,null],[12,"reason","syntex_syntax::attr::StabilityLevel","",110,null],[12,"issue","","",110,null],[13,"Stable","syntex_syntax::attr","",110,null],[12,"since","syntex_syntax::attr::StabilityLevel","",110,null],[4,"ReprAttr","syntex_syntax::attr","",null,null],[13,"ReprAny","","",111,null],[13,"ReprInt","","",111,null],[13,"ReprExtern","","",111,null],[13,"ReprPacked","","",111,null],[13,"ReprSimd","","",111,null],[4,"IntType","","",null,null],[13,"SignedInt","","",112,null],[13,"UnsignedInt","","",112,null],[5,"mark_used","","",null,{"inputs":[{"name":"attribute"}],"output":null}],[5,"is_used","","",null,{"inputs":[{"name":"attribute"}],"output":{"name":"bool"}}],[5,"mk_name_value_item_str","","",null,{"inputs":[{"name":"internedstring"},{"name":"internedstring"}],"output":{"name":"p"}}],[5,"mk_name_value_item","","",null,{"inputs":[{"name":"internedstring"},{"name":"lit"}],"output":{"name":"p"}}],[5,"mk_list_item","","",null,{"inputs":[{"name":"internedstring"},{"name":"vec"}],"output":{"name":"p"}}],[5,"mk_list_word_item","","",null,{"inputs":[{"name":"internedstring"}],"output":{"name":"nestedmetaitem"}}],[5,"mk_word_item","","",null,{"inputs":[{"name":"internedstring"}],"output":{"name":"p"}}],[5,"mk_spanned_name_value_item","","",null,{"inputs":[{"name":"span"},{"name":"internedstring"},{"name":"lit"}],"output":{"name":"p"}}],[5,"mk_spanned_list_item","","",null,{"inputs":[{"name":"span"},{"name":"internedstring"},{"name":"vec"}],"output":{"name":"p"}}],[5,"mk_spanned_word_item","","",null,{"inputs":[{"name":"span"},{"name":"internedstring"}],"output":{"name":"p"}}],[5,"mk_attr_id","","",null,{"inputs":[],"output":{"name":"attrid"}}],[5,"mk_attr_inner","","Returns an inner attribute with the given value.",null,{"inputs":[{"name":"attrid"},{"name":"p"}],"output":{"name":"attribute"}}],[5,"mk_spanned_attr_inner","","Returns an innter attribute with the given value and span.",null,{"inputs":[{"name":"span"},{"name":"attrid"},{"name":"p"}],"output":{"name":"attribute"}}],[5,"mk_attr_outer","","Returns an outer attribute with the given value.",null,{"inputs":[{"name":"attrid"},{"name":"p"}],"output":{"name":"attribute"}}],[5,"mk_spanned_attr_outer","","Returns an outer attribute with the given value and span.",null,{"inputs":[{"name":"span"},{"name":"attrid"},{"name":"p"}],"output":{"name":"attribute"}}],[5,"mk_doc_attr_outer","","",null,{"inputs":[{"name":"attrid"},{"name":"p"},{"name":"bool"}],"output":{"name":"attribute"}}],[5,"mk_sugared_doc_attr","","",null,{"inputs":[{"name":"attrid"},{"name":"internedstring"},{"name":"bytepos"},{"name":"bytepos"}],"output":{"name":"attribute"}}],[5,"contains","","Check if `needle` occurs in `haystack` by a structural\ncomparison. This is slightly subtle, and relies on ignoring the\nspan included in the `==` comparison a plain MetaItem.",null,null],[5,"list_contains_name","","",null,null],[5,"contains_name","","",null,null],[5,"first_attr_value_str_by_name","","",null,null],[5,"last_meta_item_value_str_by_name","","",null,null],[5,"find_crate_name","","",null,null],[5,"find_export_name_attr","","Find the value of #[export_name=*] attribute and check its validity.",null,null],[5,"contains_extern_indicator","","",null,null],[5,"find_inline_attr","","Determine what `#[inline]` attribute is present in `attrs`, if any.",null,null],[5,"requests_inline","","True if `#[inline]` or `#[inline(always)]` is present in `attrs`.",null,null],[5,"cfg_matches","","Tests if a cfg-pattern matches the cfg set",null,null],[5,"find_stability","","Find the first stability attribute. `None` if none exists.",null,null],[5,"find_deprecation","","Find the deprecation attribute. `None` if none exists.",null,null],[5,"require_unique_names","","",null,null],[5,"find_repr_attrs","","Parse #[repr(...)] forms.",null,{"inputs":[{"name":"handler"},{"name":"attribute"}],"output":{"name":"vec"}}],[8,"HasAttrs","","",null,null],[10,"attrs","","",113,null],[10,"map_attrs","","",113,null],[11,"meta_item","","Returns the MetaItem if self is a NestedMetaItemKind::MetaItem.",114,null],[11,"literal","","Returns the Lit if self is a NestedMetaItemKind::Literal.",114,null],[11,"span","","Returns the Span for `self`.",114,null],[11,"check_name","","Returns true if this list item is a MetaItem with a name of `name`.",114,null],[11,"name","","Returns the name of the meta item, e.g. `foo` in `#[foo]`,\n`#[foo=&quot;bar&quot;]` and `#[foo(bar)]`, if self is a MetaItem",114,null],[11,"value_str","","Gets the string value if self is a MetaItem and the MetaItem is a\nMetaItemKind::NameValue variant containing a string, otherwise None.",114,null],[11,"word","","Returns a MetaItem if self is a MetaItem with Kind Word.",114,null],[11,"meta_item_list","","Gets a list of inner meta items from a list MetaItem type.",114,null],[11,"is_meta_item","","Returns `true` if the variant is MetaItem.",114,null],[11,"is_literal","","Returns `true` if the variant is Literal.",114,null],[11,"is_word","","Returns `true` if self is a MetaItem and the meta item is a word.",114,null],[11,"is_value_str","","Returns `true` if self is a MetaItem and the meta item is a ValueString.",114,null],[11,"is_meta_item_list","","Returns `true` if self is a MetaItem and the meta item is a list.",114,null],[11,"check_name","","",115,null],[11,"name","","",115,null],[11,"value_str","","",115,null],[11,"meta_item_list","","",115,null],[11,"is_word","","",115,null],[11,"span","","",115,null],[11,"is_meta_item_list","","",115,null],[11,"is_value_str","","Indicates if the attribute is a Value String.",115,null],[11,"name","","",116,null],[11,"value_str","","",116,null],[11,"meta_item_list","","",116,null],[11,"is_word","","",116,null],[11,"span","","",116,null],[11,"check_name","","",116,null],[11,"is_value_str","","",116,null],[11,"is_meta_item_list","","",116,null],[11,"meta","","Extract the MetaItem from inside this Attribute.",115,null],[11,"with_desugared_doc","","Convert self to a normal #[doc=&quot;foo&quot;] comment, if it is a\ncomment like `///` or `/** */`. (Returns self unchanged for\nnon-sugared doc attributes.)",115,null],[11,"clone","","",109,null],[11,"eq","","",109,null],[11,"encode","","",106,null],[11,"decode","","",106,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",106,null],[11,"fmt","","",106,null],[11,"eq","","",106,null],[11,"ne","","",106,null],[11,"hash","","",106,null],[11,"encode","","",110,null],[11,"decode","","",110,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",110,null],[11,"ne","","",110,null],[11,"partial_cmp","","",110,null],[11,"lt","","",110,null],[11,"le","","",110,null],[11,"gt","","",110,null],[11,"ge","","",110,null],[11,"clone","","",110,null],[11,"fmt","","",110,null],[11,"hash","","",110,null],[11,"encode","","",107,null],[11,"decode","","",107,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",107,null],[11,"ne","","",107,null],[11,"partial_cmp","","",107,null],[11,"lt","","",107,null],[11,"le","","",107,null],[11,"gt","","",107,null],[11,"ge","","",107,null],[11,"clone","","",107,null],[11,"fmt","","",107,null],[11,"hash","","",107,null],[11,"encode","","",108,null],[11,"decode","","",108,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",108,null],[11,"ne","","",108,null],[11,"partial_cmp","","",108,null],[11,"lt","","",108,null],[11,"le","","",108,null],[11,"gt","","",108,null],[11,"ge","","",108,null],[11,"clone","","",108,null],[11,"fmt","","",108,null],[11,"hash","","",108,null],[11,"is_unstable","","",110,null],[11,"is_stable","","",110,null],[11,"eq","","",111,null],[11,"ne","","",111,null],[11,"fmt","","",111,null],[11,"encode","","",111,null],[11,"decode","","",111,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",111,null],[11,"is_ffi_safe","","",111,null],[11,"hash","","",112,null],[11,"eq","","",112,null],[11,"ne","","",112,null],[11,"fmt","","",112,null],[11,"encode","","",112,null],[11,"decode","","",112,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",112,null],[11,"is_signed","","",112,null],[11,"attrs","syntex_syntax::util","",10,null],[11,"map_attrs","","",10,null],[11,"attrs","syntex_syntax::ast","",77,null],[11,"map_attrs","","",77,null],[11,"attrs","","",63,null],[11,"map_attrs","","",63,null],[11,"attrs","","",39,null],[11,"map_attrs","","",39,null],[11,"attrs","","",36,null],[11,"map_attrs","","",36,null],[11,"attrs","","",64,null],[11,"map_attrs","","",64,null],[11,"attrs","","",62,null],[11,"map_attrs","","",62,null],[11,"attrs","","",45,null],[11,"map_attrs","","",45,null],[11,"attrs","","",44,null],[11,"map_attrs","","",44,null],[11,"attrs","","",37,null],[11,"map_attrs","","",37,null],[11,"attrs","","",35,null],[11,"map_attrs","","",35,null],[11,"attrs","syntex_syntax::attr","",117,null],[11,"map_attrs","","",117,null],[0,"codemap","syntex_syntax","The CodeMap tracks all the source code used within a single crate, mapping\nfrom integer byte positions to the original source code location. Each bit\nof source parsed during crate parsing (typically files, in-memory strings,\nor various bits of macro expansion) cover a continuous range of bytes in the\nCodeMap and are represented by FileMaps. Byte positions are stored in\n`spans` and used pervasively in the compiler. They are absolute positions\nwithin the CodeMap, which upon request can be converted to line and column\ninformation, source code snippets, etc.",null,null],[3,"Spanned","syntex_syntax::codemap","",null,null],[12,"node","","",118,null],[12,"span","","",118,null],[3,"NameAndSpan","","",null,null],[12,"format","","The format with which the macro was invoked.",119,null],[12,"allow_internal_unstable","","Whether the macro is allowed to use #[unstable]/feature-gated\nfeatures internally without forcing the whole crate to opt-in\nto them.",119,null],[12,"span","","The span of the macro definition itself. The macro may not\nhave a sensible definition span (e.g. something defined\ncompletely inside libsyntax) in which case this is None.",119,null],[3,"ExpnInfo","","Extra information for tracking spans of macro and syntax sugar expansion",null,null],[12,"call_site","","The location of the actual macro invocation or syntax sugar , e.g.\n`let x = foo!();` or `if let Some(y) = x {}`",120,null],[12,"callee","","Information about the expansion.",120,null],[3,"RealFileLoader","","A FileLoader that uses std::fs to load real files.",null,null],[3,"CodeMap","","",null,null],[12,"files","","",121,null],[4,"ExpnFormat","","The source of expansion.",null,null],[13,"MacroAttribute","","e.g. #[derive(...)] &lt;item&gt;",122,null],[13,"MacroBang","","e.g. `format!()`",122,null],[5,"original_sp","","Return the span itself if it doesn&#39;t come from a macro expansion,\notherwise return the call site span up to the `enclosing_sp` by\nfollowing the `expn_info` chain.",null,{"inputs":[{"name":"codemap"},{"name":"span"},{"name":"span"}],"output":{"name":"span"}}],[5,"spanned","","",null,{"inputs":[{"name":"bytepos"},{"name":"bytepos"},{"name":"t"}],"output":{"name":"spanned"}}],[5,"respan","","",null,{"inputs":[{"name":"span"},{"name":"t"}],"output":{"name":"spanned"}}],[5,"dummy_spanned","","",null,{"inputs":[{"name":"t"}],"output":{"name":"spanned"}}],[5,"combine_spans","","Build a span that covers the two provided spans.",null,{"inputs":[{"name":"span"},{"name":"span"}],"output":{"name":"span"}}],[8,"FileLoader","","An abstraction over the fs operations used by the Parser.",null,null],[10,"file_exists","","Query the existence of a file.",123,null],[10,"abs_path","","Return an absolute path to a file, if possible.",123,null],[10,"read_file","","Read the contents of an UTF-8 file into memory.",123,null],[11,"clone","","",122,null],[11,"hash","","",122,null],[11,"fmt","","",122,null],[11,"eq","","",122,null],[11,"ne","","",122,null],[11,"clone","","",118,null],[11,"eq","","",118,null],[11,"ne","","",118,null],[11,"encode","","",118,null],[11,"decode","","",118,{"inputs":[{"name":"__dt"}],"output":{"name":"result"}}],[11,"hash","","",118,null],[11,"fmt","","",118,null],[11,"clone","","",119,null],[11,"hash","","",119,null],[11,"fmt","","",119,null],[11,"name","","",119,null],[11,"hash","","",120,null],[11,"fmt","","",120,null],[11,"file_exists","","",124,null],[11,"abs_path","","",124,null],[11,"read_file","","",124,null],[11,"new","","",121,{"inputs":[],"output":{"name":"codemap"}}],[11,"with_file_loader","","",121,{"inputs":[{"name":"box"}],"output":{"name":"codemap"}}],[11,"file_exists","","",121,null],[11,"load_file","","",121,null],[11,"new_filemap","","Creates a new filemap without setting its line information. If you don&#39;t\nintend to set the line information yourself, you should use new_filemap_and_lines.",121,null],[11,"new_filemap_and_lines","","Creates a new filemap and sets its line information.",121,null],[11,"new_imported_filemap","","Allocates a new FileMap representing a source file from an external\ncrate. The source code of such an &quot;imported filemap&quot; is not available,\nbut we still know enough to generate accurate debuginfo location\ninformation for things inlined from other crates.",121,null],[11,"mk_substr_filename","","",121,null],[11,"lookup_char_pos","","Lookup source information about a BytePos",121,null],[11,"lookup_char_pos_adj","","",121,null],[11,"span_to_string","","",121,null],[11,"span_to_expanded_string","","Returns a formatted string showing the expansion chain of a span",121,null],[11,"source_callsite","","Return the source span - this is either the supplied span, or the span for\nthe macro callsite that expanded to it.",121,null],[11,"source_callee","","Return the source callee.",121,null],[11,"span_to_filename","","",121,null],[11,"span_to_lines","","",121,null],[11,"span_to_snippet","","",121,null],[11,"get_filemap","","",121,null],[11,"lookup_byte_offset","","For a global BytePos compute the local offset within the containing FileMap",121,null],[11,"bytepos_to_file_charpos","","Converts an absolute BytePos to a CharPos relative to the filemap.",121,null],[11,"record_expansion","","",121,null],[11,"with_expn_info","","",121,null],[11,"span_allows_unstable","","Check if a span is &quot;internal&quot; to a macro in which #[unstable]\nitems can be used (that is, a macro marked with\n`#[allow_internal_unstable]`).",121,null],[11,"count_lines","","",121,null],[11,"macro_backtrace","","",121,null],[11,"lookup_char_pos","","",121,null],[11,"span_to_lines","","",121,null],[11,"span_to_string","","",121,null],[11,"span_to_filename","","",121,null],[11,"macro_backtrace","","",121,null],[0,"config","syntex_syntax","",null,null],[3,"StripUnconfigured","syntex_syntax::config","A folder that strips out items that do not belong in the current configuration.",null,null],[12,"config","","",125,null],[12,"should_test","","",125,null],[12,"sess","","",125,null],[12,"features","","",125,null],[5,"strip_unconfigured_items","","",null,null],[11,"process_cfg_attrs","","",125,null],[11,"fold_foreign_mod","","",125,null],[11,"fold_item_kind","","",125,null],[11,"fold_expr","","",125,null],[11,"fold_opt_expr","","",125,null],[11,"fold_stmt","","",125,null],[11,"fold_mac","","",125,null],[11,"fold_item","","",125,null],[11,"fold_impl_item","","",125,null],[11,"fold_trait_item","","",125,null],[11,"fold_interpolated","","",125,null],[0,"entry","syntex_syntax","",null,null],[4,"EntryPointType","syntex_syntax::entry","",null,null],[13,"None","","",126,null],[13,"MainNamed","","",126,null],[13,"MainAttr","","",126,null],[13,"Start","","",126,null],[13,"OtherMain","","",126,null],[5,"entry_point_type","","",null,{"inputs":[{"name":"item"},{"name":"usize"}],"output":{"name":"entrypointtype"}}],[0,"feature_gate","syntex_syntax","Feature gating",null,null],[3,"Features","syntex_syntax::feature_gate","A set of features to be used by later passes.",null,null],[12,"declared_stable_lang_features","","#![feature] attrs for stable language features, for error reporting",127,null],[12,"declared_lib_features","","#![feature] attrs for non-language (library) features",127,null],[12,"asm","","",127,null],[12,"concat_idents","","",127,null],[12,"link_args","","",127,null],[12,"log_syntax","","",127,null],[12,"non_ascii_idents","","",127,null],[12,"plugin_registrar","","",127,null],[12,"thread_local","","",127,null],[12,"trace_macros","","",127,null],[12,"intrinsics","","",127,null],[12,"lang_items","","",127,null],[12,"link_llvm_intrinsics","","",127,null],[12,"linkage","","",127,null],[12,"quote","","",127,null],[12,"simd","","",127,null],[12,"rustc_diagnostic_macros","","",127,null],[12,"advanced_slice_patterns","","",127,null],[12,"box_syntax","","",127,null],[12,"placement_in_syntax","","",127,null],[12,"reflect","","",127,null],[12,"unboxed_closures","","",127,null],[12,"pushpop_unsafe","","",127,null],[12,"allocator","","",127,null],[12,"fundamental","","",127,null],[12,"linked_from","","",127,null],[12,"main","","",127,null],[12,"needs_allocator","","",127,null],[12,"on_unimplemented","","",127,null],[12,"plugin","","",127,null],[12,"simd_ffi","","",127,null],[12,"start","","",127,null],[12,"structural_match","","",127,null],[12,"panic_runtime","","",127,null],[12,"needs_panic_runtime","","",127,null],[12,"optin_builtin_traits","","",127,null],[12,"macro_reexport","","",127,null],[12,"staged_api","","",127,null],[12,"unmarked_api","","",127,null],[12,"no_core","","",127,null],[12,"box_patterns","","",127,null],[12,"dropck_parametricity","","",127,null],[12,"custom_attribute","","",127,null],[12,"custom_derive","","",127,null],[12,"rustc_attrs","","",127,null],[12,"allow_internal_unstable","","",127,null],[12,"slice_patterns","","",127,null],[12,"associated_consts","","",127,null],[12,"const_fn","","",127,null],[12,"const_indexing","","",127,null],[12,"prelude_import","","",127,null],[12,"static_recursion","","",127,null],[12,"default_type_parameter_fallback","","",127,null],[12,"associated_type_defaults","","",127,null],[12,"repr_simd","","",127,null],[12,"cfg_target_feature","","",127,null],[12,"platform_intrinsics","","",127,null],[12,"unwind_attributes","","",127,null],[12,"naked_functions","","",127,null],[12,"no_debug","","",127,null],[12,"omit_gdb_pretty_printer_section","","",127,null],[12,"cfg_target_vendor","","",127,null],[12,"stmt_expr_attributes","","",127,null],[12,"type_ascription","","",127,null],[12,"cfg_target_thread_local","","",127,null],[12,"abi_vectorcall","","",127,null],[12,"inclusive_range_syntax","","",127,null],[12,"question_mark","","",127,null],[12,"specialization","","",127,null],[12,"pub_restricted","","",127,null],[12,"drop_types_in_const","","",127,null],[12,"cfg_target_has_atomic","","",127,null],[12,"dotdot_in_tuple_patterns","","",127,null],[12,"conservative_impl_trait","","",127,null],[12,"relaxed_adts","","",127,null],[12,"never_type","","",127,null],[12,"attr_literals","","",127,null],[3,"GatedCfg","","",null,null],[4,"AttributeType","","",null,null],[13,"Normal","","Normal, builtin attribute that is consumed\nby the compiler before the unused_attribute check",128,null],[13,"Whitelisted","","Builtin attribute that may not be consumed by the compiler\nbefore the unused_attribute check. These attributes\nwill be ignored by the unused_attribute lint",128,null],[13,"CrateLevel","","Builtin attribute that is only allowed at the crate level",128,null],[4,"AttributeGate","","",null,null],[13,"Gated","","Is gated by a given feature gate, reason\nand function to check if enabled",129,null],[13,"Ungated","","Ungated attribute, can be used on all release channels",129,null],[4,"GateIssue","","",null,null],[13,"Language","","",130,null],[13,"Library","","",130,null],[4,"UnstableFeatures","","",null,null],[13,"Disallow","","Hard errors for unstable features are active, as on\nbeta/stable channels.",131,null],[13,"Allow","","Allow features to me activated, as on nightly.",131,null],[13,"Cheat","","Errors are bypassed for bootstrapping. This is required any time\nduring the build that feature-related lints are set to warn or above\nbecause the build turns on warnings-as-errors and uses lots of unstable\nfeatures. As a result, this is always required for building Rust itself.",131,null],[5,"check_attribute","","",null,{"inputs":[{"name":"attribute"},{"name":"handler"},{"name":"codemap"},{"name":"features"}],"output":null}],[5,"find_lang_feature_accepted_version","","",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[5,"emit_feature_err","","",null,{"inputs":[{"name":"handler"},{"name":"str"},{"name":"span"},{"name":"gateissue"},{"name":"str"}],"output":null}],[5,"get_features","","",null,null],[5,"check_crate","","",null,null],[17,"KNOWN_ATTRIBUTES","","",null,null],[17,"EXPLAIN_STMT_ATTR_SYNTAX","","",null,null],[17,"EXPLAIN_ASM","","",null,null],[17,"EXPLAIN_LOG_SYNTAX","","",null,null],[17,"EXPLAIN_CONCAT_IDENTS","","",null,null],[17,"EXPLAIN_TRACE_MACROS","","",null,null],[17,"EXPLAIN_ALLOW_INTERNAL_UNSTABLE","","",null,null],[17,"EXPLAIN_CUSTOM_DERIVE","","",null,null],[17,"EXPLAIN_DERIVE_UNDERSCORE","","",null,null],[17,"EXPLAIN_PLACEMENT_IN","","",null,null],[11,"new","","",127,{"inputs":[],"output":{"name":"features"}}],[11,"eq","","",128,null],[11,"clone","","",128,null],[11,"fmt","","",128,null],[11,"fmt","","",129,null],[11,"fmt","","",132,null],[11,"eq","","",132,null],[11,"ne","","",132,null],[11,"gate","","",132,{"inputs":[{"name":"metaitem"}],"output":{"name":"option"}}],[11,"check_and_emit","","",132,null],[11,"clone","","",131,null],[11,"eq","","",131,null],[11,"hash","","",131,null],[0,"fold","syntex_syntax","A Folder represents an AST-&gt;AST fold; it accepts an AST piece,\nand returns a piece of the same type. So, for instance, macro\nexpansion is a Folder that walks over an AST and produces another\nAST.",null,null],[5,"noop_fold_meta_items","syntex_syntax::fold","",null,{"inputs":[{"name":"vec"},{"name":"t"}],"output":{"name":"vec"}}],[5,"noop_fold_view_path","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"p"}}],[5,"fold_attrs","","",null,{"inputs":[{"name":"vec"},{"name":"t"}],"output":{"name":"vec"}}],[5,"fold_thin_attrs","","",null,{"inputs":[{"name":"thinvec"},{"name":"t"}],"output":{"name":"thinvec"}}],[5,"noop_fold_arm","","",null,{"inputs":[{"name":"arm"},{"name":"t"}],"output":{"name":"arm"}}],[5,"noop_fold_ty_binding","","",null,{"inputs":[{"name":"typebinding"},{"name":"t"}],"output":{"name":"typebinding"}}],[5,"noop_fold_ty","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"p"}}],[5,"noop_fold_foreign_mod","","",null,{"inputs":[{"name":"foreignmod"},{"name":"t"}],"output":{"name":"foreignmod"}}],[5,"noop_fold_variant","","",null,{"inputs":[{"name":"variant"},{"name":"t"}],"output":{"name":"variant"}}],[5,"noop_fold_ident","","",null,{"inputs":[{"name":"ident"},{"name":"t"}],"output":{"name":"ident"}}],[5,"noop_fold_usize","","",null,{"inputs":[{"name":"usize"},{"name":"t"}],"output":{"name":"usize"}}],[5,"noop_fold_path","","",null,{"inputs":[{"name":"path"},{"name":"t"}],"output":{"name":"path"}}],[5,"noop_fold_path_parameters","","",null,{"inputs":[{"name":"pathparameters"},{"name":"t"}],"output":{"name":"pathparameters"}}],[5,"noop_fold_angle_bracketed_parameter_data","","",null,{"inputs":[{"name":"anglebracketedparameterdata"},{"name":"t"}],"output":{"name":"anglebracketedparameterdata"}}],[5,"noop_fold_parenthesized_parameter_data","","",null,{"inputs":[{"name":"parenthesizedparameterdata"},{"name":"t"}],"output":{"name":"parenthesizedparameterdata"}}],[5,"noop_fold_local","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"p"}}],[5,"noop_fold_attribute","","",null,{"inputs":[{"name":"attribute"},{"name":"t"}],"output":{"name":"option"}}],[5,"noop_fold_mac","","",null,{"inputs":[{"name":"mac"},{"name":"t"}],"output":{"name":"mac"}}],[5,"noop_fold_meta_list_item","","",null,{"inputs":[{"name":"nestedmetaitem"},{"name":"t"}],"output":{"name":"nestedmetaitem"}}],[5,"noop_fold_meta_item","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"p"}}],[5,"noop_fold_arg","","",null,{"inputs":[{"name":"arg"},{"name":"t"}],"output":{"name":"arg"}}],[5,"noop_fold_tt","","",null,{"inputs":[{"name":"tokentree"},{"name":"t"}],"output":{"name":"tokentree"}}],[5,"noop_fold_tts","","",null,null],[5,"noop_fold_token","","",null,{"inputs":[{"name":"token"},{"name":"t"}],"output":{"name":"token"}}],[5,"noop_fold_interpolated","","apply folder to elements of interpolated nodes",null,{"inputs":[{"name":"nonterminal"},{"name":"t"}],"output":{"name":"nonterminal"}}],[5,"noop_fold_fn_decl","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"p"}}],[5,"noop_fold_ty_param_bound","","",null,{"inputs":[{"name":"typarambound"},{"name":"t"}],"output":{"name":"typarambound"}}],[5,"noop_fold_ty_param","","",null,{"inputs":[{"name":"typaram"},{"name":"t"}],"output":{"name":"typaram"}}],[5,"noop_fold_ty_params","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"p"}}],[5,"noop_fold_lifetime","","",null,{"inputs":[{"name":"lifetime"},{"name":"t"}],"output":{"name":"lifetime"}}],[5,"noop_fold_lifetime_def","","",null,{"inputs":[{"name":"lifetimedef"},{"name":"t"}],"output":{"name":"lifetimedef"}}],[5,"noop_fold_lifetimes","","",null,{"inputs":[{"name":"vec"},{"name":"t"}],"output":{"name":"vec"}}],[5,"noop_fold_lifetime_defs","","",null,{"inputs":[{"name":"vec"},{"name":"t"}],"output":{"name":"vec"}}],[5,"noop_fold_opt_lifetime","","",null,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"option"}}],[5,"noop_fold_generics","","",null,{"inputs":[{"name":"generics"},{"name":"t"}],"output":{"name":"generics"}}],[5,"noop_fold_where_clause","","",null,{"inputs":[{"name":"whereclause"},{"name":"t"}],"output":{"name":"whereclause"}}],[5,"noop_fold_where_predicate","","",null,{"inputs":[{"name":"wherepredicate"},{"name":"t"}],"output":{"name":"wherepredicate"}}],[5,"noop_fold_variant_data","","",null,{"inputs":[{"name":"variantdata"},{"name":"t"}],"output":{"name":"variantdata"}}],[5,"noop_fold_trait_ref","","",null,{"inputs":[{"name":"traitref"},{"name":"t"}],"output":{"name":"traitref"}}],[5,"noop_fold_poly_trait_ref","","",null,{"inputs":[{"name":"polytraitref"},{"name":"t"}],"output":{"name":"polytraitref"}}],[5,"noop_fold_struct_field","","",null,{"inputs":[{"name":"structfield"},{"name":"t"}],"output":{"name":"structfield"}}],[5,"noop_fold_field","","",null,{"inputs":[{"name":"field"},{"name":"t"}],"output":{"name":"field"}}],[5,"noop_fold_mt","","",null,{"inputs":[{"name":"mutty"},{"name":"t"}],"output":{"name":"mutty"}}],[5,"noop_fold_opt_bounds","","",null,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"option"}}],[5,"noop_fold_block","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"p"}}],[5,"noop_fold_item_kind","","",null,{"inputs":[{"name":"itemkind"},{"name":"t"}],"output":{"name":"itemkind"}}],[5,"noop_fold_trait_item","","",null,{"inputs":[{"name":"traititem"},{"name":"t"}],"output":{"name":"smallvector"}}],[5,"noop_fold_impl_item","","",null,{"inputs":[{"name":"implitem"},{"name":"t"}],"output":{"name":"smallvector"}}],[5,"noop_fold_mod","","",null,{"inputs":[{"name":"mod"},{"name":"t"}],"output":{"name":"mod"}}],[5,"noop_fold_crate","","",null,{"inputs":[{"name":"crate"},{"name":"t"}],"output":{"name":"crate"}}],[5,"noop_fold_item","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"smallvector"}}],[5,"noop_fold_item_simple","","",null,{"inputs":[{"name":"item"},{"name":"t"}],"output":{"name":"item"}}],[5,"noop_fold_foreign_item","","",null,{"inputs":[{"name":"foreignitem"},{"name":"t"}],"output":{"name":"foreignitem"}}],[5,"noop_fold_method_sig","","",null,{"inputs":[{"name":"methodsig"},{"name":"t"}],"output":{"name":"methodsig"}}],[5,"noop_fold_pat","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"p"}}],[5,"noop_fold_expr","","",null,{"inputs":[{"name":"expr"},{"name":"t"}],"output":{"name":"expr"}}],[5,"noop_fold_opt_expr","","",null,{"inputs":[{"name":"p"},{"name":"t"}],"output":{"name":"option"}}],[5,"noop_fold_exprs","","",null,{"inputs":[{"name":"vec"},{"name":"t"}],"output":{"name":"vec"}}],[5,"noop_fold_stmt","","",null,{"inputs":[{"name":"stmt"},{"name":"t"}],"output":{"name":"smallvector"}}],[5,"noop_fold_vis","","",null,{"inputs":[{"name":"visibility"},{"name":"t"}],"output":{"name":"visibility"}}],[8,"Folder","","",null,null],[11,"fold_crate","","",133,null],[11,"fold_meta_items","","",133,null],[11,"fold_meta_list_item","","",133,null],[11,"fold_meta_item","","",133,null],[11,"fold_view_path","","",133,null],[11,"fold_foreign_item","","",133,null],[11,"fold_item","","",133,null],[11,"fold_item_simple","","",133,null],[11,"fold_struct_field","","",133,null],[11,"fold_item_kind","","",133,null],[11,"fold_trait_item","","",133,null],[11,"fold_impl_item","","",133,null],[11,"fold_fn_decl","","",133,null],[11,"fold_block","","",133,null],[11,"fold_stmt","","",133,null],[11,"fold_arm","","",133,null],[11,"fold_pat","","",133,null],[11,"fold_expr","","",133,null],[11,"fold_opt_expr","","",133,null],[11,"fold_exprs","","",133,null],[11,"fold_ty","","",133,null],[11,"fold_ty_binding","","",133,null],[11,"fold_mod","","",133,null],[11,"fold_foreign_mod","","",133,null],[11,"fold_variant","","",133,null],[11,"fold_ident","","",133,null],[11,"fold_usize","","",133,null],[11,"fold_path","","",133,null],[11,"fold_path_parameters","","",133,null],[11,"fold_angle_bracketed_parameter_data","","",133,null],[11,"fold_parenthesized_parameter_data","","",133,null],[11,"fold_local","","",133,null],[11,"fold_mac","","",133,null],[11,"fold_lifetime","","",133,null],[11,"fold_lifetime_def","","",133,null],[11,"fold_attribute","","",133,null],[11,"fold_arg","","",133,null],[11,"fold_generics","","",133,null],[11,"fold_trait_ref","","",133,null],[11,"fold_poly_trait_ref","","",133,null],[11,"fold_variant_data","","",133,null],[11,"fold_lifetimes","","",133,null],[11,"fold_lifetime_defs","","",133,null],[11,"fold_ty_param","","",133,null],[11,"fold_ty_params","","",133,null],[11,"fold_tt","","",133,null],[11,"fold_tts","","",133,null],[11,"fold_token","","",133,null],[11,"fold_interpolated","","",133,null],[11,"fold_opt_lifetime","","",133,null],[11,"fold_opt_bounds","","",133,null],[11,"fold_bounds","","",133,null],[11,"fold_ty_param_bound","","",133,null],[11,"fold_mt","","",133,null],[11,"fold_field","","",133,null],[11,"fold_where_clause","","",133,null],[11,"fold_where_predicate","","",133,null],[11,"fold_vis","","",133,null],[11,"new_id","","",133,null],[11,"new_span","","",133,null],[0,"parse","syntex_syntax","The main parser interface",null,null],[3,"ParseSess","syntex_syntax::parse","Info about a parsing session.",null,null],[12,"span_diagnostic","","",134,null],[5,"parse_crate_from_file","","",null,{"inputs":[{"name":"path"},{"name":"crateconfig"},{"name":"parsesess"}],"output":{"name":"presult"}}],[5,"parse_crate_attrs_from_file","","",null,{"inputs":[{"name":"path"},{"name":"crateconfig"},{"name":"parsesess"}],"output":{"name":"presult"}}],[5,"parse_crate_from_source_str","","",null,{"inputs":[{"name":"string"},{"name":"string"},{"name":"crateconfig"},{"name":"parsesess"}],"output":{"name":"presult"}}],[5,"parse_crate_attrs_from_source_str","","",null,{"inputs":[{"name":"string"},{"name":"string"},{"name":"crateconfig"},{"name":"parsesess"}],"output":{"name":"presult"}}],[5,"parse_expr_from_source_str","","",null,{"inputs":[{"name":"string"},{"name":"string"},{"name":"crateconfig"},{"name":"parsesess"}],"output":{"name":"presult"}}],[5,"parse_item_from_source_str","","Parses an item.",null,{"inputs":[{"name":"string"},{"name":"string"},{"name":"crateconfig"},{"name":"parsesess"}],"output":{"name":"presult"}}],[5,"parse_meta_from_source_str","","",null,{"inputs":[{"name":"string"},{"name":"string"},{"name":"crateconfig"},{"name":"parsesess"}],"output":{"name":"presult"}}],[5,"parse_stmt_from_source_str","","",null,{"inputs":[{"name":"string"},{"name":"string"},{"name":"crateconfig"},{"name":"parsesess"}],"output":{"name":"presult"}}],[5,"parse_tts_from_source_str","","",null,{"inputs":[{"name":"string"},{"name":"string"},{"name":"crateconfig"},{"name":"parsesess"}],"output":{"name":"presult"}}],[5,"new_parser_from_source_str","","",null,{"inputs":[{"name":"parsesess"},{"name":"crateconfig"},{"name":"string"},{"name":"string"}],"output":{"name":"parser"}}],[5,"new_parser_from_file","","Create a new parser, handling errors as appropriate\nif the file doesn&#39;t exist",null,{"inputs":[{"name":"parsesess"},{"name":"crateconfig"},{"name":"path"}],"output":{"name":"parser"}}],[5,"new_sub_parser_from_file","","Given a session, a crate config, a path, and a span, add\nthe file at the given path to the codemap, and return a parser.\nOn an error, use the given span as the source of the problem.",null,{"inputs":[{"name":"parsesess"},{"name":"crateconfig"},{"name":"path"},{"name":"bool"},{"name":"option"},{"name":"span"}],"output":{"name":"parser"}}],[5,"filemap_to_parser","","Given a filemap and config, return a parser",null,{"inputs":[{"name":"parsesess"},{"name":"rc"},{"name":"crateconfig"}],"output":{"name":"parser"}}],[5,"new_parser_from_tts","","",null,{"inputs":[{"name":"parsesess"},{"name":"crateconfig"},{"name":"vec"}],"output":{"name":"parser"}}],[5,"new_parser_from_ts","","",null,{"inputs":[{"name":"parsesess"},{"name":"crateconfig"},{"name":"tokenstream"}],"output":{"name":"parser"}}],[5,"filemap_to_tts","","Given a filemap, produce a sequence of token-trees",null,{"inputs":[{"name":"parsesess"},{"name":"rc"}],"output":{"name":"vec"}}],[5,"tts_to_parser","","Given tts and cfg, produce a parser",null,{"inputs":[{"name":"parsesess"},{"name":"vec"},{"name":"crateconfig"}],"output":{"name":"parser"}}],[5,"char_lit","","Parse a string representing a character literal into its final form.\nRather than just accepting/rejecting a given literal, unescapes it as\nwell. Can take any slice prefixed by a character escape. Returns the\ncharacter and the number of characters consumed.",null,null],[5,"str_lit","","Parse a string representing a string literal into its final form. Does\nunescaping.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"raw_str_lit","","Parse a string representing a raw string literal into its final form. The\nonly operation this does is convert embedded CRLF into a single LF.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"float_lit","","",null,{"inputs":[{"name":"str"},{"name":"option"},{"name":"handler"},{"name":"span"}],"output":{"name":"litkind"}}],[5,"byte_lit","","Parse a string representing a byte literal into its final form. Similar to `char_lit`",null,null],[5,"byte_str_lit","","",null,{"inputs":[{"name":"str"}],"output":{"name":"rc"}}],[5,"integer_lit","","",null,{"inputs":[{"name":"str"},{"name":"option"},{"name":"handler"},{"name":"span"}],"output":{"name":"litkind"}}],[0,"parser","","",null,null],[3,"Restrictions","syntex_syntax::parse::parser","",null,null],[3,"Parser","","",null,null],[12,"sess","","",135,null],[12,"token","","the current token:",135,null],[12,"span","","the span of the current token:",135,null],[12,"last_span","","the span of the prior token:",135,null],[12,"cfg","","",135,null],[12,"last_token","","the previous token or None (only stashed sometimes).",135,null],[12,"buffer","","",135,null],[12,"buffer_start","","",135,null],[12,"buffer_end","","",135,null],[12,"tokens_consumed","","",135,null],[12,"restrictions","","",135,null],[12,"quote_depth","","",135,null],[12,"reader","","",135,null],[12,"obsolete_set","","The set of seen errors about obsolete syntax. Used to suppress\nextra detail when the same error is seen twice",135,null],[12,"filename","","Used to determine the path to externally loaded source files",135,null],[12,"mod_path_stack","","",135,null],[12,"open_braces","","Stack of open delimiters and their spans. Used for error message.",135,null],[12,"owns_directory","","Flag if this parser &quot;owns&quot; the directory that it is currently parsing\nin. This will affect how nested files are looked up.",135,null],[12,"root_module_name","","Name of the root module this parser originated from. If `None`, then the\nname is not known. This does not change while the parser is descending\ninto modules, and sub-parsers have new values for this name.",135,null],[12,"expected_tokens","","",135,null],[3,"ModulePath","","Information about the path to a module.",null,null],[12,"name","","",136,null],[12,"path_exists","","",136,null],[12,"result","","",136,null],[3,"ModulePathSuccess","","",null,null],[12,"path","","",137,null],[12,"owns_directory","","",137,null],[3,"ModulePathError","","",null,null],[12,"err_msg","","",138,null],[12,"help_msg","","",138,null],[4,"PathStyle","","How to parse a path. There are three different kinds of paths, all of which\nare parsed somewhat differently.",null,null],[13,"Mod","","A path with no type parameters, e.g. `foo::bar::Baz`, used in imports or visibilities.",139,null],[13,"Type","","A path with a lifetime and type parameters, with no double colons\nbefore the type parameters; e.g. `foo::bar&lt;&#39;a&gt;::Baz&lt;T&gt;`, used in types.\nPaths using this style can be passed into macros expecting `path` nonterminals.",139,null],[13,"Expr","","A path with a lifetime and type parameters with double colons before\nthe type parameters; e.g. `foo::bar::&lt;&#39;a&gt;::Baz::&lt;T&gt;`, used in expressions or patterns.",139,null],[4,"BoundParsingMode","","How to parse a bound, whether to allow bound modifiers such as `?`.",null,null],[13,"Bare","","",140,null],[13,"Modified","","",140,null],[4,"SemiColonMode","","",null,null],[13,"Break","","",141,null],[13,"Ignore","","",141,null],[4,"TokenType","","",null,null],[13,"Token","","",142,null],[13,"Keyword","","",142,null],[13,"Operator","","",142,null],[4,"LhsExpr","","",null,null],[13,"NotYetParsed","","",143,null],[13,"AttributesParsed","","",143,null],[13,"AlreadyParsed","","",143,null],[17,"RESTRICTION_STMT_EXPR","","",null,null],[17,"RESTRICTION_NO_STRUCT_LITERAL","","",null,null],[17,"NO_NONINLINE_MOD","","",null,null],[11,"eq","","",144,null],[11,"ne","","",144,null],[11,"clone","","",144,null],[11,"partial_cmp","","",144,null],[11,"lt","","",144,null],[11,"le","","",144,null],[11,"gt","","",144,null],[11,"ge","","",144,null],[11,"cmp","","",144,null],[11,"hash","","",144,null],[11,"fmt","","",144,null],[11,"empty","","Returns an empty set of flags.",144,{"inputs":[],"output":{"name":"restrictions"}}],[11,"all","","Returns the set containing all flags.",144,{"inputs":[],"output":{"name":"restrictions"}}],[11,"bits","","Returns the raw value of the flags currently stored.",144,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",144,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",144,{"inputs":[{"name":"u8"}],"output":{"name":"restrictions"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",144,null],[11,"is_all","","Returns `true` if all flags are currently set.",144,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",144,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",144,null],[11,"insert","","Inserts the specified flags in-place.",144,null],[11,"remove","","Removes the specified flags in-place.",144,null],[11,"toggle","","Toggles the specified flags in-place.",144,null],[11,"bitor","","Returns the union of the two sets of flags.",144,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",144,null],[11,"bitand","","Returns the intersection between the two sets of flags.",144,null],[11,"sub","","Returns the set difference of the two sets of flags.",144,null],[11,"not","","Returns the complement of this set of flags.",144,null],[11,"from_iter","","",144,{"inputs":[{"name":"t"}],"output":{"name":"restrictions"}}],[11,"restriction_stmt_expr","","",144,{"inputs":[],"output":{"name":"self"}}],[11,"restriction_no_struct_literal","","",144,{"inputs":[],"output":{"name":"self"}}],[11,"no_noninline_mod","","",144,{"inputs":[],"output":{"name":"self"}}],[11,"clone","","",139,null],[11,"eq","","",139,null],[11,"clone","","",140,null],[11,"eq","","",140,null],[11,"clone","","",141,null],[11,"eq","","",141,null],[11,"eq","","",142,null],[11,"ne","","",142,null],[11,"clone","","",142,null],[11,"from","","",143,{"inputs":[{"name":"option"}],"output":{"name":"self"}}],[11,"from","","",143,{"inputs":[{"name":"p"}],"output":{"name":"self"}}],[11,"new","","",135,{"inputs":[{"name":"parsesess"},{"name":"crateconfig"},{"name":"box"}],"output":{"name":"parser"}}],[11,"token_to_string","","Convert a token to a string using self&#39;s reader",135,{"inputs":[{"name":"token"}],"output":{"name":"string"}}],[11,"this_token_to_string","","Convert the current token to a string using self&#39;s reader",135,null],[11,"this_token_descr","","",135,null],[11,"unexpected_last","","",135,null],[11,"unexpected","","",135,null],[11,"expect","","Expect and consume the token t. Signal an error if\nthe next token is not t.",135,null],[11,"expect_one_of","","Expect next token to be edible or inedible token.  If edible,\nthen consume it; if inedible, then return without consuming\nanything.  Signal a fatal error if next token is unexpected.",135,null],[11,"parse_ident","","",135,null],[11,"check","","Check if the next token is `tok`, and return `true` if so.",135,null],[11,"eat","","Consume token &#39;tok&#39; if it exists. Returns true if the given\ntoken was present, false otherwise.",135,null],[11,"check_keyword","","",135,null],[11,"eat_keyword","","If the next token is the given keyword, eat it and return\ntrue. Otherwise, return false.",135,null],[11,"eat_keyword_noexpect","","",135,null],[11,"check_contextual_keyword","","",135,null],[11,"eat_contextual_keyword","","",135,null],[11,"expect_keyword","","If the given word is not a keyword, signal an error.\nIf the next token is not the given word, signal an error.\nOtherwise, eat it.",135,null],[11,"check_strict_keywords","","Signal an error if the given string is a strict keyword",135,null],[11,"check_reserved_keywords","","Signal an error if the current token is a reserved keyword",135,null],[11,"expect_no_suffix","","",135,null],[11,"expect_gt","","Expect and consume a GT. if a &gt;&gt; is seen, replace it\nwith a single &gt; and continue. If a GT is not seen,\nsignal an error.",135,null],[11,"parse_seq_to_before_gt_or_return","","",135,null],[11,"parse_seq_to_before_gt","","Parse a sequence bracketed by &#39;&lt;&#39; and &#39;&gt;&#39;, stopping\nbefore the &#39;&gt;&#39;.",135,null],[11,"parse_seq_to_gt","","",135,null],[11,"parse_seq_to_gt_or_return","","",135,null],[11,"eat_to_tokens","","Eat and discard tokens until one of `kets` is encountered. Respects token trees,\npasses through any errors encountered. Used for error recovery.",135,null],[11,"parse_seq_to_end","","Parse a sequence, including the closing delimiter. The function\nf must consume tokens until reaching the next separator or\nclosing bracket.",135,null],[11,"parse_seq_to_before_end","","Parse a sequence, not including the closing delimiter. The function\nf must consume tokens until reaching the next separator or\nclosing bracket.",135,null],[11,"parse_unspanned_seq","","Parse a sequence, including the closing delimiter. The function\nf must consume tokens until reaching the next separator or\nclosing bracket.",135,null],[11,"parse_seq","","",135,null],[11,"bump","","Advance the parser by one token",135,null],[11,"bump_and_get","","Advance the parser by one token and return the bumped token.",135,null],[11,"bump_with","","Advance the parser using provided token as a next one. Use this when\nconsuming a part of a token. For example a single `&lt;` from `&lt;&lt;`.",135,null],[11,"buffer_length","","",135,null],[11,"look_ahead","","",135,null],[11,"fatal","","",135,null],[11,"span_fatal","","",135,null],[11,"span_fatal_help","","",135,null],[11,"bug","","",135,null],[11,"warn","","",135,null],[11,"span_warn","","",135,null],[11,"span_err","","",135,null],[11,"span_err_help","","",135,null],[11,"span_bug","","",135,null],[11,"abort_if_errors","","",135,null],[11,"diagnostic","","",135,null],[11,"id_to_interned_str","","",135,null],[11,"token_is_bare_fn_keyword","","Is the current token one of the keywords that signals a bare function\ntype?",135,null],[11,"get_lifetime","","",135,null],[11,"parse_for_in_type","","",135,null],[11,"parse_impl_trait_type","","",135,null],[11,"parse_ty_path","","",135,null],[11,"parse_ty_bare_fn","","parse a TyKind::BareFn type:",135,null],[11,"parse_obsolete_closure_kind","","Parses an obsolete closure kind (`&amp;:`, `&amp;mut:`, or `:`).",135,null],[11,"parse_unsafety","","",135,null],[11,"parse_trait_item","","Parse the items in a trait declaration",135,null],[11,"parse_trait_items","","Parse the items in a trait declaration",135,null],[11,"parse_mt","","Parse a possibly mutable type",135,null],[11,"parse_ret_ty","","Parse optional return type [ -&gt; TY ] in function decl",135,null],[11,"parse_ty_sum","","Parse a type in a context where `T1+T2` is allowed.",135,null],[11,"parse_ty","","Parse a type.",135,null],[11,"parse_borrowed_pointee","","",135,null],[11,"parse_ptr","","",135,null],[11,"is_named_argument","","",135,null],[11,"parse_arg_general","","This version of parse arg doesn&#39;t necessarily require\nidentifier names.",135,null],[11,"parse_arg","","Parse a single function argument",135,null],[11,"parse_fn_block_arg","","Parse an argument in a lambda header e.g. |arg, arg|",135,null],[11,"maybe_parse_fixed_length_of_vec","","",135,null],[11,"parse_lit_token","","Matches token_lit = LIT_INTEGER | ...",135,null],[11,"parse_lit","","Matches lit = true | false | token_lit",135,null],[11,"parse_pat_literal_maybe_minus","","matches &#39;-&#39; lit | lit",135,null],[11,"parse_path_segment_ident","","",135,null],[11,"parse_qualified_path","","Parses qualified path.",135,null],[11,"parse_path","","Parses a path and optional type parameter bounds, depending on the\nmode. The `mode` parameter determines whether lifetimes, types, and/or\nbounds are permitted and whether `::` must precede type parameter\ngroups.",135,null],[11,"parse_path_segments_without_colons","","Examples:\n- `a::b&lt;T,U&gt;::c&lt;V,W&gt;`\n- `a::b&lt;T,U&gt;::c(V) -&gt; W`\n- `a::b&lt;T,U&gt;::c(V)`",135,null],[11,"parse_path_segments_with_colons","","Examples:\n- `a::b::&lt;T,U&gt;::c`",135,null],[11,"parse_path_segments_without_types","","Examples:\n- `a::b::c`",135,null],[11,"parse_opt_lifetime","","parses 0 or 1 lifetime",135,null],[11,"parse_lifetime","","Parses a single lifetime\nMatches lifetime = LIFETIME",135,null],[11,"parse_lifetime_defs","","Parses `lifetime_defs = [ lifetime_defs { &#39;,&#39; lifetime_defs } ]` where `lifetime_def  =\nlifetime [&#39;:&#39; lifetimes]`",135,null],[11,"parse_lifetimes","","matches lifetimes = ( lifetime ) | ( lifetime , lifetimes ) actually, it matches the empty\none too, but putting that in there messes up the grammar....",135,null],[11,"parse_mutability","","Parse mutability (`mut` or nothing).",135,null],[11,"parse_field_name","","",135,null],[11,"parse_field","","Parse ident COLON expr",135,null],[11,"mk_expr","","",135,null],[11,"mk_unary","","",135,null],[11,"mk_binary","","",135,null],[11,"mk_call","","",135,null],[11,"mk_index","","",135,null],[11,"mk_range","","",135,null],[11,"mk_field","","",135,null],[11,"mk_tup_field","","",135,null],[11,"mk_assign_op","","",135,null],[11,"mk_mac_expr","","",135,null],[11,"mk_lit_u32","","",135,null],[11,"parse_block_expr","","Parse a block or unsafe block",135,null],[11,"parse_dot_or_call_expr","","parse a.b or a(13) or a[4] or just a",135,null],[11,"parse_dot_or_call_expr_with","","",135,null],[11,"check_unknown_macro_variable","","",135,null],[11,"parse_sep_and_kleene_op","","Parse an optional separator followed by a Kleene-style\nrepetition token (+ or *).",135,null],[11,"parse_token_tree","","parse a single token tree from the input.",135,null],[11,"parse_all_token_trees","","",135,null],[11,"parse_prefix_expr","","Parse a prefix-unary-operator expr",135,null],[11,"parse_assoc_expr","","Parse an associative expression",135,null],[11,"parse_assoc_expr_with","","Parse an associative expression with operators of at least `min_prec` precedence",135,null],[11,"parse_if_expr","","Parse an &#39;if&#39; or &#39;if let&#39; expression (&#39;if&#39; token already eaten)",135,null],[11,"parse_if_let_expr","","Parse an &#39;if let&#39; expression (&#39;if&#39; token already eaten)",135,null],[11,"parse_lambda_expr","","",135,null],[11,"parse_else_expr","","",135,null],[11,"parse_for_expr","","Parse a &#39;for&#39; .. &#39;in&#39; expression (&#39;for&#39; token already eaten)",135,null],[11,"parse_while_expr","","Parse a &#39;while&#39; or &#39;while let&#39; expression (&#39;while&#39; token already eaten)",135,null],[11,"parse_while_let_expr","","Parse a &#39;while let&#39; expression (&#39;while&#39; token already eaten)",135,null],[11,"parse_loop_expr","","",135,null],[11,"parse_arm","","",135,null],[11,"parse_expr","","Parse an expression",135,null],[11,"with_res","","Evaluate the closure with restrictions in place.",135,null],[11,"parse_expr_res","","Parse an expression, subject to the given restrictions",135,null],[11,"parse_pat","","Parse a pattern.",135,null],[11,"parse_stmt","","Parse a statement. This stops just before trailing semicolons on everything but items.\ne.g. a `StmtKind::Semi` parses to a `StmtKind::Expr`, leaving the trailing `;` unconsumed.",135,null],[11,"parse_block","","Parse a block. No inner attrs are allowed.",135,null],[11,"parse_full_stmt","","Parse a statement, including the trailing semicolon.",135,null],[11,"parse_generics","","Parse a set of optional generic type parameter declarations. Where\nclauses are not parsed here, and must be added later via\n`parse_where_clause()`.",135,null],[11,"parse_where_clause","","Parses an optional `where` clause and places it in `generics`.",135,null],[11,"parse_fn_decl","","Parse the argument list and result type of a function declaration",135,null],[11,"is_const_item","","true if we are looking at `const ID`, false for things like `const fn` etc",135,null],[11,"parse_fn_front_matter","","parses all the &quot;front matter&quot; for a `fn` declaration, up to\nand including the `fn` keyword:",135,null],[11,"parse_impl_item","","Parse an impl item.",135,null],[11,"parse_record_struct_body","","",135,null],[11,"parse_tuple_struct_body","","",135,null],[11,"parse_single_struct_field","","Parse a structure field declaration",135,null],[11,"submod_path_from_attr","","",135,null],[11,"default_submod_path","","Returns either a path to a module, or .",135,{"inputs":[{"name":"ident"},{"name":"path"},{"name":"codemap"}],"output":{"name":"modulepath"}}],[11,"parse_item","","",135,null],[11,"parse_crate_mod","","Parses a source module as a crate. This is the main\nentry point for the parser.",135,null],[11,"parse_optional_str","","",135,null],[11,"parse_str","","",135,null],[0,"lexer","syntex_syntax::parse","",null,null],[3,"TokenAndSpan","syntex_syntax::parse::lexer","",null,null],[12,"tok","","",145,null],[12,"sp","","",145,null],[3,"StringReader","","",null,null],[12,"span_diagnostic","","",146,null],[12,"pos","","The absolute offset within the codemap of the next character to read",146,null],[12,"last_pos","","The absolute offset within the codemap of the last character read(curr)",146,null],[12,"col","","The column of the next character to read",146,null],[12,"curr","","The last character to be read",146,null],[12,"filemap","","",146,null],[12,"peek_tok","","",146,null],[12,"peek_span","","",146,null],[12,"fatal_errs","","",146,null],[5,"is_pattern_whitespace","","",null,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[5,"is_doc_comment","","",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[5,"is_block_doc_comment","","",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[0,"comments","","",null,null],[3,"Comment","syntex_syntax::parse::lexer::comments","",null,null],[12,"style","","",147,null],[12,"lines","","",147,null],[12,"pos","","",147,null],[3,"Literal","","",null,null],[12,"lit","","",148,null],[12,"pos","","",148,null],[4,"CommentStyle","","",null,null],[13,"Isolated","","No code on either side of each line of the comment",149,null],[13,"Trailing","","Code exists to the left of the comment",149,null],[13,"Mixed","","Code before /* foo */ and after the comment",149,null],[13,"BlankLine","","Just a manual blank line &quot;\\n\\n&quot;, for layout",149,null],[5,"is_doc_comment","","",null,{"inputs":[{"name":"str"}],"output":{"name":"bool"}}],[5,"doc_comment_style","","",null,{"inputs":[{"name":"str"}],"output":{"name":"attrstyle"}}],[5,"strip_doc_comment_decoration","","",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"gather_comments_and_literals","","",null,null],[11,"clone","","",149,null],[11,"eq","","",149,null],[11,"clone","","",147,null],[11,"clone","","",148,null],[8,"Reader","syntex_syntax::parse::lexer","",null,null],[10,"is_eof","","",150,null],[10,"try_next_token","","",150,null],[11,"next_token","","",150,null],[10,"fatal","","Report a fatal error with the current span.",150,null],[10,"err","","Report a non-fatal error with the current span.",150,null],[10,"emit_fatal_errors","","",150,null],[11,"unwrap_or_abort","","",150,null],[10,"peek","","",150,null],[11,"try_real_token","","Get a token the parser cares about.",150,null],[11,"real_token","","",150,null],[11,"clone","","",145,null],[11,"eq","","",145,null],[11,"ne","","",145,null],[11,"fmt","","",145,null],[11,"is_eof","","",146,null],[11,"try_next_token","","Return the next token. EFFECT: advances the string_reader.",146,null],[11,"fatal","","",146,null],[11,"err","","",146,null],[11,"emit_fatal_errors","","",146,null],[11,"peek","","",146,null],[11,"new_raw","","For comments.rs, which hackily pokes into pos and curr",146,{"inputs":[{"name":"handler"},{"name":"rc"}],"output":{"name":"stringreader"}}],[11,"new","","",146,{"inputs":[{"name":"handler"},{"name":"rc"}],"output":{"name":"stringreader"}}],[11,"curr_is","","",146,null],[11,"fatal_span","","Report a fatal lexical error with a given span.",146,null],[11,"err_span","","Report a lexical error with a given span.",146,null],[11,"with_str_from","","Calls `f` with a string slice of the source text spanning from `start`\nup to but excluding `self.last_pos`, meaning the slice does not include\nthe character `self.curr`.",146,null],[11,"name_from","","Create a Name from a given offset to the current offset, each\nadjusted 1 towards each other (assumes that on either side there is a\nsingle-byte delimiter).",146,null],[11,"name_from_to","","As name_from, with an explicit endpoint.",146,null],[11,"bump","","Advance the StringReader by one character. If a newline is\ndiscovered, add it to the FileMap&#39;s list of line start offsets.",146,null],[11,"nextch","","",146,null],[11,"nextch_is","","",146,null],[11,"nextnextch","","",146,null],[11,"nextnextch_is","","",146,null],[0,"token","syntex_syntax::parse","",null,null],[3,"InternedString","syntex_syntax::parse::token","Represents a string stored in the thread-local interner. Because the\ninterner lives for the life of the thread, this can be safely treated as an\nimmortal string, as long as it never crosses between threads.",null,null],[4,"BinOpToken","","",null,null],[13,"Plus","","",151,null],[13,"Minus","","",151,null],[13,"Star","","",151,null],[13,"Slash","","",151,null],[13,"Percent","","",151,null],[13,"Caret","","",151,null],[13,"And","","",151,null],[13,"Or","","",151,null],[13,"Shl","","",151,null],[13,"Shr","","",151,null],[4,"DelimToken","","A delimiter token",null,null],[13,"Paren","","A round parenthesis: `(` or `)`",152,null],[13,"Bracket","","A square bracket: `[` or `]`",152,null],[13,"Brace","","A curly brace: `{` or `}`",152,null],[13,"NoDelim","","An empty delimiter",152,null],[4,"SpecialMacroVar","","",null,null],[13,"CrateMacroVar","","`$crate` will be filled in with the name of the crate a macro was\nimported from, if any.",153,null],[4,"Lit","","",null,null],[13,"Byte","","",154,null],[13,"Char","","",154,null],[13,"Integer","","",154,null],[13,"Float","","",154,null],[13,"Str_","","",154,null],[13,"StrRaw","","",154,null],[13,"ByteStr","","",154,null],[13,"ByteStrRaw","","",154,null],[4,"Token","","",null,null],[13,"Eq","","",155,null],[13,"Lt","","",155,null],[13,"Le","","",155,null],[13,"EqEq","","",155,null],[13,"Ne","","",155,null],[13,"Ge","","",155,null],[13,"Gt","","",155,null],[13,"AndAnd","","",155,null],[13,"OrOr","","",155,null],[13,"Not","","",155,null],[13,"Tilde","","",155,null],[13,"BinOp","","",155,null],[13,"BinOpEq","","",155,null],[13,"At","","",155,null],[13,"Dot","","",155,null],[13,"DotDot","","",155,null],[13,"DotDotDot","","",155,null],[13,"Comma","","",155,null],[13,"Semi","","",155,null],[13,"Colon","","",155,null],[13,"ModSep","","",155,null],[13,"RArrow","","",155,null],[13,"LArrow","","",155,null],[13,"FatArrow","","",155,null],[13,"Pound","","",155,null],[13,"Dollar","","",155,null],[13,"Question","","",155,null],[13,"OpenDelim","","An opening delimiter, eg. `{`",155,null],[13,"CloseDelim","","A closing delimiter, eg. `}`",155,null],[13,"Literal","","",155,null],[13,"Ident","","",155,null],[13,"Underscore","","",155,null],[13,"Lifetime","","",155,null],[13,"Interpolated","","",155,null],[13,"DocComment","","Doc comment",155,null],[13,"MatchNt","","Parse a nonterminal (name to bind, name of NT)",155,null],[13,"SubstNt","","A syntactic variable that will be filled in by macro expansion.",155,null],[13,"SpecialVarNt","","A macro variable with special meaning.",155,null],[13,"Whitespace","","Whitespace",155,null],[13,"Comment","","Comment",155,null],[13,"Shebang","","",155,null],[13,"Eof","","",155,null],[4,"Nonterminal","","For interpolation during macro expansion.",null,null],[13,"NtItem","","",156,null],[13,"NtBlock","","",156,null],[13,"NtStmt","","",156,null],[13,"NtPat","","",156,null],[13,"NtExpr","","",156,null],[13,"NtTy","","",156,null],[13,"NtIdent","","",156,null],[13,"NtMeta","","Stuff inside brackets for attributes",156,null],[13,"NtPath","","",156,null],[13,"NtTT","","",156,null],[13,"NtArm","","",156,null],[13,"NtImplItem","","",156,null],[13,"NtTraitItem","","",156,null],[13,"NtGenerics","","",156,null],[13,"NtWhereClause","","",156,null],[13,"NtArg","","",156,null],[5,"with_ident_interner","","",null,{"inputs":[{"name":"f"}],"output":{"name":"t"}}],[5,"reset_ident_interner","","Reset the ident interner to its initial state.",null,{"inputs":[],"output":null}],[5,"clear_ident_interner","","",null,{"inputs":[],"output":null}],[5,"intern_and_get_ident","","Interns and returns the string contents of an identifier, using the\nthread-local interner.",null,{"inputs":[{"name":"str"}],"output":{"name":"internedstring"}}],[5,"intern","","Maps a string to its interned representation.",null,{"inputs":[{"name":"str"}],"output":{"name":"name"}}],[5,"gensym","","gensym&#39;s a new usize, using the current interner.",null,{"inputs":[{"name":"str"}],"output":{"name":"name"}}],[5,"str_to_ident","","Maps a string to an identifier with an empty syntax context.",null,{"inputs":[{"name":"str"}],"output":{"name":"ident"}}],[5,"gensym_ident","","Maps a string to a gensym&#39;ed identifier.",null,{"inputs":[{"name":"str"}],"output":{"name":"ident"}}],[5,"fresh_name","","",null,{"inputs":[{"name":"ident"}],"output":{"name":"name"}}],[0,"keywords","","",null,null],[3,"Keyword","syntex_syntax::parse::token::keywords","",null,null],[17,"Invalid","","",null,null],[17,"As","","",null,null],[17,"Box","","",null,null],[17,"Break","","",null,null],[17,"Const","","",null,null],[17,"Continue","","",null,null],[17,"Crate","","",null,null],[17,"Else","","",null,null],[17,"Enum","","",null,null],[17,"Extern","","",null,null],[17,"False","","",null,null],[17,"Fn","","",null,null],[17,"For","","",null,null],[17,"If","","",null,null],[17,"Impl","","",null,null],[17,"In","","",null,null],[17,"Let","","",null,null],[17,"Loop","","",null,null],[17,"Match","","",null,null],[17,"Mod","","",null,null],[17,"Move","","",null,null],[17,"Mut","","",null,null],[17,"Pub","","",null,null],[17,"Ref","","",null,null],[17,"Return","","",null,null],[17,"SelfValue","","",null,null],[17,"SelfType","","",null,null],[17,"Static","","",null,null],[17,"Struct","","",null,null],[17,"Super","","",null,null],[17,"Trait","","",null,null],[17,"True","","",null,null],[17,"Type","","",null,null],[17,"Unsafe","","",null,null],[17,"Use","","",null,null],[17,"Where","","",null,null],[17,"While","","",null,null],[17,"Abstract","","",null,null],[17,"Alignof","","",null,null],[17,"Become","","",null,null],[17,"Do","","",null,null],[17,"Final","","",null,null],[17,"Macro","","",null,null],[17,"Offsetof","","",null,null],[17,"Override","","",null,null],[17,"Priv","","",null,null],[17,"Proc","","",null,null],[17,"Pure","","",null,null],[17,"Sizeof","","",null,null],[17,"Typeof","","",null,null],[17,"Unsized","","",null,null],[17,"Virtual","","",null,null],[17,"Yield","","",null,null],[17,"Default","","",null,null],[17,"StaticLifetime","","",null,null],[17,"Union","","",null,null],[11,"clone","","",157,null],[11,"eq","","",157,null],[11,"ne","","",157,null],[11,"ident","","",157,null],[11,"name","","",157,null],[6,"IdentInterner","syntex_syntax::parse::token","",null,null],[11,"clone","","",151,null],[11,"encode","","",151,null],[11,"decode","","",151,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",151,null],[11,"hash","","",151,null],[11,"fmt","","",151,null],[11,"clone","","",152,null],[11,"encode","","",152,null],[11,"decode","","",152,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",152,null],[11,"hash","","",152,null],[11,"fmt","","",152,null],[11,"clone","","",153,null],[11,"encode","","",153,null],[11,"decode","","",153,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",153,null],[11,"hash","","",153,null],[11,"fmt","","",153,null],[11,"as_str","","",153,null],[11,"clone","","",154,null],[11,"encode","","",154,null],[11,"decode","","",154,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",154,null],[11,"ne","","",154,null],[11,"hash","","",154,null],[11,"fmt","","",154,null],[11,"short_name","","",154,null],[11,"clone","","",155,null],[11,"encode","","",155,null],[11,"decode","","",155,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",155,null],[11,"ne","","",155,null],[11,"hash","","",155,null],[11,"fmt","","",155,null],[11,"is_like_gt","","Returns `true` if the token starts with &#39;&gt;&#39;.",155,null],[11,"can_begin_expr","","Returns `true` if the token can appear at the start of an expression.",155,null],[11,"is_lit","","Returns `true` if the token is any literal",155,null],[11,"is_ident","","Returns `true` if the token is an identifier.",155,null],[11,"is_doc_comment","","Returns `true` if the token is a documentation comment.",155,null],[11,"is_interpolated","","Returns `true` if the token is interpolated.",155,null],[11,"is_path","","Returns `true` if the token is an interpolated path.",155,null],[11,"is_lifetime","","Returns `true` if the token is a lifetime.",155,null],[11,"is_mutability","","Returns `true` if the token is either the `mut` or `const` keyword.",155,null],[11,"is_path_start","","",155,null],[11,"to_binop","","Maps a token to its corresponding binary operator.",155,null],[11,"is_keyword","","Returns `true` if the token is a given keyword, `kw`.",155,null],[11,"is_path_segment_keyword","","",155,null],[11,"is_any_keyword","","Returns `true` if the token is either a strict or reserved keyword.",155,null],[11,"is_strict_keyword","","Returns `true` if the token is a strict keyword.",155,null],[11,"is_reserved_keyword","","Returns `true` if the token is a keyword reserved for possible future use.",155,null],[11,"clone","","",156,null],[11,"encode","","",156,null],[11,"decode","","",156,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",156,null],[11,"ne","","",156,null],[11,"hash","","",156,null],[11,"fmt","","",156,null],[11,"clone","","",158,null],[11,"eq","","",158,null],[11,"ne","","",158,null],[11,"hash","","",158,null],[11,"partial_cmp","","",158,null],[11,"lt","","",158,null],[11,"le","","",158,null],[11,"gt","","",158,null],[11,"ge","","",158,null],[11,"cmp","","",158,null],[11,"new","","",158,{"inputs":[{"name":"str"}],"output":{"name":"internedstring"}}],[11,"new_from_name","","",158,{"inputs":[{"name":"name"}],"output":{"name":"internedstring"}}],[11,"deref","","",158,null],[11,"fmt","","",158,null],[11,"fmt","","",158,null],[11,"eq","","",158,null],[11,"ne","","",158,null],[11,"eq","","",158,null],[11,"ne","","",158,null],[11,"decode","","",158,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",158,null],[0,"attr","syntex_syntax::parse","",null,null],[11,"parse_outer_attributes","syntex_syntax::parse::parser","Parse attributes that appear before an item",135,null],[11,"parse_attribute","","Matches `attribute = # ! [ meta_item ]`",135,null],[11,"parse_inner_attributes","","Parse attributes that appear after the opening of an item. These should\nbe preceded by an exclamation mark, but we accept and warn about one\nterminated by a semicolon.\nmatches inner_attrs*",135,null],[11,"parse_meta_item","","Per RFC#1559, matches the following grammar:",135,null],[0,"common","syntex_syntax::parse","Common routines shared by parser mods",null,null],[3,"SeqSep","syntex_syntax::parse::common","SeqSep : a sequence separator (token)\nand whether a trailing separator is allowed.",null,null],[12,"sep","","",159,null],[12,"trailing_sep_allowed","","",159,null],[11,"trailing_allowed","","",159,{"inputs":[{"name":"token"}],"output":{"name":"seqsep"}}],[11,"none","","",159,{"inputs":[],"output":{"name":"seqsep"}}],[0,"classify","syntex_syntax::parse","Routines the parser uses to classify AST nodes",null,null],[5,"expr_requires_semi_to_be_stmt","syntex_syntax::parse::classify","Does this expression require a semicolon to be treated\nas a statement? The negation of this: &#39;can this expression\nbe used as a statement without a semicolon&#39; -- is used\nas an early-bail-out in the parser so that, for instance,\n    if true {...} else {...}\n     |x| 5\nisn&#39;t parsed as (if true {...} else {...} | x) | 5",null,{"inputs":[{"name":"expr"}],"output":{"name":"bool"}}],[5,"expr_is_simple_block","","",null,{"inputs":[{"name":"expr"}],"output":{"name":"bool"}}],[5,"stmt_ends_with_semi","","this statement requires a semicolon after it.\nnote that in one case (stmt_semi), we&#39;ve already\nseen the semicolon, and thus don&#39;t need another.",null,{"inputs":[{"name":"stmtkind"}],"output":{"name":"bool"}}],[0,"obsolete","syntex_syntax::parse","Support for parsing unsupported, old syntaxes, for the purpose of reporting errors. Parsing of\nthese syntaxes is tested by compile-test/obsolete-syntax.rs.",null,null],[4,"ObsoleteSyntax","syntex_syntax::parse::obsolete","The specific types of unsupported syntax",null,null],[13,"ClosureKind","","",160,null],[13,"ExternCrateString","","",160,null],[8,"ParserObsoleteMethods","","",null,null],[10,"obsolete","","Reports an obsolete syntax non-fatal error.",161,null],[10,"report","","",161,null],[11,"clone","","",160,null],[11,"eq","","",160,null],[11,"hash","","",160,null],[11,"obsolete","syntex_syntax::parse::parser","Reports an obsolete syntax non-fatal error.",135,null],[11,"report","","",135,null],[6,"PResult","syntex_syntax::parse","",null,null],[11,"new","","",134,{"inputs":[],"output":{"name":"parsesess"}}],[11,"with_span_handler","","",134,{"inputs":[{"name":"handler"},{"name":"rc"}],"output":{"name":"parsesess"}}],[11,"codemap","","",134,null],[0,"ptr","syntex_syntax","The AST pointer",null,null],[3,"P","syntex_syntax::ptr","An owned smart pointer.",null,null],[5,"P","","Construct a `P&lt;T&gt;` from a `T` value.",null,{"inputs":[{"name":"t"}],"output":{"name":"p"}}],[11,"hash","","",162,null],[11,"eq","","",162,null],[11,"ne","","",162,null],[11,"partial_cmp","","",162,null],[11,"lt","","",162,null],[11,"le","","",162,null],[11,"gt","","",162,null],[11,"ge","","",162,null],[11,"cmp","","",162,null],[11,"and_then","","Move out of the pointer.\nIntended for chaining transformations not covered by `map`.",162,null],[11,"unwrap","","Equivalent to and_then(|x| x)",162,null],[11,"map","","Transform the inner value, consuming `self` and producing a new `P&lt;T&gt;`.",162,null],[11,"deref","","",162,null],[11,"clone","","",162,null],[11,"fmt","","",162,null],[11,"fmt","","",162,null],[11,"fmt","","",162,null],[11,"decode","","",162,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",162,null],[11,"new","","",162,{"inputs":[],"output":{"name":"p"}}],[11,"from_vec","","",162,{"inputs":[{"name":"vec"}],"output":{"name":"p"}}],[11,"into_vec","","",162,null],[11,"default","","",162,{"inputs":[],"output":{"name":"p"}}],[11,"clone","","",162,null],[11,"from","","",162,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"into","","",162,null],[11,"from_iter","","",162,{"inputs":[{"name":"i"}],"output":{"name":"p"}}],[11,"into_iter","","",162,null],[11,"encode","","",162,null],[11,"decode","","",162,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[0,"show_span","syntex_syntax","Span debugger",null,null],[5,"run","syntex_syntax::show_span","",null,{"inputs":[{"name":"handler"},{"name":"str"},{"name":"crate"}],"output":null}],[0,"std_inject","syntex_syntax","",null,null],[5,"no_core","syntex_syntax::std_inject","",null,{"inputs":[{"name":"crate"}],"output":{"name":"bool"}}],[5,"no_std","","",null,{"inputs":[{"name":"crate"}],"output":{"name":"bool"}}],[5,"maybe_inject_crates_ref","","",null,{"inputs":[{"name":"parsesess"},{"name":"crate"},{"name":"option"}],"output":{"name":"crate"}}],[0,"str","syntex_syntax","",null,null],[5,"char_at","syntex_syntax::str","",null,{"inputs":[{"name":"str"},{"name":"usize"}],"output":{"name":"char"}}],[5,"slice_shift_char","","",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[0,"test","syntex_syntax","",null,null],[5,"modify_for_testing","syntex_syntax::test","",null,{"inputs":[{"name":"parsesess"},{"name":"bool"},{"name":"crate"},{"name":"handler"}],"output":{"name":"crate"}}],[0,"tokenstream","syntex_syntax","# Token Streams",null,null],[3,"Delimited","syntex_syntax::tokenstream","A delimited sequence of token trees",null,null],[12,"delim","","The type of delimiter",163,null],[12,"open_span","","The span covering the opening delimiter",163,null],[12,"tts","","The delimited sequence of token trees",163,null],[12,"close_span","","The span covering the closing delimiter",163,null],[3,"SequenceRepetition","","A sequence of token trees",null,null],[12,"tts","","The sequence of token trees",164,null],[12,"separator","","The optional separator",164,null],[12,"op","","Whether the sequence can be repeated zero (*), or one or more times (+)",164,null],[12,"num_captures","","The number of `MatchNt`s that appear in the sequence (and subsequences)",164,null],[3,"TokenStream","","#Token Streams",null,null],[3,"Iter","","",null,null],[3,"Split","","",null,null],[4,"KleeneOp","","A Kleene-style [repetition operator](http://en.wikipedia.org/wiki/Kleene_star)\nfor token sequences.",null,null],[13,"ZeroOrMore","","",165,null],[13,"OneOrMore","","",165,null],[4,"TokenTree","","When the main rust parser encounters a syntax-extension invocation, it\nparses the arguments to the invocation as a token-tree. This is a very\nloose structure, such that all sorts of different AST-fragments can\nbe passed to syntax extensions using a uniform type.",null,null],[13,"Token","","A single token",166,null],[13,"Delimited","","A delimited sequence of token trees",166,null],[13,"Sequence","","A kleene-style repetition sequence with a span",166,null],[4,"InternalTS","","",null,null],[13,"Empty","","",167,null],[13,"Leaf","","",167,null],[12,"tts","syntex_syntax::tokenstream::InternalTS","",167,null],[12,"offset","","",167,null],[12,"len","","",167,null],[12,"sp","","",167,null],[13,"Node","syntex_syntax::tokenstream","",167,null],[12,"left","syntex_syntax::tokenstream::InternalTS","",167,null],[12,"right","","",167,null],[12,"len","","",167,null],[12,"sp","","",167,null],[11,"clone","syntex_syntax::tokenstream","",163,null],[11,"eq","","",163,null],[11,"ne","","",163,null],[11,"encode","","",163,null],[11,"decode","","",163,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",163,null],[11,"fmt","","",163,null],[11,"open_token","","Returns the opening delimiter as a token.",163,null],[11,"close_token","","Returns the closing delimiter as a token.",163,null],[11,"open_tt","","Returns the opening delimiter as a token tree.",163,null],[11,"close_tt","","Returns the closing delimiter as a token tree.",163,null],[11,"subtrees","","Returns the token trees inside the delimiters.",163,null],[11,"clone","","",164,null],[11,"eq","","",164,null],[11,"ne","","",164,null],[11,"encode","","",164,null],[11,"decode","","",164,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",164,null],[11,"fmt","","",164,null],[11,"clone","","",165,null],[11,"eq","","",165,null],[11,"encode","","",165,null],[11,"decode","","",165,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",165,null],[11,"fmt","","",165,null],[11,"fmt","","",166,null],[11,"clone","","",166,null],[11,"eq","","",166,null],[11,"ne","","",166,null],[11,"encode","","",166,null],[11,"decode","","",166,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"hash","","",166,null],[11,"len","","",166,null],[11,"get_tt","","",166,null],[11,"get_span","","Returns the `Span` corresponding to this token tree.",166,null],[11,"parse","","Use this token tree as a matcher to parse given tts.",166,null],[11,"eq_unspanned","","Check if this TokenTree is equal to the other, regardless of span information.",166,null],[11,"span","","Retrieve the TokenTree&#39;s span.",166,null],[11,"eq_token","","Indicates if the stream is a token that is equal to the provided token.",166,null],[11,"is_ident","","Indicates if the token is an identifier.",166,null],[11,"maybe_ident","","Returns an identifier.",166,null],[11,"maybe_lit","","Returns a Token literal.",166,null],[11,"maybe_str","","Returns an AST string literal.",166,null],[11,"clone","","",168,null],[11,"hash","","",168,null],[11,"encode","","",168,null],[11,"decode","","",168,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"clone","","",167,null],[11,"eq","","",167,null],[11,"ne","","",167,null],[11,"hash","","",167,null],[11,"encode","","",167,null],[11,"decode","","",167,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"fmt","","",168,null],[11,"fmt","","",167,null],[11,"eq","","",168,null],[11,"mk_empty","","",168,{"inputs":[],"output":{"name":"tokenstream"}}],[11,"from_tts","","Convert a vector of `TokenTree`s into a `TokenStream`.",168,{"inputs":[{"name":"vec"}],"output":{"name":"tokenstream"}}],[11,"from_tokens","","Convert a vector of Tokens into a TokenStream.",168,{"inputs":[{"name":"vec"}],"output":{"name":"tokenstream"}}],[11,"respan","","Manually change a TokenStream&#39;s span.",168,null],[11,"concat","","Concatenates two TokenStreams into a new TokenStream.",168,{"inputs":[{"name":"tokenstream"},{"name":"tokenstream"}],"output":{"name":"tokenstream"}}],[11,"is_empty","","Indicate if the TokenStream is empty.",168,null],[11,"len","","Return a TokenStream&#39;s length.",168,null],[11,"to_vec","","Convert a TokenStream into a vector of borrowed TokenTrees.",168,null],[11,"to_tts","","Convert a TokenStream into a vector of TokenTrees (by cloning the TokenTrees).\n(This operation is an O(n) deep copy of the underlying structure.)",168,null],[11,"span","","Return the TokenStream&#39;s span.",168,null],[11,"iter","","Returns an iterator over a TokenStream (as a sequence of TokenTrees).",168,null],[11,"split","","Splits a TokenStream based on the provided `&amp;TokenTree -&gt; bool` predicate.",168,null],[11,"slice","","Produce a slice of the input TokenStream from the `from` index, inclusive, to the\n`to` index, non-inclusive.",168,null],[11,"slice_from","","Slice starting at the provided index, inclusive.",168,null],[11,"slice_to","","Slice up to the provided index, non-inclusive.",168,null],[11,"is_delimited","","Indicates where the stream is a single, delimited expression (e.g., `(a,b,c)` or\n`{a,b,c}`).",168,null],[11,"maybe_delimited","","Returns the inside of the delimited term as a new TokenStream.",168,null],[11,"is_ident","","Indicates if the stream is exactly one identifier.",168,null],[11,"maybe_ident","","Returns an identifier",168,null],[11,"eq_unspanned","","Compares two TokenStreams, checking equality without regarding span information.",168,null],[11,"as_delimited_stream","","Convert a vector of TokenTrees into a parentheses-delimited TokenStream.",168,{"inputs":[{"name":"vec"},{"name":"delimtoken"}],"output":{"name":"tokenstream"}}],[11,"next","","",169,null],[11,"next","","",170,null],[11,"index","","",168,null],[11,"index","","",167,null],[0,"visit","syntex_syntax","AST walker. Each overridden visit method has full control over what\nhappens with its node, it can do its own traversal of the node&#39;s children,\ncall `visit::walk_*` to apply the default traversal algorithm, or prevent\ndeeper traversal by doing nothing.",null,null],[4,"FnKind","syntex_syntax::visit","",null,null],[13,"ItemFn","","fn foo() or extern &quot;Abi&quot; fn foo()",171,null],[13,"Method","","fn foo(&amp;self)",171,null],[13,"Closure","","|x, y| {}",171,null],[5,"walk_opt_name","","",null,{"inputs":[{"name":"v"},{"name":"span"},{"name":"option"}],"output":null}],[5,"walk_opt_ident","","",null,{"inputs":[{"name":"v"},{"name":"span"},{"name":"option"}],"output":null}],[5,"walk_opt_sp_ident","","",null,{"inputs":[{"name":"v"},{"name":"option"}],"output":null}],[5,"walk_ident","","",null,{"inputs":[{"name":"v"},{"name":"span"},{"name":"ident"}],"output":null}],[5,"walk_crate","","",null,{"inputs":[{"name":"v"},{"name":"crate"}],"output":null}],[5,"walk_macro_def","","",null,{"inputs":[{"name":"v"},{"name":"macrodef"}],"output":null}],[5,"walk_mod","","",null,{"inputs":[{"name":"v"},{"name":"mod"}],"output":null}],[5,"walk_local","","",null,{"inputs":[{"name":"v"},{"name":"local"}],"output":null}],[5,"walk_lifetime","","",null,{"inputs":[{"name":"v"},{"name":"lifetime"}],"output":null}],[5,"walk_lifetime_def","","",null,{"inputs":[{"name":"v"},{"name":"lifetimedef"}],"output":null}],[5,"walk_poly_trait_ref","","",null,{"inputs":[{"name":"v"},{"name":"polytraitref"},{"name":"traitboundmodifier"}],"output":null}],[5,"walk_trait_ref","","",null,{"inputs":[{"name":"v"},{"name":"traitref"}],"output":null}],[5,"walk_item","","",null,{"inputs":[{"name":"v"},{"name":"item"}],"output":null}],[5,"walk_enum_def","","",null,{"inputs":[{"name":"v"},{"name":"enumdef"},{"name":"generics"},{"name":"nodeid"}],"output":null}],[5,"walk_variant","","",null,{"inputs":[{"name":"v"},{"name":"variant"},{"name":"generics"},{"name":"nodeid"}],"output":null}],[5,"walk_ty","","",null,{"inputs":[{"name":"v"},{"name":"ty"}],"output":null}],[5,"walk_path","","",null,{"inputs":[{"name":"v"},{"name":"path"}],"output":null}],[5,"walk_path_list_item","","",null,{"inputs":[{"name":"v"},{"name":"path"},{"name":"pathlistitem"}],"output":null}],[5,"walk_path_segment","","",null,{"inputs":[{"name":"v"},{"name":"span"},{"name":"pathsegment"}],"output":null}],[5,"walk_path_parameters","","",null,{"inputs":[{"name":"v"},{"name":"span"},{"name":"pathparameters"}],"output":null}],[5,"walk_assoc_type_binding","","",null,{"inputs":[{"name":"v"},{"name":"typebinding"}],"output":null}],[5,"walk_pat","","",null,{"inputs":[{"name":"v"},{"name":"pat"}],"output":null}],[5,"walk_foreign_item","","",null,{"inputs":[{"name":"v"},{"name":"foreignitem"}],"output":null}],[5,"walk_ty_param_bound","","",null,{"inputs":[{"name":"v"},{"name":"typarambound"}],"output":null}],[5,"walk_generics","","",null,{"inputs":[{"name":"v"},{"name":"generics"}],"output":null}],[5,"walk_fn_ret_ty","","",null,{"inputs":[{"name":"v"},{"name":"functionretty"}],"output":null}],[5,"walk_fn_decl","","",null,{"inputs":[{"name":"v"},{"name":"fndecl"}],"output":null}],[5,"walk_fn_kind","","",null,{"inputs":[{"name":"v"},{"name":"fnkind"}],"output":null}],[5,"walk_fn","","",null,{"inputs":[{"name":"v"},{"name":"fnkind"},{"name":"fndecl"},{"name":"block"},{"name":"span"}],"output":null}],[5,"walk_trait_item","","",null,{"inputs":[{"name":"v"},{"name":"traititem"}],"output":null}],[5,"walk_impl_item","","",null,{"inputs":[{"name":"v"},{"name":"implitem"}],"output":null}],[5,"walk_struct_def","","",null,{"inputs":[{"name":"v"},{"name":"variantdata"}],"output":null}],[5,"walk_struct_field","","",null,{"inputs":[{"name":"v"},{"name":"structfield"}],"output":null}],[5,"walk_block","","",null,{"inputs":[{"name":"v"},{"name":"block"}],"output":null}],[5,"walk_stmt","","",null,{"inputs":[{"name":"v"},{"name":"stmt"}],"output":null}],[5,"walk_mac","","",null,{"inputs":[{"name":"v"},{"name":"mac"}],"output":null}],[5,"walk_expr","","",null,{"inputs":[{"name":"v"},{"name":"expr"}],"output":null}],[5,"walk_arm","","",null,{"inputs":[{"name":"v"},{"name":"arm"}],"output":null}],[5,"walk_vis","","",null,{"inputs":[{"name":"v"},{"name":"visibility"}],"output":null}],[8,"Visitor","","Each method of the Visitor trait is a hook to be potentially\noverridden.  Each method&#39;s default implementation recursively visits\nthe substructure of the input via the corresponding `walk` method;\ne.g. the `visit_mod` method by default calls `visit::walk_mod`.",null,null],[11,"visit_name","","",172,null],[11,"visit_ident","","",172,null],[11,"visit_mod","","",172,null],[11,"visit_foreign_item","","",172,null],[11,"visit_item","","",172,null],[11,"visit_local","","",172,null],[11,"visit_block","","",172,null],[11,"visit_stmt","","",172,null],[11,"visit_arm","","",172,null],[11,"visit_pat","","",172,null],[11,"visit_expr","","",172,null],[11,"visit_expr_post","","",172,null],[11,"visit_ty","","",172,null],[11,"visit_generics","","",172,null],[11,"visit_fn","","",172,null],[11,"visit_trait_item","","",172,null],[11,"visit_impl_item","","",172,null],[11,"visit_trait_ref","","",172,null],[11,"visit_ty_param_bound","","",172,null],[11,"visit_poly_trait_ref","","",172,null],[11,"visit_variant_data","","",172,null],[11,"visit_struct_field","","",172,null],[11,"visit_enum_def","","",172,null],[11,"visit_variant","","",172,null],[11,"visit_lifetime","","",172,null],[11,"visit_lifetime_def","","",172,null],[11,"visit_mac","","",172,null],[11,"visit_path","","",172,null],[11,"visit_path_list_item","","",172,null],[11,"visit_path_segment","","",172,null],[11,"visit_path_parameters","","",172,null],[11,"visit_assoc_type_binding","","",172,null],[11,"visit_attribute","","",172,null],[11,"visit_macro_def","","",172,null],[11,"visit_vis","","",172,null],[11,"visit_fn_ret_ty","","",172,null],[11,"clone","","",171,null],[11,"eq","","",171,null],[11,"ne","","",171,null],[0,"print","syntex_syntax","",null,null],[0,"pp","syntex_syntax::print","This pretty-printer is a direct reimplementation of Philip Karlton&#39;s\nMesa pretty-printer, as described in appendix A of",null,null],[3,"BreakToken","syntex_syntax::print::pp","",null,null],[3,"BeginToken","","",null,null],[3,"PrintStackElem","","",null,null],[3,"Printer","","In case you do not have the paper, here is an explanation of what&#39;s going\non.",null,null],[12,"out","","",173,null],[4,"Breaks","","",null,null],[13,"Consistent","","",174,null],[13,"Inconsistent","","",174,null],[4,"Token","","",null,null],[13,"String","","",175,null],[13,"Break","","",175,null],[13,"Begin","","",175,null],[13,"End","","",175,null],[13,"Eof","","",175,null],[4,"PrintStackBreak","","",null,null],[13,"Fits","","",176,null],[13,"Broken","","",176,null],[5,"mk_printer","","",null,{"inputs":[{"name":"box"},{"name":"usize"}],"output":{"name":"printer"}}],[5,"rbox","","",null,{"inputs":[{"name":"printer"},{"name":"usize"},{"name":"breaks"}],"output":{"name":"result"}}],[5,"ibox","","",null,{"inputs":[{"name":"printer"},{"name":"usize"}],"output":{"name":"result"}}],[5,"cbox","","",null,{"inputs":[{"name":"printer"},{"name":"usize"}],"output":{"name":"result"}}],[5,"break_offset","","",null,{"inputs":[{"name":"printer"},{"name":"usize"},{"name":"isize"}],"output":{"name":"result"}}],[5,"end","","",null,{"inputs":[{"name":"printer"}],"output":{"name":"result"}}],[5,"eof","","",null,{"inputs":[{"name":"printer"}],"output":{"name":"result"}}],[5,"word","","",null,{"inputs":[{"name":"printer"},{"name":"str"}],"output":{"name":"result"}}],[5,"huge_word","","",null,{"inputs":[{"name":"printer"},{"name":"str"}],"output":{"name":"result"}}],[5,"zero_word","","",null,{"inputs":[{"name":"printer"},{"name":"str"}],"output":{"name":"result"}}],[5,"spaces","","",null,{"inputs":[{"name":"printer"},{"name":"usize"}],"output":{"name":"result"}}],[5,"zerobreak","","",null,{"inputs":[{"name":"printer"}],"output":{"name":"result"}}],[5,"space","","",null,{"inputs":[{"name":"printer"}],"output":{"name":"result"}}],[5,"hardbreak","","",null,{"inputs":[{"name":"printer"}],"output":{"name":"result"}}],[5,"hardbreak_tok_offset","","",null,{"inputs":[{"name":"isize"}],"output":{"name":"token"}}],[5,"hardbreak_tok","","",null,{"inputs":[],"output":{"name":"token"}}],[11,"clone","","",174,null],[11,"eq","","",174,null],[11,"clone","","",177,null],[11,"clone","","",178,null],[11,"clone","","",175,null],[11,"is_eof","","",175,null],[11,"is_hardbreak_tok","","",175,null],[11,"fmt","","",175,null],[11,"clone","","",176,null],[11,"clone","","",179,null],[11,"last_token","","",173,null],[11,"replace_last_token","","",173,null],[11,"pretty_print","","",173,null],[11,"check_stream","","",173,null],[11,"scan_push","","",173,null],[11,"scan_pop","","",173,null],[11,"scan_top","","",173,null],[11,"scan_pop_bottom","","",173,null],[11,"advance_right","","",173,null],[11,"advance_left","","",173,null],[11,"check_stack","","",173,null],[11,"print_newline","","",173,null],[11,"indent","","",173,null],[11,"get_top","","",173,null],[11,"print_str","","",173,null],[11,"print","","",173,null],[0,"pprust","syntex_syntax::print","",null,null],[3,"NoAnn","syntex_syntax::print::pprust","",null,null],[3,"CurrentCommentAndLiteral","","",null,null],[12,"cur_cmnt","","",180,null],[12,"cur_lit","","",180,null],[3,"State","","",null,null],[12,"s","","",181,null],[4,"AnnNode","","",null,null],[13,"NodeIdent","","",182,null],[13,"NodeName","","",182,null],[13,"NodeBlock","","",182,null],[13,"NodeItem","","",182,null],[13,"NodeSubItem","","",182,null],[13,"NodeExpr","","",182,null],[13,"NodePat","","",182,null],[5,"rust_printer","","",null,{"inputs":[{"name":"box"}],"output":{"name":"state"}}],[5,"rust_printer_annotated","","",null,{"inputs":[{"name":"box"},{"name":"ppann"}],"output":{"name":"state"}}],[5,"print_crate","","Requires you to pass an input filename and reader so that\nit can scan the input text for comments and literals to\ncopy forward.",null,{"inputs":[{"name":"codemap"},{"name":"handler"},{"name":"crate"},{"name":"string"},{"name":"read"},{"name":"box"},{"name":"ppann"},{"name":"bool"}],"output":{"name":"result"}}],[5,"to_string","","",null,{"inputs":[{"name":"f"}],"output":{"name":"string"}}],[5,"binop_to_string","","",null,{"inputs":[{"name":"binoptoken"}],"output":{"name":"str"}}],[5,"token_to_string","","",null,{"inputs":[{"name":"token"}],"output":{"name":"string"}}],[5,"ty_to_string","","",null,{"inputs":[{"name":"ty"}],"output":{"name":"string"}}],[5,"bounds_to_string","","",null,null],[5,"pat_to_string","","",null,{"inputs":[{"name":"pat"}],"output":{"name":"string"}}],[5,"arm_to_string","","",null,{"inputs":[{"name":"arm"}],"output":{"name":"string"}}],[5,"expr_to_string","","",null,{"inputs":[{"name":"expr"}],"output":{"name":"string"}}],[5,"lifetime_to_string","","",null,{"inputs":[{"name":"lifetime"}],"output":{"name":"string"}}],[5,"tt_to_string","","",null,{"inputs":[{"name":"tokentree"}],"output":{"name":"string"}}],[5,"tts_to_string","","",null,null],[5,"stmt_to_string","","",null,{"inputs":[{"name":"stmt"}],"output":{"name":"string"}}],[5,"attr_to_string","","",null,{"inputs":[{"name":"attribute"}],"output":{"name":"string"}}],[5,"item_to_string","","",null,{"inputs":[{"name":"item"}],"output":{"name":"string"}}],[5,"impl_item_to_string","","",null,{"inputs":[{"name":"implitem"}],"output":{"name":"string"}}],[5,"trait_item_to_string","","",null,{"inputs":[{"name":"traititem"}],"output":{"name":"string"}}],[5,"generics_to_string","","",null,{"inputs":[{"name":"generics"}],"output":{"name":"string"}}],[5,"where_clause_to_string","","",null,{"inputs":[{"name":"whereclause"}],"output":{"name":"string"}}],[5,"fn_block_to_string","","",null,{"inputs":[{"name":"fndecl"}],"output":{"name":"string"}}],[5,"path_to_string","","",null,{"inputs":[{"name":"path"}],"output":{"name":"string"}}],[5,"ident_to_string","","",null,{"inputs":[{"name":"ident"}],"output":{"name":"string"}}],[5,"fun_to_string","","",null,{"inputs":[{"name":"fndecl"},{"name":"unsafety"},{"name":"constness"},{"name":"ident"},{"name":"generics"}],"output":{"name":"string"}}],[5,"block_to_string","","",null,{"inputs":[{"name":"block"}],"output":{"name":"string"}}],[5,"meta_list_item_to_string","","",null,{"inputs":[{"name":"nestedmetaitem"}],"output":{"name":"string"}}],[5,"meta_item_to_string","","",null,{"inputs":[{"name":"metaitem"}],"output":{"name":"string"}}],[5,"attribute_to_string","","",null,{"inputs":[{"name":"attribute"}],"output":{"name":"string"}}],[5,"lit_to_string","","",null,{"inputs":[{"name":"lit"}],"output":{"name":"string"}}],[5,"variant_to_string","","",null,{"inputs":[{"name":"variant"}],"output":{"name":"string"}}],[5,"arg_to_string","","",null,{"inputs":[{"name":"arg"}],"output":{"name":"string"}}],[5,"mac_to_string","","",null,{"inputs":[{"name":"mac"}],"output":{"name":"string"}}],[5,"visibility_qualified","","",null,{"inputs":[{"name":"visibility"},{"name":"str"}],"output":{"name":"string"}}],[17,"INDENT_UNIT","","",null,null],[17,"DEFAULT_COLUMNS","","",null,null],[8,"PpAnn","","",null,null],[11,"pre","","",183,null],[11,"post","","",183,null],[8,"PrintState","","",null,null],[10,"writer","","",184,null],[10,"boxes","","",184,null],[10,"comments","","",184,null],[10,"cur_cmnt_and_lit","","",184,null],[10,"literals","","",184,null],[11,"word_space","","",184,null],[11,"popen","","",184,null],[11,"pclose","","",184,null],[11,"is_begin","","",184,null],[11,"is_end","","",184,null],[11,"is_bol","","",184,null],[11,"hardbreak_if_not_bol","","",184,null],[11,"rbox","","",184,null],[11,"ibox","","",184,null],[11,"end","","",184,null],[11,"commasep","","",184,null],[11,"next_lit","","",184,null],[11,"maybe_print_comment","","",184,null],[11,"print_comment","","",184,null],[11,"next_comment","","",184,null],[11,"print_literal","","",184,null],[11,"print_string","","",184,null],[11,"print_inner_attributes","","",184,null],[11,"print_inner_attributes_no_trailing_hardbreak","","",184,null],[11,"print_outer_attributes","","",184,null],[11,"print_inner_attributes_inline","","",184,null],[11,"print_outer_attributes_inline","","",184,null],[11,"print_either_attributes","","",184,null],[11,"print_attribute","","",184,null],[11,"print_attribute_inline","","",184,null],[11,"print_meta_list_item","","",184,null],[11,"print_meta_item","","",184,null],[11,"space_if_not_bol","","",184,null],[11,"nbsp","","",184,null],[11,"clone","","",185,null],[11,"clone","","",180,null],[11,"new_from_input","","",181,{"inputs":[{"name":"codemap"},{"name":"handler"},{"name":"string"},{"name":"read"},{"name":"box"},{"name":"ppann"},{"name":"bool"}],"output":{"name":"state"}}],[11,"new","","",181,{"inputs":[{"name":"codemap"},{"name":"box"},{"name":"ppann"},{"name":"option"},{"name":"option"}],"output":{"name":"state"}}],[11,"writer","","",181,null],[11,"boxes","","",181,null],[11,"comments","","",181,null],[11,"cur_cmnt_and_lit","","",181,null],[11,"literals","","",181,null],[11,"cbox","","",181,null],[11,"word_nbsp","","",181,null],[11,"head","","",181,null],[11,"bopen","","",181,null],[11,"bclose_","","",181,null],[11,"bclose_maybe_open","","",181,null],[11,"bclose","","",181,null],[11,"in_cbox","","",181,null],[11,"break_offset_if_not_bol","","",181,null],[11,"synth_comment","","",181,null],[11,"commasep_cmnt","","",181,null],[11,"commasep_exprs","","",181,null],[11,"print_mod","","",181,null],[11,"print_foreign_mod","","",181,null],[11,"print_opt_lifetime","","",181,null],[11,"print_type","","",181,null],[11,"print_foreign_item","","",181,null],[11,"print_item","","Pretty-print an item",181,null],[11,"print_enum_def","","",181,null],[11,"print_variants","","",181,null],[11,"print_visibility","","",181,null],[11,"print_struct","","",181,null],[11,"print_tt","","This doesn&#39;t deserve to be called &quot;pretty&quot; printing, but it should be\nmeaning-preserving. A quick hack that might help would be to look at the\nspans embedded in the TTs to decide where to put spaces and newlines.\nBut it&#39;d be better to parse these according to the grammar of the\nappropriate macro, transcribe back into the grammar we just parsed from,\nand then pretty-print the resulting AST nodes (so, e.g., we print\nexpression arguments as expressions). It can be done! I think.",181,null],[11,"print_tts","","",181,null],[11,"print_variant","","",181,null],[11,"print_method_sig","","",181,null],[11,"print_trait_item","","",181,null],[11,"print_impl_item","","",181,null],[11,"print_stmt","","",181,null],[11,"print_block","","",181,null],[11,"print_block_unclosed","","",181,null],[11,"print_block_unclosed_with_attrs","","",181,null],[11,"print_block_unclosed_indent","","",181,null],[11,"print_block_with_attrs","","",181,null],[11,"print_block_maybe_unclosed","","",181,null],[11,"print_if","","",181,null],[11,"print_if_let","","",181,null],[11,"print_mac","","",181,null],[11,"check_expr_bin_needs_paren","","",181,null],[11,"print_expr_maybe_paren","","",181,null],[11,"print_expr","","",181,null],[11,"print_local_decl","","",181,null],[11,"print_ident","","",181,null],[11,"print_usize","","",181,null],[11,"print_name","","",181,null],[11,"print_for_decl","","",181,null],[11,"print_pat","","",181,null],[11,"print_fn","","",181,null],[11,"print_fn_args_and_ret","","",181,null],[11,"print_fn_block_args","","",181,null],[11,"print_capture_clause","","",181,null],[11,"print_bounds","","",181,null],[11,"print_lifetime","","",181,null],[11,"print_lifetime_bounds","","",181,null],[11,"print_generics","","",181,null],[11,"print_ty_param","","",181,null],[11,"print_where_clause","","",181,null],[11,"print_view_path","","",181,null],[11,"print_mutability","","",181,null],[11,"print_mt","","",181,null],[11,"print_arg","","",181,null],[11,"print_fn_output","","",181,null],[11,"print_ty_fn","","",181,null],[11,"maybe_print_trailing_comment","","",181,null],[11,"print_remaining_comments","","",181,null],[11,"print_opt_abi_and_extern_if_nondefault","","",181,null],[11,"print_extern_opt_abi","","",181,null],[11,"print_fn_header_info","","",181,null],[11,"print_unsafety","","",181,null],[0,"ext","syntex_syntax","",null,null],[0,"base","syntex_syntax::ext","",null,null],[3,"MacEager","syntex_syntax::ext::base","`MacResult` implementation for the common case where you&#39;ve already\nbuilt each form of AST that you might return.",null,null],[12,"expr","","",186,null],[12,"pat","","",186,null],[12,"items","","",186,null],[12,"impl_items","","",186,null],[12,"trait_items","","",186,null],[12,"stmts","","",186,null],[12,"ty","","",186,null],[3,"DummyResult","","Fill-in macro expansion result, to allow compilation to continue\nafter hitting errors.",null,null],[3,"BlockInfo","","",null,null],[12,"macros_escape","","Should macros escape from this scope?",187,null],[3,"DummyMacroLoader","","",null,null],[3,"ExtCtxt","","One of these is made during expansion and incrementally updated as we go;\nwhen a macro expansion occurs, the resulting nodes have the backtrace()\n-&gt; expn_info of their expansion context stored into their span.",null,null],[12,"parse_sess","","",188,null],[12,"cfg","","",188,null],[12,"backtrace","","",188,null],[12,"ecfg","","",188,null],[12,"crate_root","","",188,null],[12,"loader","","",188,null],[12,"mod_path","","",188,null],[12,"exported_macros","","",188,null],[12,"syntax_env","","",188,null],[12,"recursion_count","","",188,null],[12,"filename","","",188,null],[12,"mod_path_stack","","",188,null],[12,"in_block","","",188,null],[3,"SyntaxEnv","","In order to have some notion of scoping for macros,\nwe want to implement the notion of a transformation\nenvironment.",null,null],[12,"names","","All bang-style macro/extension names\nencountered so far; to be used for diagnostics in resolve",189,null],[4,"Annotatable","","",null,null],[13,"Item","","",190,null],[13,"TraitItem","","",190,null],[13,"ImplItem","","",190,null],[4,"SyntaxExtension","","An enum representing the different kinds of syntax extensions.",null,null],[13,"MultiDecorator","","A syntax extension that is attached to an item and creates new items\nbased upon it.",191,null],[13,"MultiModifier","","A syntax extension that is attached to an item and modifies it\nin-place. More flexible version than Modifier.",191,null],[13,"NormalTT","","A normal, function-like syntax extension.",191,null],[13,"IdentTT","","A function-like syntax extension that has an extra ident before\nthe block.",191,null],[13,"MacroRulesTT","","Represents `macro_rules!` itself.",191,null],[5,"expr_to_string","","Extract a string literal from the macro expanded version of `expr`,\nemitting `err_msg` if `expr` is not a string literal. This does not stop\ncompilation on error, merely emits a non-fatal error and returns None.",null,{"inputs":[{"name":"extctxt"},{"name":"p"},{"name":"str"}],"output":{"name":"option"}}],[5,"check_zero_tts","","Non-fatally assert that `tts` is empty. Note that this function\nreturns even when `tts` is non-empty, macros that *need* to stop\ncompilation should call\n`cx.parse_sess.span_diagnostic.abort_if_errors()` (this should be\ndone as rarely as possible).",null,null],[5,"get_single_str_from_tts","","Extract the string literal from the first token of `tts`. If this\nis not a string literal, emit an error and return None.",null,null],[5,"get_exprs_from_tts","","Extract comma-separated expressions from `tts`. If there is a\nparsing error, emit a non-fatal error and return None.",null,null],[6,"MacroExpanderFn","","",null,null],[6,"IdentMacroExpanderFn","","",null,null],[6,"NamedSyntaxExtension","","",null,null],[8,"MultiItemDecorator","","",null,null],[10,"expand","","",192,null],[8,"MultiItemModifier","","",null,null],[10,"expand","","",193,null],[8,"TTMacroExpander","","Represents a thing that maps token trees to Macro Results",null,null],[10,"expand","","",194,null],[8,"IdentMacroExpander","","",null,null],[10,"expand","","",195,null],[8,"MacResult","","The result of a macro expansion. The return values of the various\nmethods are spliced into the AST at the callsite of the macro.",null,null],[11,"make_expr","","Create an expression.",196,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_items","","Create zero or more items.",196,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_impl_items","","Create zero or more impl items.",196,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_trait_items","","Create zero or more trait items.",196,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_pat","","Create a pattern.",196,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_stmts","","Create zero or more statements.",196,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_ty","","",196,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[8,"MacroLoader","","",null,null],[10,"load_crate","","",197,null],[11,"fmt","","",190,null],[11,"clone","","",190,null],[11,"attrs","","",190,null],[11,"map_attrs","","",190,null],[11,"expect_item","","",190,null],[11,"map_item_or","","",190,null],[11,"expect_trait_item","","",190,null],[11,"expect_impl_item","","",190,null],[11,"fold_with","","",190,null],[11,"into","","",190,null],[11,"default","","",186,{"inputs":[],"output":{"name":"maceager"}}],[11,"expr","","",186,{"inputs":[{"name":"p"}],"output":{"name":"box"}}],[11,"pat","","",186,{"inputs":[{"name":"p"}],"output":{"name":"box"}}],[11,"items","","",186,{"inputs":[{"name":"smallvector"}],"output":{"name":"box"}}],[11,"impl_items","","",186,{"inputs":[{"name":"smallvector"}],"output":{"name":"box"}}],[11,"trait_items","","",186,{"inputs":[{"name":"smallvector"}],"output":{"name":"box"}}],[11,"stmts","","",186,{"inputs":[{"name":"smallvector"}],"output":{"name":"box"}}],[11,"ty","","",186,{"inputs":[{"name":"p"}],"output":{"name":"box"}}],[11,"make_expr","","",186,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_items","","",186,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_impl_items","","",186,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_trait_items","","",186,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_stmts","","",186,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_pat","","",186,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_ty","","",186,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"clone","","",198,null],[11,"any","","Create a default MacResult that can be anything.",198,{"inputs":[{"name":"span"}],"output":{"name":"box"}}],[11,"expr","","Create a default MacResult that can only be an expression.",198,{"inputs":[{"name":"span"}],"output":{"name":"box"}}],[11,"raw_expr","","A plain dummy expression.",198,{"inputs":[{"name":"span"}],"output":{"name":"p"}}],[11,"raw_pat","","A plain dummy pattern.",198,{"inputs":[{"name":"span"}],"output":{"name":"pat"}}],[11,"raw_ty","","",198,{"inputs":[{"name":"span"}],"output":{"name":"p"}}],[11,"make_expr","","",198,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_pat","","",198,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_items","","",198,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_impl_items","","",198,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_trait_items","","",198,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_stmts","","",198,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"make_ty","","",198,{"inputs":[{"name":"box"}],"output":{"name":"option"}}],[11,"new","","",187,{"inputs":[],"output":{"name":"blockinfo"}}],[11,"load_crate","","",199,null],[11,"new","","",188,{"inputs":[{"name":"parsesess"},{"name":"crateconfig"},{"name":"expansionconfig"},{"name":"macroloader"}],"output":{"name":"extctxt"}}],[11,"expander","","Returns a `Folder` for deeply expanding all macros in an AST node.",188,null],[11,"new_parser_from_tts","","",188,null],[11,"codemap","","",188,null],[11,"parse_sess","","",188,null],[11,"cfg","","",188,null],[11,"call_site","","",188,null],[11,"backtrace","","",188,null],[11,"expansion_cause","","Returns span for the macro which originally caused the current expansion to happen.",188,null],[11,"mod_push","","",188,null],[11,"mod_pop","","",188,null],[11,"mod_path","","",188,null],[11,"bt_push","","",188,null],[11,"bt_pop","","",188,null],[11,"insert_macro","","",188,null],[11,"struct_span_warn","","",188,null],[11,"struct_span_err","","",188,null],[11,"struct_span_fatal","","",188,null],[11,"span_fatal","","Emit `msg` attached to `sp`, and stop compilation immediately.",188,null],[11,"span_err","","Emit `msg` attached to `sp`, without immediately stopping\ncompilation.",188,null],[11,"span_warn","","",188,null],[11,"span_unimpl","","",188,null],[11,"span_bug","","",188,null],[11,"bug","","",188,null],[11,"trace_macros","","",188,null],[11,"set_trace_macros","","",188,null],[11,"ident_of","","",188,null],[11,"std_path","","",188,null],[11,"name_of","","",188,null],[11,"suggest_macro_name","","",188,null],[11,"push_frame","","",189,null],[11,"pop_frame","","",189,null],[11,"find","","",189,null],[11,"insert","","",189,null],[11,"info","","",189,null],[11,"is_crate_root","","",189,null],[0,"build","syntex_syntax::ext","",null,null],[8,"AstBuilder","syntex_syntax::ext::build","",null,null],[10,"path","","",200,null],[10,"path_ident","","",200,null],[10,"path_global","","",200,null],[10,"path_all","","",200,null],[10,"qpath","","",200,null],[10,"qpath_all","","",200,null],[10,"ty_mt","","",200,null],[10,"ty","","",200,null],[10,"ty_path","","",200,null],[10,"ty_sum","","",200,null],[10,"ty_ident","","",200,null],[10,"ty_rptr","","",200,null],[10,"ty_ptr","","",200,null],[10,"ty_option","","",200,null],[10,"ty_infer","","",200,null],[10,"ty_vars","","",200,null],[10,"ty_vars_global","","",200,null],[10,"typaram","","",200,null],[10,"trait_ref","","",200,null],[10,"poly_trait_ref","","",200,null],[10,"typarambound","","",200,null],[10,"lifetime","","",200,null],[10,"lifetime_def","","",200,null],[10,"stmt_expr","","",200,null],[10,"stmt_semi","","",200,null],[10,"stmt_let","","",200,null],[10,"stmt_let_typed","","",200,null],[10,"stmt_item","","",200,null],[10,"block","","",200,null],[10,"block_expr","","",200,null],[10,"expr","","",200,null],[10,"expr_path","","",200,null],[10,"expr_qpath","","",200,null],[10,"expr_ident","","",200,null],[10,"expr_self","","",200,null],[10,"expr_binary","","",200,null],[10,"expr_deref","","",200,null],[10,"expr_unary","","",200,null],[10,"expr_addr_of","","",200,null],[10,"expr_mut_addr_of","","",200,null],[10,"expr_field_access","","",200,null],[10,"expr_tup_field_access","","",200,null],[10,"expr_call","","",200,null],[10,"expr_call_ident","","",200,null],[10,"expr_call_global","","",200,null],[10,"expr_method_call","","",200,null],[10,"expr_block","","",200,null],[10,"expr_cast","","",200,null],[10,"field_imm","","",200,null],[10,"expr_struct","","",200,null],[10,"expr_struct_ident","","",200,null],[10,"expr_lit","","",200,null],[10,"expr_usize","","",200,null],[10,"expr_isize","","",200,null],[10,"expr_u8","","",200,null],[10,"expr_u32","","",200,null],[10,"expr_bool","","",200,null],[10,"expr_vec","","",200,null],[10,"expr_vec_ng","","",200,null],[10,"expr_vec_slice","","",200,null],[10,"expr_str","","",200,null],[10,"expr_some","","",200,null],[10,"expr_none","","",200,null],[10,"expr_break","","",200,null],[10,"expr_tuple","","",200,null],[10,"expr_fail","","",200,null],[10,"expr_unreachable","","",200,null],[10,"expr_ok","","",200,null],[10,"expr_err","","",200,null],[10,"expr_try","","",200,null],[10,"pat","","",200,null],[10,"pat_wild","","",200,null],[10,"pat_lit","","",200,null],[10,"pat_ident","","",200,null],[10,"pat_ident_binding_mode","","",200,null],[10,"pat_path","","",200,null],[10,"pat_tuple_struct","","",200,null],[10,"pat_struct","","",200,null],[10,"pat_tuple","","",200,null],[10,"pat_some","","",200,null],[10,"pat_none","","",200,null],[10,"pat_ok","","",200,null],[10,"pat_err","","",200,null],[10,"arm","","",200,null],[10,"arm_unreachable","","",200,null],[10,"expr_match","","",200,null],[10,"expr_if","","",200,null],[10,"expr_loop","","",200,null],[10,"lambda_fn_decl","","",200,null],[10,"lambda","","",200,null],[10,"lambda0","","",200,null],[10,"lambda1","","",200,null],[10,"lambda_expr","","",200,null],[10,"lambda_expr_0","","",200,null],[10,"lambda_expr_1","","",200,null],[10,"lambda_stmts","","",200,null],[10,"lambda_stmts_0","","",200,null],[10,"lambda_stmts_1","","",200,null],[10,"item","","",200,null],[10,"arg","","",200,null],[10,"fn_decl","","",200,null],[10,"item_fn_poly","","",200,null],[10,"item_fn","","",200,null],[10,"variant","","",200,null],[10,"item_enum_poly","","",200,null],[10,"item_enum","","",200,null],[10,"item_struct_poly","","",200,null],[10,"item_struct","","",200,null],[10,"item_mod","","",200,null],[10,"item_static","","",200,null],[10,"item_const","","",200,null],[10,"item_ty_poly","","",200,null],[10,"item_ty","","",200,null],[10,"attribute","","",200,null],[10,"meta_word","","",200,null],[10,"meta_list_item_word","","",200,null],[10,"meta_list","","",200,null],[10,"meta_name_value","","",200,null],[10,"item_use","","",200,null],[10,"item_use_simple","","",200,null],[10,"item_use_simple_","","",200,null],[10,"item_use_list","","",200,null],[10,"item_use_glob","","",200,null],[11,"path","syntex_syntax::ext::base","",188,null],[11,"path_ident","","",188,null],[11,"path_global","","",188,null],[11,"path_all","","",188,null],[11,"qpath","","Constructs a qualified path.",188,null],[11,"qpath_all","","Constructs a qualified path.",188,null],[11,"ty_mt","","",188,null],[11,"ty","","",188,null],[11,"ty_path","","",188,null],[11,"ty_sum","","",188,null],[11,"ty_ident","","",188,null],[11,"ty_rptr","","",188,null],[11,"ty_ptr","","",188,null],[11,"ty_option","","",188,null],[11,"ty_infer","","",188,null],[11,"typaram","","",188,null],[11,"ty_vars","","",188,null],[11,"ty_vars_global","","",188,null],[11,"trait_ref","","",188,null],[11,"poly_trait_ref","","",188,null],[11,"typarambound","","",188,null],[11,"lifetime","","",188,null],[11,"lifetime_def","","",188,null],[11,"stmt_expr","","",188,null],[11,"stmt_semi","","",188,null],[11,"stmt_let","","",188,null],[11,"stmt_let_typed","","",188,null],[11,"stmt_item","","",188,null],[11,"block_expr","","",188,null],[11,"block","","",188,null],[11,"expr","","",188,null],[11,"expr_path","","",188,null],[11,"expr_qpath","","Constructs a QPath expression.",188,null],[11,"expr_ident","","",188,null],[11,"expr_self","","",188,null],[11,"expr_binary","","",188,null],[11,"expr_deref","","",188,null],[11,"expr_unary","","",188,null],[11,"expr_field_access","","",188,null],[11,"expr_tup_field_access","","",188,null],[11,"expr_addr_of","","",188,null],[11,"expr_mut_addr_of","","",188,null],[11,"expr_call","","",188,null],[11,"expr_call_ident","","",188,null],[11,"expr_call_global","","",188,null],[11,"expr_method_call","","",188,null],[11,"expr_block","","",188,null],[11,"field_imm","","",188,null],[11,"expr_struct","","",188,null],[11,"expr_struct_ident","","",188,null],[11,"expr_lit","","",188,null],[11,"expr_usize","","",188,null],[11,"expr_isize","","",188,null],[11,"expr_u32","","",188,null],[11,"expr_u8","","",188,null],[11,"expr_bool","","",188,null],[11,"expr_vec","","",188,null],[11,"expr_vec_ng","","",188,null],[11,"expr_vec_slice","","",188,null],[11,"expr_str","","",188,null],[11,"expr_cast","","",188,null],[11,"expr_some","","",188,null],[11,"expr_none","","",188,null],[11,"expr_break","","",188,null],[11,"expr_tuple","","",188,null],[11,"expr_fail","","",188,null],[11,"expr_unreachable","","",188,null],[11,"expr_ok","","",188,null],[11,"expr_err","","",188,null],[11,"expr_try","","",188,null],[11,"pat","","",188,null],[11,"pat_wild","","",188,null],[11,"pat_lit","","",188,null],[11,"pat_ident","","",188,null],[11,"pat_ident_binding_mode","","",188,null],[11,"pat_path","","",188,null],[11,"pat_tuple_struct","","",188,null],[11,"pat_struct","","",188,null],[11,"pat_tuple","","",188,null],[11,"pat_some","","",188,null],[11,"pat_none","","",188,null],[11,"pat_ok","","",188,null],[11,"pat_err","","",188,null],[11,"arm","","",188,null],[11,"arm_unreachable","","",188,null],[11,"expr_match","","",188,null],[11,"expr_if","","",188,null],[11,"expr_loop","","",188,null],[11,"lambda_fn_decl","","",188,null],[11,"lambda","","",188,null],[11,"lambda0","","",188,null],[11,"lambda1","","",188,null],[11,"lambda_expr","","",188,null],[11,"lambda_expr_0","","",188,null],[11,"lambda_expr_1","","",188,null],[11,"lambda_stmts","","",188,null],[11,"lambda_stmts_0","","",188,null],[11,"lambda_stmts_1","","",188,null],[11,"arg","","",188,null],[11,"fn_decl","","",188,null],[11,"item","","",188,null],[11,"item_fn_poly","","",188,null],[11,"item_fn","","",188,null],[11,"variant","","",188,null],[11,"item_enum_poly","","",188,null],[11,"item_enum","","",188,null],[11,"item_struct","","",188,null],[11,"item_struct_poly","","",188,null],[11,"item_mod","","",188,null],[11,"item_static","","",188,null],[11,"item_const","","",188,null],[11,"item_ty_poly","","",188,null],[11,"item_ty","","",188,null],[11,"attribute","","",188,null],[11,"meta_word","","",188,null],[11,"meta_list_item_word","","",188,null],[11,"meta_list","","",188,null],[11,"meta_name_value","","",188,null],[11,"item_use","","",188,null],[11,"item_use_simple","","",188,null],[11,"item_use_simple_","","",188,null],[11,"item_use_list","","",188,null],[11,"item_use_glob","","",188,null],[0,"decorator","syntex_syntax::ext","",null,null],[5,"expand_annotatable","syntex_syntax::ext::decorator","",null,{"inputs":[{"name":"annotatable"},{"name":"macroexpander"}],"output":{"name":"smallvector"}}],[0,"env","syntex_syntax::ext","",null,null],[5,"expand_option_env","syntex_syntax::ext::env","",null,null],[5,"expand_env","","",null,null],[0,"expand","syntex_syntax::ext","",null,null],[3,"MacroExpander","syntex_syntax::ext::expand","A tree-folder that performs macro expansion",null,null],[12,"cx","","",201,null],[12,"single_step","","",201,null],[12,"keep_macs","","",201,null],[3,"ExpansionConfig","","",null,null],[12,"crate_name","","",202,null],[12,"features","","",202,null],[12,"recursion_limit","","",202,null],[12,"trace_mac","","",202,null],[12,"should_test","","",202,null],[5,"expand_expr","","",null,{"inputs":[{"name":"expr"},{"name":"macroexpander"}],"output":{"name":"p"}}],[5,"expand_item","","",null,{"inputs":[{"name":"p"},{"name":"macroexpander"}],"output":{"name":"smallvector"}}],[5,"expand_multi_modified","","",null,{"inputs":[{"name":"annotatable"},{"name":"macroexpander"}],"output":{"name":"smallvector"}}],[5,"expand_type","","",null,{"inputs":[{"name":"p"},{"name":"macroexpander"}],"output":{"name":"p"}}],[5,"expand_crate","","",null,{"inputs":[{"name":"extctxt"},{"name":"vec"},{"name":"crate"}],"output":{"name":"crate"}}],[5,"expand_crate_with_expander","","",null,{"inputs":[{"name":"macroexpander"},{"name":"vec"},{"name":"crate"}],"output":{"name":"crate"}}],[11,"new","","",201,{"inputs":[{"name":"extctxt"},{"name":"bool"},{"name":"bool"}],"output":{"name":"macroexpander"}}],[11,"fold_crate","","",201,null],[11,"fold_expr","","",201,null],[11,"fold_opt_expr","","",201,null],[11,"fold_pat","","",201,null],[11,"fold_item","","",201,null],[11,"fold_stmt","","",201,null],[11,"fold_block","","",201,null],[11,"fold_trait_item","","",201,null],[11,"fold_impl_item","","",201,null],[11,"fold_ty","","",201,null],[11,"default","","",202,{"inputs":[{"name":"string"}],"output":{"name":"expansionconfig"}}],[11,"enable_quotes","","",202,null],[11,"enable_asm","","",202,null],[11,"enable_log_syntax","","",202,null],[11,"enable_concat_idents","","",202,null],[11,"enable_trace_macros","","",202,null],[11,"enable_allow_internal_unstable","","",202,null],[11,"enable_custom_derive","","",202,null],[11,"enable_pushpop_unsafe","","",202,null],[0,"hygiene","syntex_syntax::ext","Machinery for hygienic macros, inspired by the MTWT[1] paper.",null,null],[3,"SyntaxContext","syntex_syntax::ext::hygiene","A SyntaxContext represents a chain of macro expansions (represented by marks).",null,null],[12,"0","","",203,null],[3,"SyntaxContextData","","",null,null],[12,"outer_mark","","",204,null],[12,"prev_ctxt","","",204,null],[3,"Mark","","A mark represents a unique id associated with a macro expansion.",null,null],[5,"reset_hygiene_data","","",null,{"inputs":[],"output":null}],[11,"clone","","",203,null],[11,"eq","","",203,null],[11,"ne","","",203,null],[11,"hash","","",203,null],[11,"encode","","",203,null],[11,"decode","","",203,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"default","","",203,{"inputs":[],"output":{"name":"syntaxcontext"}}],[11,"clone","","",204,null],[11,"clone","","",205,null],[11,"eq","","",205,null],[11,"ne","","",205,null],[11,"hash","","",205,null],[11,"fmt","","",205,null],[11,"default","","",205,{"inputs":[],"output":{"name":"mark"}}],[11,"fresh","","",205,{"inputs":[],"output":{"name":"self"}}],[11,"empty","","",203,{"inputs":[],"output":{"name":"self"}}],[11,"data","","",203,null],[11,"apply_mark","","Extend a syntax context with a given mark",203,null],[11,"source","","If `ident` is macro expanded, return the source ident from the macro definition\nand the mark of the expansion that created the macro definition.",203,null],[11,"fmt","","",203,null],[0,"proc_macro_shim","syntex_syntax::ext","This is a shim file to ease the transition to the final procedural macro interface for\nMacros 2.0. It currently exposes the `libsyntax` operations that the quasiquoter&#39;s\noutput needs to compile correctly, along with the following operators:",null,null],[5,"build_block_emitter","syntex_syntax::ext::proc_macro_shim","Take a `ExtCtxt`, `Span`, and `TokenStream`, and produce a Macro Result that parses\nthe TokenStream as a block and returns it as an `Expr`.",null,{"inputs":[{"name":"extctxt"},{"name":"span"},{"name":"tokenstream"}],"output":{"name":"box"}}],[0,"prelude","","",null,null],[17,"DUMMY_SP","syntex_syntax::ext::proc_macro_shim::prelude","",null,null],[3,"Span","","Spans represent a region of code, used for error reporting. Positions in spans\nare *absolute* positions from the beginning of the codemap, not positions\nrelative to FileMaps. Methods on the CodeMap can be used to relate spans back\nto the original source.\nYou must be careful if the span crosses more than one file - you will not be\nable to use many of the functions on spans in codemap and you cannot assume\nthat the length of the span = hi - lo; there may be space in the BytePos\nrange between files.",null,null],[12,"lo","","",206,null],[12,"hi","","",206,null],[12,"expn_id","","Information about where the macro came from, if this piece of\ncode was created by a macro expansion.",206,null],[0,"quote","syntex_syntax::ext","",null,null],[5,"parse_expr_panic","syntex_syntax::ext::quote","",null,{"inputs":[{"name":"parser"}],"output":{"name":"p"}}],[5,"parse_item_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"option"}}],[5,"parse_pat_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"p"}}],[5,"parse_arm_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"arm"}}],[5,"parse_ty_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"p"}}],[5,"parse_stmt_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"option"}}],[5,"parse_attribute_panic","","",null,{"inputs":[{"name":"parser"},{"name":"bool"}],"output":{"name":"attribute"}}],[5,"parse_arg_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"arg"}}],[5,"parse_block_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"p"}}],[5,"parse_meta_item_panic","","",null,{"inputs":[{"name":"parser"}],"output":{"name":"p"}}],[5,"parse_path_panic","","",null,{"inputs":[{"name":"parser"},{"name":"pathstyle"}],"output":{"name":"path"}}],[5,"expand_quote_tokens","","",null,null],[5,"expand_quote_expr","","",null,null],[5,"expand_quote_item","","",null,null],[5,"expand_quote_pat","","",null,null],[5,"expand_quote_arm","","",null,null],[5,"expand_quote_ty","","",null,null],[5,"expand_quote_stmt","","",null,null],[5,"expand_quote_attr","","",null,null],[5,"expand_quote_arg","","",null,null],[5,"expand_quote_block","","",null,null],[5,"expand_quote_meta_item","","",null,null],[5,"expand_quote_path","","",null,null],[5,"expand_quote_matcher","","",null,null],[0,"rt","","Quasiquoting works via token trees.",null,null],[3,"BytePos","syntex_syntax::ext::quote::rt","A byte offset. Keep this small (currently 32-bits), as AST contains\na lot of them.",null,null],[12,"0","","",207,null],[3,"Span","","Spans represent a region of code, used for error reporting. Positions in spans\nare *absolute* positions from the beginning of the codemap, not positions\nrelative to FileMaps. Methods on the CodeMap can be used to relate spans back\nto the original source.\nYou must be careful if the span crosses more than one file - you will not be\nable to use many of the functions on spans in codemap and you cannot assume\nthat the length of the span = hi - lo; there may be space in the BytePos\nrange between files.",null,null],[12,"lo","","",206,null],[12,"hi","","",206,null],[12,"expn_id","","Information about where the macro came from, if this piece of\ncode was created by a macro expansion.",206,null],[17,"DUMMY_SP","","",null,null],[8,"ToTokens","","",null,null],[10,"to_tokens","","",208,null],[8,"ExtParseUtils","","",null,null],[10,"parse_item","","",209,null],[10,"parse_expr","","",209,null],[10,"parse_stmt","","",209,null],[10,"parse_tts","","",209,null],[11,"to_tokens","syntex_syntax::tokenstream","",166,null],[11,"to_tokens","syntex_syntax::codemap","",118,null],[11,"to_tokens","syntex_syntax::ast","",18,null],[11,"to_tokens","","",21,null],[11,"to_tokens","","",47,null],[11,"to_tokens","","",32,null],[11,"to_tokens","","",26,null],[11,"to_tokens","","",27,null],[11,"to_tokens","syntex_syntax::ptr","",162,null],[11,"to_tokens","syntex_syntax::ast","",45,null],[11,"to_tokens","syntex_syntax::ptr","",162,null],[11,"to_tokens","syntex_syntax::ast","",44,null],[11,"to_tokens","","",35,null],[11,"to_tokens","syntex_syntax::ptr","",162,null],[11,"to_tokens","","",162,null],[11,"to_tokens","syntex_syntax::ast","",37,null],[11,"to_tokens","","",51,null],[11,"to_tokens","syntex_syntax::ptr","",162,null],[11,"to_tokens","","",162,null],[11,"to_tokens","syntex_syntax::ext::quote::rt","",115,null],[11,"to_tokens","","",210,null],[11,"parse_item","syntex_syntax::ext::base","",188,null],[11,"parse_stmt","","",188,null],[11,"parse_expr","","",188,null],[11,"parse_tts","","",188,null],[0,"source_util","syntex_syntax::ext","",null,null],[5,"expand_line","syntex_syntax::ext::source_util","line!(): expands to the current line number",null,null],[5,"expand_column","","",null,null],[5,"expand_file","","file!(): expands to the current filename */\nThe filemap (`loc.file`) contains a bunch more information we could spit\nout if we wanted.",null,null],[5,"expand_stringify","","",null,null],[5,"expand_mod","","",null,null],[5,"expand_include","","include! : parse the given file as an expr\nThis is generally a bad idea because it&#39;s going to behave\nunhygienically.",null,null],[5,"expand_include_str","","",null,null],[5,"expand_include_bytes","","",null,null],[0,"tt","syntex_syntax::ext","",null,null],[0,"transcribe","syntex_syntax::ext::tt","",null,null],[3,"TtReader","syntex_syntax::ext::tt::transcribe","",null,null],[12,"sp_diag","","",211,null],[12,"cur_tok","","",211,null],[12,"cur_span","","",211,null],[12,"desugar_doc_comments","","Transform doc comments. Only useful in macro invocations",211,null],[12,"fatal_errs","","",211,null],[5,"new_tt_reader","","This can do Macro-By-Example transcription. On the other hand, if\n`src` contains no `TokenTree::Sequence`s, `MatchNt`s or `SubstNt`s, `interp` can\n(and should) be None.",null,{"inputs":[{"name":"handler"},{"name":"option"},{"name":"option"},{"name":"vec"}],"output":{"name":"ttreader"}}],[5,"new_tt_reader_with_doc_flag","","The extra `desugar_doc_comments` flag enables reading doc comments\nlike any other attribute which consists of `meta` and surrounding #[ ] tokens.",null,{"inputs":[{"name":"handler"},{"name":"option"},{"name":"option"},{"name":"vec"},{"name":"bool"}],"output":{"name":"ttreader"}}],[5,"tt_next_token","","Return the next token from the TtReader.\nEFFECT: advances the reader&#39;s token field",null,{"inputs":[{"name":"ttreader"}],"output":{"name":"tokenandspan"}}],[11,"clone","","",211,null],[0,"macro_parser","syntex_syntax::ext::tt","This is an Earley-like parser, without support for in-grammar nonterminals,\nonly by calling out to the main rust parser for named nonterminals (which it\ncommits to fully when it hits one in a grammar). This means that there are no\ncompleter or predictor rules, and therefore no need to store one column per\ntoken: instead, there&#39;s a set of current Earley items and a set of next\nones. Instead of NTs, we have a special case for Kleene star. The big-O, in\npathological cases, is worse than traditional Earley parsing, but it&#39;s an\neasier fit for Macro-by-Example-style rules, and I think the overhead is\nlower. (In order to prevent the pathological case, we&#39;d need to lazily\nconstruct the resulting `NamedMatch`es at the very end. It&#39;d be a pain,\nand require more memory to keep around old items, but it would also save\noverhead)",null,null],[3,"MatcherPos","syntex_syntax::ext::tt::macro_parser","",null,null],[4,"NamedMatch","","NamedMatch is a pattern-match result for a single token::MATCH_NONTERMINAL:\nso it is associated with a single ident in a parse, and all\n`MatchedNonterminal`s in the NamedMatch have the same nonterminal type\n(expr, item, etc). Each leaf in a single NamedMatch corresponds to a\nsingle token::MATCH_NONTERMINAL in the TokenTree that produced it.",null,null],[13,"MatchedSeq","","",212,null],[13,"MatchedNonterminal","","",212,null],[4,"ParseResult","","",null,null],[13,"Success","","",213,null],[13,"Failure","","Arm failed to match",213,null],[13,"Error","","Fatal error (malformed macro?). Abort compilation.",213,null],[5,"count_names","","",null,null],[5,"initial_matcher_pos","","",null,{"inputs":[{"name":"rc"},{"name":"option"},{"name":"bytepos"}],"output":{"name":"box"}}],[5,"nameize","","",null,null],[5,"token_name_eq","","Perform a token equality check, ignoring syntax context (that is, an\nunhygienic comparison)",null,{"inputs":[{"name":"token"},{"name":"token"}],"output":{"name":"bool"}}],[5,"parse","","",null,null],[5,"parse_nt","","",null,{"inputs":[{"name":"parser"},{"name":"span"},{"name":"str"}],"output":{"name":"nonterminal"}}],[6,"NamedParseResult","","",null,null],[6,"PositionalParseResult","","",null,null],[11,"clone","","",214,null],[0,"macro_rules","syntex_syntax::ext::tt","",null,null],[5,"compile","syntex_syntax::ext::tt::macro_rules","Converts a `macro_rules!` invocation into a syntax extension.",null,{"inputs":[{"name":"extctxt"},{"name":"macrodef"}],"output":{"name":"syntaxextension"}}],[14,"panictry","syntex_syntax","",null,null],[14,"register_diagnostic","","",null,null],[14,"span_fatal","","",null,null],[14,"span_err","","",null,null],[14,"span_warn","","",null,null],[14,"span_err_or_warn","","",null,null],[14,"struct_span_fatal","","",null,null],[14,"struct_span_err","","",null,null],[14,"struct_span_warn","","",null,null],[14,"struct_span_err_or_warn","","",null,null],[14,"span_note","","",null,null],[14,"span_help","","",null,null],[14,"help","","",null,null],[14,"register_diagnostics","","",null,null],[14,"register_long_diagnostics","","",null,null],[14,"walk_list","","",null,null],[11,"move_flat_map","syntex_syntax::ptr","",162,null],[11,"attrs","","",162,null],[11,"map_attrs","","",162,null],[11,"is_eof","syntex_syntax::ext::tt::transcribe","",211,null],[11,"try_next_token","","",211,null],[11,"fatal","","",211,null],[11,"err","","",211,null],[11,"emit_fatal_errors","","",211,null],[11,"peek","","",211,null],[11,"end_point","syntex_syntax::ext::quote::rt","Returns a new span representing just the end-point of this span",206,null],[11,"substitute_dummy","","Returns `self` if `self` is not the dummy span, and `other` otherwise.",206,null],[11,"contains","","",206,null],[11,"source_equal","","Return true if the spans are equal with regards to the source text.",206,null],[11,"merge","","Returns `Some(span)`, a union of `self` and `other`, on overlap.",206,null],[11,"trim_start","","Returns `Some(span)`, where the start is trimmed by the end of `other`",206,null],[11,"from_usize","","",207,{"inputs":[{"name":"usize"}],"output":{"name":"bytepos"}}],[11,"to_usize","","",207,null],[11,"clone","","",206,null],[11,"clone","","",207,null],[11,"hash","","",206,null],[11,"hash","","",207,null],[11,"decode","","",206,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"decode","","",207,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"partial_cmp","","",207,null],[11,"lt","","",207,null],[11,"le","","",207,null],[11,"gt","","",207,null],[11,"ge","","",207,null],[11,"fmt","","",206,null],[11,"fmt","","",207,null],[11,"cmp","","",207,null],[11,"encode","","",206,null],[11,"encode","","",207,null],[11,"add","","",207,null],[11,"eq","","",206,null],[11,"ne","","",206,null],[11,"eq","","",207,null],[11,"ne","","",207,null],[11,"sub","","",207,null]],"paths":[[3,"ErrorInfo"],[3,"ErrorMetadata"],[3,"ErrorLocation"],[3,"Interner"],[3,"NodeCounter"],[4,"AssocOp"],[4,"Fixity"],[3,"SmallVector"],[3,"IntoIter"],[8,"MoveMap"],[3,"ThinVec"],[3,"JsonEmitter"],[4,"Os"],[4,"Abi"],[4,"Architecture"],[4,"AbiArchitecture"],[3,"AbiData"],[3,"Name"],[3,"Ident"],[3,"Lifetime"],[3,"LifetimeDef"],[3,"Path"],[3,"PathSegment"],[3,"AngleBracketedParameterData"],[3,"ParenthesizedParameterData"],[3,"TyParam"],[3,"Generics"],[3,"WhereClause"],[3,"WhereBoundPredicate"],[3,"WhereRegionPredicate"],[3,"WhereEqPredicate"],[3,"Crate"],[3,"Block"],[3,"Pat"],[3,"FieldPat"],[3,"Stmt"],[3,"Local"],[3,"Arm"],[3,"Field"],[3,"Expr"],[3,"QSelf"],[3,"Mac_"],[3,"MutTy"],[3,"MethodSig"],[3,"TraitItem"],[3,"ImplItem"],[3,"TypeBinding"],[3,"Ty"],[3,"BareFnTy"],[3,"InlineAsmOutput"],[3,"InlineAsm"],[3,"Arg"],[3,"FnDecl"],[3,"Mod"],[3,"ForeignMod"],[3,"EnumDef"],[3,"Variant_"],[3,"PathListItem_"],[3,"AttrId"],[3,"Attribute_"],[3,"TraitRef"],[3,"PolyTraitRef"],[3,"StructField"],[3,"Item"],[3,"ForeignItem"],[3,"MacroDef"],[4,"PathParameters"],[4,"TyParamBound"],[4,"TraitBoundModifier"],[4,"WherePredicate"],[4,"NestedMetaItemKind"],[4,"MetaItemKind"],[4,"BindingMode"],[4,"PatKind"],[4,"Mutability"],[4,"BinOpKind"],[4,"UnOp"],[4,"StmtKind"],[4,"MacStmtStyle"],[4,"BlockCheckMode"],[4,"UnsafeSource"],[4,"RangeLimits"],[4,"ExprKind"],[4,"CaptureBy"],[4,"StrStyle"],[4,"LitIntType"],[4,"LitKind"],[4,"TraitItemKind"],[4,"ImplItemKind"],[4,"IntTy"],[4,"UintTy"],[4,"FloatTy"],[4,"TyKind"],[4,"AsmDialect"],[4,"SelfKind"],[4,"Unsafety"],[4,"Constness"],[4,"Defaultness"],[4,"ImplPolarity"],[4,"FunctionRetTy"],[4,"ViewPath_"],[4,"AttrStyle"],[4,"Visibility"],[4,"VariantData"],[4,"ItemKind"],[4,"ForeignItemKind"],[3,"Stability"],[3,"RustcDeprecation"],[3,"Deprecation"],[4,"InlineAttr"],[4,"StabilityLevel"],[4,"ReprAttr"],[4,"IntType"],[8,"HasAttrs"],[6,"NestedMetaItem"],[6,"Attribute"],[6,"MetaItem"],[6,"Variant"],[3,"Spanned"],[3,"NameAndSpan"],[3,"ExpnInfo"],[3,"CodeMap"],[4,"ExpnFormat"],[8,"FileLoader"],[3,"RealFileLoader"],[3,"StripUnconfigured"],[4,"EntryPointType"],[3,"Features"],[4,"AttributeType"],[4,"AttributeGate"],[4,"GateIssue"],[4,"UnstableFeatures"],[3,"GatedCfg"],[8,"Folder"],[3,"ParseSess"],[3,"Parser"],[3,"ModulePath"],[3,"ModulePathSuccess"],[3,"ModulePathError"],[4,"PathStyle"],[4,"BoundParsingMode"],[4,"SemiColonMode"],[4,"TokenType"],[4,"LhsExpr"],[3,"Restrictions"],[3,"TokenAndSpan"],[3,"StringReader"],[3,"Comment"],[3,"Literal"],[4,"CommentStyle"],[8,"Reader"],[4,"BinOpToken"],[4,"DelimToken"],[4,"SpecialMacroVar"],[4,"Lit"],[4,"Token"],[4,"Nonterminal"],[3,"Keyword"],[3,"InternedString"],[3,"SeqSep"],[4,"ObsoleteSyntax"],[8,"ParserObsoleteMethods"],[3,"P"],[3,"Delimited"],[3,"SequenceRepetition"],[4,"KleeneOp"],[4,"TokenTree"],[4,"InternalTS"],[3,"TokenStream"],[3,"Iter"],[3,"Split"],[4,"FnKind"],[8,"Visitor"],[3,"Printer"],[4,"Breaks"],[4,"Token"],[4,"PrintStackBreak"],[3,"BreakToken"],[3,"BeginToken"],[3,"PrintStackElem"],[3,"CurrentCommentAndLiteral"],[3,"State"],[4,"AnnNode"],[8,"PpAnn"],[8,"PrintState"],[3,"NoAnn"],[3,"MacEager"],[3,"BlockInfo"],[3,"ExtCtxt"],[3,"SyntaxEnv"],[4,"Annotatable"],[4,"SyntaxExtension"],[8,"MultiItemDecorator"],[8,"MultiItemModifier"],[8,"TTMacroExpander"],[8,"IdentMacroExpander"],[8,"MacResult"],[8,"MacroLoader"],[3,"DummyResult"],[3,"DummyMacroLoader"],[8,"AstBuilder"],[3,"MacroExpander"],[3,"ExpansionConfig"],[3,"SyntaxContext"],[3,"SyntaxContextData"],[3,"Mark"],[3,"Span"],[3,"BytePos"],[8,"ToTokens"],[8,"ExtParseUtils"],[6,"Lit"],[3,"TtReader"],[4,"NamedMatch"],[4,"ParseResult"],[3,"MatcherPos"]]};
searchIndex["select"] = {"doc":"","items":[[0,"document","select","",null,null],[3,"Document","select::document","An HTML document.",null,null],[12,"nodes","","",0,null],[11,"clone","","",0,null],[11,"fmt","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"find","","Returns a `Selection` containing nodes passing the given predicate `p`.",0,null],[11,"nth","","Returns the `n`th node of the document as a `Some(Node)`, indexed from\n0, or `None` if n is greater than or equal to the number of nodes.",0,null],[11,"from","","Parses the given `StrTendril` into a `Document`.",0,{"inputs":[{"name":"strtendril"}],"output":{"name":"document"}}],[11,"from","","Parses the given `&amp;str` into a `Document`.",0,{"inputs":[{"name":"str"}],"output":{"name":"document"}}],[0,"node","select","",null,null],[3,"Raw","select::node","Internal representation of a Node. Not of much use without a reference to a\nDocument.",null,null],[12,"index","","",1,null],[12,"parent","","",1,null],[12,"prev","","",1,null],[12,"next","","",1,null],[12,"data","","",1,null],[3,"Node","","A Node.",null,null],[4,"Data","","The Node type specific data stored by every Node.",null,null],[13,"Text","","",2,null],[13,"Element","","",2,null],[13,"Comment","","",2,null],[11,"clone","","",2,null],[11,"fmt","","",2,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"clone","","",1,null],[11,"fmt","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"clone","","",3,null],[11,"fmt","","",3,null],[11,"eq","","",3,null],[11,"ne","","",3,null],[11,"new","","",3,{"inputs":[{"name":"document"},{"name":"usize"}],"output":{"name":"option"}}],[11,"index","","",3,null],[11,"raw","","",3,null],[11,"data","","",3,null],[11,"name","","",3,null],[11,"attr","","",3,null],[11,"parent","","",3,null],[11,"prev","","",3,null],[11,"next","","",3,null],[11,"text","","",3,null],[11,"html","","",3,null],[11,"inner_html","","",3,null],[11,"find","","",3,null],[11,"is","","",3,null],[11,"as_text","","",3,null],[11,"as_comment","","",3,null],[11,"children","","",3,null],[11,"serialize","","",3,null],[0,"predicate","select","",null,null],[3,"Any","select::predicate","Matches any Node.",null,null],[3,"Name","","Matches Element Node with name `T`.",null,null],[12,"0","","",4,null],[3,"Class","","Matches Element Node containing class `T`.",null,null],[12,"0","","",5,null],[3,"Not","","Matches if the Predicate `T` does not match.",null,null],[12,"0","","",6,null],[3,"Attr","","Matches Element Node containing attribute `N` with value `V` if `V` is an\n`&amp;str`, or any value if `V` is `()`.",null,null],[12,"0","","",7,null],[12,"1","","",7,null],[3,"Element","","Matches any Element Node.",null,null],[3,"Text","","Matches any Text Node.",null,null],[3,"Comment","","Matches any Comment Node.",null,null],[3,"Or","","Matches if either inner Predicate `A` or `B` matches the Node.",null,null],[12,"0","","",8,null],[12,"1","","",8,null],[3,"And","","Matches if the inner Predicate `A` and `B` both match the Node.",null,null],[12,"0","","",9,null],[12,"1","","",9,null],[8,"Predicate","","A trait implemented by all `Node` matchers.",null,null],[10,"matches","","",10,null],[11,"or","","",10,null],[11,"and","","",10,null],[11,"not","","",10,null],[11,"clone","","",11,null],[11,"fmt","","",11,null],[11,"eq","","",11,null],[11,"matches","","",11,null],[11,"clone","","",4,null],[11,"fmt","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"matches","","",4,null],[11,"clone","","",5,null],[11,"fmt","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"matches","","",5,null],[11,"clone","","",6,null],[11,"fmt","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"matches","","",6,null],[11,"clone","","",7,null],[11,"fmt","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"matches","","",7,null],[11,"matches","","",7,null],[11,"clone","","",12,null],[11,"fmt","","",12,null],[11,"eq","","",12,null],[11,"matches","","",12,null],[11,"clone","","",13,null],[11,"fmt","","",13,null],[11,"eq","","",13,null],[11,"matches","","",13,null],[11,"clone","","",14,null],[11,"fmt","","",14,null],[11,"eq","","",14,null],[11,"matches","","",14,null],[11,"clone","","",8,null],[11,"fmt","","",8,null],[11,"eq","","",8,null],[11,"ne","","",8,null],[11,"matches","","",8,null],[11,"clone","","",9,null],[11,"fmt","","",9,null],[11,"eq","","",9,null],[11,"ne","","",9,null],[11,"matches","","",9,null],[0,"selection","select","",null,null],[3,"Selection","select::selection","",null,null],[3,"Iter","","",null,null],[11,"clone","","",15,null],[11,"fmt","","",15,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"new","","",15,{"inputs":[{"name":"document"},{"name":"bitset"}],"output":{"name":"selection"}}],[11,"iter","","",15,null],[11,"filter","","",15,null],[11,"find","","",15,null],[11,"parent","","",15,null],[11,"prev","","",15,null],[11,"next","","",15,null],[11,"parents","","",15,null],[11,"children","","",15,null],[11,"first","","",15,null],[11,"clone","","",16,null],[11,"next","","",16,null]],"paths":[[3,"Document"],[3,"Raw"],[4,"Data"],[3,"Node"],[3,"Name"],[3,"Class"],[3,"Not"],[3,"Attr"],[3,"Or"],[3,"And"],[8,"Predicate"],[3,"Any"],[3,"Element"],[3,"Text"],[3,"Comment"],[3,"Selection"],[3,"Iter"]]};
searchIndex["html5ever"] = {"doc":"","items":[[0,"encoding","html5ever","Re-export the rust-encoding crate.",null,null],[4,"EncoderTrap","html5ever::encoding","",null,null],[13,"Strict","","Immediately fails on errors.\nCorresponds to WHATWG &quot;fatal&quot; error algorithm.",0,null],[13,"Replace","","Replaces an error with `?` in given encoding.\nNote that this fails when `?` cannot be represented in given encoding.\nCorresponds to WHATWG &quot;URL&quot; error algorithms.",0,null],[13,"Ignore","","Silently ignores an error, effectively replacing it with an empty sequence.",0,null],[13,"NcrEscape","","Replaces an error with XML numeric character references (e.g. `&amp;#1234;`).\nThe encoder trap fails when NCRs cannot be represented in given encoding.\nCorresponds to WHATWG &quot;&lt;form&gt;&quot; error algorithms.",0,null],[13,"Call","","Calls given function to handle encoder errors.\nThe function is given the current encoder, input and output writer,\nand should return true only when it is fine to keep going.",0,null],[8,"RawEncoder","","Encoder converting a Unicode string into a byte sequence.\nThis is a lower level interface, and normally `Encoding::encode` should be used instead.",null,null],[10,"from_self","","Creates a fresh `RawEncoder` instance which parameters are same as `self`.",1,null],[11,"is_ascii_compatible","","Returns true if this encoding is compatible to ASCII,\ni.e. U+0000 through U+007F always map to bytes 00 through 7F and nothing else.",1,null],[10,"raw_feed","","Feeds given portion of string to the encoder,\npushes the an encoded byte sequence at the end of the given output,\nand returns a byte offset to the first unprocessed character\n(that can be zero when the first such character appeared in the prior calls to `raw_feed`)\nand optional error information (None means success).",1,null],[10,"raw_finish","","Finishes the encoder,\npushes the an encoded byte sequence at the end of the given output,\nand returns optional error information (None means success).\n`remaining` value of the error information, if any, is always an empty string.",1,null],[0,"codec","","Codec implementations.",null,null],[0,"error","html5ever::encoding::codec","A placeholder encoding that returns encoder/decoder error for every case.",null,null],[3,"ErrorEncoding","html5ever::encoding::codec::error","An encoding that returns encoder/decoder error for every case.",null,null],[3,"ErrorEncoder","","An encoder that always returns error.",null,null],[3,"ErrorDecoder","","A decoder that always returns error.",null,null],[0,"ascii","html5ever::encoding::codec","7-bit ASCII encoding.",null,null],[3,"ASCIIEncoding","html5ever::encoding::codec::ascii","ASCII, also known as ISO/IEC 646:US.",null,null],[3,"ASCIIEncoder","","An encoder for ASCII.",null,null],[3,"ASCIIDecoder","","A decoder for ASCII.",null,null],[0,"singlebyte","html5ever::encoding::codec","Common codec implementation for single-byte encodings.",null,null],[3,"SingleByteEncoding","html5ever::encoding::codec::singlebyte","A common framework for single-byte encodings based on ASCII.",null,null],[12,"name","","",2,null],[12,"whatwg_name","","",2,null],[12,"index_forward","","",2,null],[12,"index_backward","","",2,null],[3,"SingleByteEncoder","","An encoder for single-byte encodings based on ASCII.",null,null],[3,"SingleByteDecoder","","A decoder for single-byte encodings based on ASCII.",null,null],[0,"iso_8859_1","","Algorithmic mapping for ISO 8859-1.",null,null],[5,"forward","html5ever::encoding::codec::singlebyte::iso_8859_1","",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"utf_8","html5ever::encoding::codec","UTF-8, the universal encoding.",null,null],[3,"UTF8Encoding","html5ever::encoding::codec::utf_8","UTF-8 (UCS Transformation Format, 8-bit).",null,null],[3,"UTF8Encoder","","An encoder for UTF-8.",null,null],[3,"UTF8Decoder","","A decoder for UTF-8.",null,null],[5,"from_utf8","","Almost equivalent to `std::str::from_utf8`.\nThis function is provided for the fair benchmark against the stdlib&#39;s UTF-8 conversion\nfunctions, as rust-encoding always allocates a new string.",null,null],[0,"utf_16","html5ever::encoding::codec","UTF-16.",null,null],[3,"Little","html5ever::encoding::codec::utf_16","An implementation type for little endian.",null,null],[3,"Big","","An implementation type for big endian.",null,null],[3,"UTF16Encoding","","UTF-16 (UCS Transformation Format, 16-bit).",null,null],[6,"UTF16LEEncoding","","A type for UTF-16 in little endian.",null,null],[6,"UTF16BEEncoding","","A type for UTF-16 in big endian.",null,null],[17,"UTF_16LE_ENCODING","","An instance for UTF-16 in little endian.",null,null],[17,"UTF_16BE_ENCODING","","An instance for UTF-16 in big endian.",null,null],[3,"UTF16Encoder","","An encoder for UTF-16.",null,null],[3,"UTF16Decoder","","A decoder for UTF-16.",null,null],[0,"korean","html5ever::encoding::codec","Legacy Korean encodings based on KS X 1001.",null,null],[3,"Windows949Encoding","html5ever::encoding::codec::korean","Windows code page 949.",null,null],[3,"Windows949Encoder","","An encoder for Windows code page 949.",null,null],[0,"japanese","html5ever::encoding::codec","Legacy Japanese encodings based on JIS X 0208 and JIS X 0212.",null,null],[3,"EUCJPEncoding","html5ever::encoding::codec::japanese","EUC-JP. (XXX with asymmetric JIS X 0212 support)",null,null],[3,"EUCJPEncoder","","An encoder for EUC-JP with unused G3 character set.",null,null],[3,"Windows31JEncoding","","Windows code page 932, i.e. Shift_JIS with IBM/NEC extensions.",null,null],[3,"Windows31JEncoder","","An encoder for Shift_JIS with IBM/NEC extensions.",null,null],[3,"ISO2022JPEncoding","","ISO-2022-JP.",null,null],[3,"ISO2022JPEncoder","","An encoder for ISO-2022-JP without JIS X 0212/0213 support.",null,null],[0,"simpchinese","html5ever::encoding::codec","Legacy simplified Chinese encodings based on GB 2312 and GB 18030.",null,null],[3,"GBK","html5ever::encoding::codec::simpchinese","An implementation type for GBK.",null,null],[3,"GB18030","","An implementation type for GB18030.",null,null],[3,"GBEncoding","","GBK and GB 18030-2005.",null,null],[6,"GBKEncoding","","A type for GBK.",null,null],[6,"GB18030Encoding","","A type for GB18030.",null,null],[17,"GBK_ENCODING","","An instance for GBK.",null,null],[17,"GB18030_ENCODING","","An instance for GB18030.",null,null],[3,"GBEncoder","","An encoder for GBK and GB18030.",null,null],[3,"HZEncoding","","HZ. (RFC 1843)",null,null],[3,"HZEncoder","","An encoder for HZ.",null,null],[0,"tradchinese","html5ever::encoding::codec","Legacy traditional Chinese encodings.",null,null],[3,"BigFive2003Encoding","html5ever::encoding::codec::tradchinese","Big5-2003 with common extensions. (XXX with asymmetric HKSCS-2008 support)",null,null],[3,"BigFive2003Encoder","","An encoder for Big5-2003.",null,null],[0,"whatwg","html5ever::encoding::codec","Asymmetric or special encoding constructions required by the WHATWG Encoding standard.",null,null],[3,"EncoderOnlyUTF8Encoding","html5ever::encoding::codec::whatwg","Replacement encoding used to solve a particular attack vector due to mismatching server and\nclient supports for encodings. It is rarely useful outside.",null,null],[0,"x_user_defined","","Algorithmic mapping for `x-user-defined` encoding.",null,null],[5,"forward","html5ever::encoding::codec::whatwg::x_user_defined","",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[4,"DecoderTrap","html5ever::encoding","Trap, which handles decoder errors.",null,null],[13,"Strict","","Immediately fails on errors.\nCorresponds to WHATWG &quot;fatal&quot; error algorithm.",3,null],[13,"Replace","","Replaces an error with a U+FFFD (decoder).\nCorresponds to WHATWG &quot;replacement&quot; error algorithm.",3,null],[13,"Ignore","","Silently ignores an error, effectively replacing it with an empty sequence.",3,null],[13,"Call","","Calls given function to handle decoder errors.\nThe function is given the current decoder, input and output writer,\nand should return true only when it is fine to keep going.",3,null],[8,"Encoding","","Character encoding.",null,null],[10,"name","","Returns the canonical name of given encoding.\nThis name is guaranteed to be unique across built-in encodings,\nbut it is not normative and would be at most arbitrary.",4,null],[11,"whatwg_name","","Returns a name of given encoding defined in the WHATWG Encoding standard, if any.\nThis name often differs from `name` due to the compatibility reason.",4,null],[10,"raw_encoder","","Creates a new encoder.",4,null],[10,"raw_decoder","","Creates a new decoder.",4,null],[11,"encode","","An easy-to-use interface to `RawEncoder`.\nOn the encoder error `trap` is called,\nwhich may return a replacement sequence to continue processing,\nor a failure to return the error.",4,null],[11,"encode_to","","Encode into a `ByteWriter`.",4,null],[11,"decode","","An easy-to-use interface to `RawDecoder`.\nOn the decoder error `trap` is called,\nwhich may return a replacement string to continue processing,\nor a failure to return the error.",4,null],[11,"decode_to","","Decode into a `StringWriter`.",4,null],[8,"ByteWriter","","Byte writer used by encoders. In most cases this will be an owned vector of `u8`.",null,null],[11,"writer_hint","","Hints an expected lower bound on the length (in bytes) of the output\nuntil the next call to `writer_hint`,\nso that the writer can reserve the memory for writing.\n`RawEncoder`s are recommended but not required to call this method\nwith an appropriate estimate.\nBy default this method does nothing.",5,null],[10,"write_byte","","Writes a single byte.",5,null],[10,"write_bytes","","Writes a number of bytes.",5,null],[5,"decode","","Determine the encoding by looking for a Byte Order Mark (BOM)\nand decoded a single string in memory.\nReturn the result and the used encoding.",null,null],[6,"EncoderTrapFunc","","A type of the bare function in `EncoderTrap` values.",null,null],[0,"label","","An interface for retrieving an encoding (or a set of encodings) from a string/numeric label.",null,null],[5,"encoding_from_whatwg_label","html5ever::encoding::label","Returns an encoding from given label, defined in the WHATWG Encoding standard, if any.\nImplements &quot;get an encoding&quot; algorithm: http://encoding.spec.whatwg.org/#concept-encoding-get",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[5,"encoding_from_windows_code_page","","Returns an encoding from Windows code page number.\nhttp://msdn.microsoft.com/en-us/library/windows/desktop/dd317756%28v=vs.85%29.aspx\nSometimes it can return a *superset* of the requested encoding, e.g. for several CJK encodings.",null,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[6,"EncodingRef","html5ever::encoding","A trait object using dynamic dispatch which is a sendable reference to the encoding,\nfor code where the encoding is not known at compile-time.",null,null],[6,"DecoderTrapFunc","","A type of the bare function in `DecoderTrap` values.",null,null],[8,"RawDecoder","","Decoder converting a byte sequence into a Unicode string.\nThis is a lower level interface, and normally `Encoding::decode` should be used instead.",null,null],[10,"from_self","","Creates a fresh `RawDecoder` instance which parameters are same as `self`.",6,null],[11,"is_ascii_compatible","","Returns true if this encoding is compatible to ASCII,\ni.e. bytes 00 through 7F always map to U+0000 through U+007F and nothing else.",6,null],[10,"raw_feed","","Feeds given portion of byte sequence to the encoder,\npushes the a decoded string at the end of the given output,\nand returns an offset to the first unprocessed byte\n(that can be zero when the first such byte appeared in the prior calls to `raw_feed`)\nand optional error information (None means success).",6,null],[10,"raw_finish","","Finishes the decoder,\npushes the a decoded string at the end of the given output,\nand returns optional error information (None means success).",6,null],[0,"types","","Interface to the character encoding.",null,null],[3,"CodecError","html5ever::encoding::types","Error information from either encoder or decoder.",null,null],[12,"upto","","The byte position of the first remaining byte, with respect to the *current* input.\nFor the `finish` call, this should be no more than zero (since there is no input).\nIt can be negative if the remaining byte is in the prior inputs,\nas long as the remaining byte is not yet processed.\nThe caller should feed the bytes starting from this point again\nin order to continue encoding or decoding after an error.",7,null],[12,"cause","","A human-readable cause of the error.",7,null],[8,"ByteWriter","","Byte writer used by encoders. In most cases this will be an owned vector of `u8`.",null,null],[11,"writer_hint","","Hints an expected lower bound on the length (in bytes) of the output\nuntil the next call to `writer_hint`,\nso that the writer can reserve the memory for writing.\n`RawEncoder`s are recommended but not required to call this method\nwith an appropriate estimate.\nBy default this method does nothing.",5,null],[10,"write_byte","","Writes a single byte.",5,null],[10,"write_bytes","","Writes a number of bytes.",5,null],[8,"StringWriter","","String writer used by decoders. In most cases this will be an owned string.",null,null],[11,"writer_hint","","Hints an expected lower bound on the length (in bytes) of the output\nuntil the next call to `writer_hint`,\nso that the writer can reserve the memory for writing.\n`RawDecoder`s are recommended but not required to call this method\nwith an appropriate estimate.\nBy default this method does nothing.",8,null],[10,"write_char","","Writes a single character.",8,null],[10,"write_str","","Writes a string.",8,null],[8,"RawEncoder","","Encoder converting a Unicode string into a byte sequence.\nThis is a lower level interface, and normally `Encoding::encode` should be used instead.",null,null],[10,"from_self","","Creates a fresh `RawEncoder` instance which parameters are same as `self`.",1,null],[11,"is_ascii_compatible","","Returns true if this encoding is compatible to ASCII,\ni.e. U+0000 through U+007F always map to bytes 00 through 7F and nothing else.",1,null],[10,"raw_feed","","Feeds given portion of string to the encoder,\npushes the an encoded byte sequence at the end of the given output,\nand returns a byte offset to the first unprocessed character\n(that can be zero when the first such character appeared in the prior calls to `raw_feed`)\nand optional error information (None means success).",1,null],[10,"raw_finish","","Finishes the encoder,\npushes the an encoded byte sequence at the end of the given output,\nand returns optional error information (None means success).\n`remaining` value of the error information, if any, is always an empty string.",1,null],[8,"RawDecoder","","Decoder converting a byte sequence into a Unicode string.\nThis is a lower level interface, and normally `Encoding::decode` should be used instead.",null,null],[10,"from_self","","Creates a fresh `RawDecoder` instance which parameters are same as `self`.",6,null],[11,"is_ascii_compatible","","Returns true if this encoding is compatible to ASCII,\ni.e. bytes 00 through 7F always map to U+0000 through U+007F and nothing else.",6,null],[10,"raw_feed","","Feeds given portion of byte sequence to the encoder,\npushes the a decoded string at the end of the given output,\nand returns an offset to the first unprocessed byte\n(that can be zero when the first such byte appeared in the prior calls to `raw_feed`)\nand optional error information (None means success).",6,null],[10,"raw_finish","","Finishes the decoder,\npushes the a decoded string at the end of the given output,\nand returns optional error information (None means success).",6,null],[6,"EncodingRef","","A trait object using dynamic dispatch which is a sendable reference to the encoding,\nfor code where the encoding is not known at compile-time.",null,null],[8,"Encoding","","Character encoding.",null,null],[10,"name","","Returns the canonical name of given encoding.\nThis name is guaranteed to be unique across built-in encodings,\nbut it is not normative and would be at most arbitrary.",4,null],[11,"whatwg_name","","Returns a name of given encoding defined in the WHATWG Encoding standard, if any.\nThis name often differs from `name` due to the compatibility reason.",4,null],[10,"raw_encoder","","Creates a new encoder.",4,null],[10,"raw_decoder","","Creates a new decoder.",4,null],[11,"encode","","An easy-to-use interface to `RawEncoder`.\nOn the encoder error `trap` is called,\nwhich may return a replacement sequence to continue processing,\nor a failure to return the error.",4,null],[11,"encode_to","","Encode into a `ByteWriter`.",4,null],[11,"decode","","An easy-to-use interface to `RawDecoder`.\nOn the decoder error `trap` is called,\nwhich may return a replacement string to continue processing,\nor a failure to return the error.",4,null],[11,"decode_to","","Decode into a `StringWriter`.",4,null],[6,"EncoderTrapFunc","","A type of the bare function in `EncoderTrap` values.",null,null],[6,"DecoderTrapFunc","","A type of the bare function in `DecoderTrap` values.",null,null],[4,"DecoderTrap","","Trap, which handles decoder errors.",null,null],[13,"Strict","","Immediately fails on errors.\nCorresponds to WHATWG &quot;fatal&quot; error algorithm.",3,null],[13,"Replace","","Replaces an error with a U+FFFD (decoder).\nCorresponds to WHATWG &quot;replacement&quot; error algorithm.",3,null],[13,"Ignore","","Silently ignores an error, effectively replacing it with an empty sequence.",3,null],[13,"Call","","Calls given function to handle decoder errors.\nThe function is given the current decoder, input and output writer,\nand should return true only when it is fine to keep going.",3,null],[4,"EncoderTrap","","",null,null],[13,"Strict","","Immediately fails on errors.\nCorresponds to WHATWG &quot;fatal&quot; error algorithm.",0,null],[13,"Replace","","Replaces an error with `?` in given encoding.\nNote that this fails when `?` cannot be represented in given encoding.\nCorresponds to WHATWG &quot;URL&quot; error algorithms.",0,null],[13,"Ignore","","Silently ignores an error, effectively replacing it with an empty sequence.",0,null],[13,"NcrEscape","","Replaces an error with XML numeric character references (e.g. `&amp;#1234;`).\nThe encoder trap fails when NCRs cannot be represented in given encoding.\nCorresponds to WHATWG &quot;&lt;form&gt;&quot; error algorithms.",0,null],[13,"Call","","Calls given function to handle encoder errors.\nThe function is given the current encoder, input and output writer,\nand should return true only when it is fine to keep going.",0,null],[5,"decode","","Determine the encoding by looking for a Byte Order Mark (BOM)\nand decoded a single string in memory.\nReturn the result and the used encoding.",null,null],[0,"all","html5ever::encoding","A list of all supported encodings. Useful for encodings fixed in the compile time.",null,null],[17,"ERROR","html5ever::encoding::all","",null,null],[17,"ASCII","","",null,null],[17,"IBM866","","",null,null],[17,"ISO_8859_1","","",null,null],[17,"ISO_8859_2","","",null,null],[17,"ISO_8859_3","","",null,null],[17,"ISO_8859_4","","",null,null],[17,"ISO_8859_5","","",null,null],[17,"ISO_8859_6","","",null,null],[17,"ISO_8859_7","","",null,null],[17,"ISO_8859_8","","",null,null],[17,"ISO_8859_10","","",null,null],[17,"ISO_8859_13","","",null,null],[17,"ISO_8859_14","","",null,null],[17,"ISO_8859_15","","",null,null],[17,"ISO_8859_16","","",null,null],[17,"KOI8_R","","",null,null],[17,"KOI8_U","","",null,null],[17,"MAC_ROMAN","","",null,null],[17,"WINDOWS_874","","",null,null],[17,"WINDOWS_1250","","",null,null],[17,"WINDOWS_1251","","",null,null],[17,"WINDOWS_1252","","",null,null],[17,"WINDOWS_1253","","",null,null],[17,"WINDOWS_1254","","",null,null],[17,"WINDOWS_1255","","",null,null],[17,"WINDOWS_1256","","",null,null],[17,"WINDOWS_1257","","",null,null],[17,"WINDOWS_1258","","",null,null],[17,"MAC_CYRILLIC","","",null,null],[17,"UTF_8","","",null,null],[17,"UTF_16LE","","",null,null],[17,"UTF_16BE","","",null,null],[17,"WINDOWS_949","","",null,null],[17,"EUC_JP","","",null,null],[17,"WINDOWS_31J","","",null,null],[17,"ISO_2022_JP","","",null,null],[17,"GBK","","",null,null],[17,"GB18030","","",null,null],[17,"HZ","","",null,null],[17,"BIG5_2003","","",null,null],[0,"whatwg","","",null,null],[17,"X_USER_DEFINED","html5ever::encoding::all::whatwg","",null,null],[17,"ISO_8859_8_I","","",null,null],[17,"REPLACEMENT","","",null,null],[5,"encodings","html5ever::encoding::all","Returns a list of references to the encodings available.",null,null],[3,"CodecError","html5ever::encoding","Error information from either encoder or decoder.",null,null],[12,"upto","","The byte position of the first remaining byte, with respect to the *current* input.\nFor the `finish` call, this should be no more than zero (since there is no input).\nIt can be negative if the remaining byte is in the prior inputs,\nas long as the remaining byte is not yet processed.\nThe caller should feed the bytes starting from this point again\nin order to continue encoding or decoding after an error.",7,null],[12,"cause","","A human-readable cause of the error.",7,null],[8,"StringWriter","","String writer used by decoders. In most cases this will be an owned string.",null,null],[11,"writer_hint","","Hints an expected lower bound on the length (in bytes) of the output\nuntil the next call to `writer_hint`,\nso that the writer can reserve the memory for writing.\n`RawDecoder`s are recommended but not required to call this method\nwith an appropriate estimate.\nBy default this method does nothing.",8,null],[10,"write_char","","Writes a single character.",8,null],[10,"write_str","","Writes a string.",8,null],[3,"Attribute","html5ever","A tag attribute.",null,null],[12,"name","","",9,null],[12,"value","","",9,null],[0,"tokenizer","","The HTML5 tokenizer.",null,null],[3,"Doctype","html5ever::tokenizer","A `DOCTYPE` token.",null,null],[12,"name","","",10,null],[12,"public_id","","",10,null],[12,"system_id","","",10,null],[12,"force_quirks","","",10,null],[3,"Attribute","","A tag attribute.",null,null],[12,"name","","",9,null],[12,"value","","",9,null],[3,"Tag","","A tag token.",null,null],[12,"kind","","",11,null],[12,"name","","",11,null],[12,"self_closing","","",11,null],[12,"attrs","","",11,null],[3,"TokenizerOpts","","Tokenizer options, with an impl for `Default`.",null,null],[12,"exact_errors","","Report all parse errors described in the spec, at some\nperformance penalty?  Default: false",12,null],[12,"discard_bom","","Discard a `U+FEFF BYTE ORDER MARK` if we see one at the beginning\nof the stream?  Default: true",12,null],[12,"profile","","Keep a record of how long we spent in each state?  Printed\nwhen `end()` is called.  Default: false",12,null],[12,"initial_state","","Initial state override.  Only the test runner should use\na non-`None` value!",12,null],[12,"last_start_tag_name","","Last start tag.  Only the test runner should use a\nnon-`None` value!",12,null],[3,"Tokenizer","","The HTML tokenizer.",null,null],[4,"TagKind","","",null,null],[13,"StartTag","","",13,null],[13,"EndTag","","",13,null],[4,"Token","","",null,null],[13,"DoctypeToken","","",14,null],[13,"TagToken","","",14,null],[13,"CommentToken","","",14,null],[13,"CharacterTokens","","",14,null],[13,"NullCharacterToken","","",14,null],[13,"EOFToken","","",14,null],[13,"ParseError","","",14,null],[0,"states","","Tokenizer states.",null,null],[4,"ScriptEscapeKind","html5ever::tokenizer::states","",null,null],[13,"Escaped","","",15,null],[13,"DoubleEscaped","","",15,null],[4,"DoctypeIdKind","","",null,null],[13,"Public","","",16,null],[13,"System","","",16,null],[4,"RawKind","","",null,null],[13,"Rcdata","","",17,null],[13,"Rawtext","","",17,null],[13,"ScriptData","","",17,null],[13,"ScriptDataEscaped","","",17,null],[4,"AttrValueKind","","",null,null],[13,"Unquoted","","",18,null],[13,"SingleQuoted","","",18,null],[13,"DoubleQuoted","","",18,null],[4,"State","","",null,null],[13,"Data","","",19,null],[13,"Plaintext","","",19,null],[13,"TagOpen","","",19,null],[13,"EndTagOpen","","",19,null],[13,"TagName","","",19,null],[13,"RawData","","",19,null],[13,"RawLessThanSign","","",19,null],[13,"RawEndTagOpen","","",19,null],[13,"RawEndTagName","","",19,null],[13,"ScriptDataEscapeStart","","",19,null],[13,"ScriptDataEscapeStartDash","","",19,null],[13,"ScriptDataEscapedDash","","",19,null],[13,"ScriptDataEscapedDashDash","","",19,null],[13,"ScriptDataDoubleEscapeEnd","","",19,null],[13,"BeforeAttributeName","","",19,null],[13,"AttributeName","","",19,null],[13,"AfterAttributeName","","",19,null],[13,"BeforeAttributeValue","","",19,null],[13,"AttributeValue","","",19,null],[13,"AfterAttributeValueQuoted","","",19,null],[13,"SelfClosingStartTag","","",19,null],[13,"BogusComment","","",19,null],[13,"MarkupDeclarationOpen","","",19,null],[13,"CommentStart","","",19,null],[13,"CommentStartDash","","",19,null],[13,"Comment","","",19,null],[13,"CommentEndDash","","",19,null],[13,"CommentEnd","","",19,null],[13,"CommentEndBang","","",19,null],[13,"Doctype","","",19,null],[13,"BeforeDoctypeName","","",19,null],[13,"DoctypeName","","",19,null],[13,"AfterDoctypeName","","",19,null],[13,"AfterDoctypeKeyword","","",19,null],[13,"BeforeDoctypeIdentifier","","",19,null],[13,"DoctypeIdentifierDoubleQuoted","","",19,null],[13,"DoctypeIdentifierSingleQuoted","","",19,null],[13,"AfterDoctypeIdentifier","","",19,null],[13,"BetweenDoctypePublicAndSystemIdentifiers","","",19,null],[13,"BogusDoctype","","",19,null],[13,"CdataSection","","",19,null],[13,"Quiescent","","",19,null],[11,"eq","","",15,null],[11,"partial_cmp","","",15,null],[11,"cmp","","",15,null],[11,"clone","","",15,null],[11,"hash","","",15,null],[11,"fmt","","",15,null],[11,"eq","","",16,null],[11,"partial_cmp","","",16,null],[11,"cmp","","",16,null],[11,"clone","","",16,null],[11,"hash","","",16,null],[11,"fmt","","",16,null],[11,"eq","","",17,null],[11,"ne","","",17,null],[11,"partial_cmp","","",17,null],[11,"lt","","",17,null],[11,"le","","",17,null],[11,"gt","","",17,null],[11,"ge","","",17,null],[11,"cmp","","",17,null],[11,"clone","","",17,null],[11,"hash","","",17,null],[11,"fmt","","",17,null],[11,"eq","","",18,null],[11,"partial_cmp","","",18,null],[11,"cmp","","",18,null],[11,"clone","","",18,null],[11,"hash","","",18,null],[11,"fmt","","",18,null],[11,"eq","","",19,null],[11,"ne","","",19,null],[11,"partial_cmp","","",19,null],[11,"lt","","",19,null],[11,"le","","",19,null],[11,"gt","","",19,null],[11,"ge","","",19,null],[11,"cmp","","",19,null],[11,"clone","","",19,null],[11,"hash","","",19,null],[11,"fmt","","",19,null],[11,"eq","html5ever::tokenizer","",10,null],[11,"ne","","",10,null],[11,"clone","","",10,null],[11,"fmt","","",10,null],[11,"new","","",10,{"inputs":[],"output":{"name":"doctype"}}],[11,"eq","html5ever","",9,null],[11,"ne","","",9,null],[11,"partial_cmp","","",9,null],[11,"lt","","",9,null],[11,"le","","",9,null],[11,"gt","","",9,null],[11,"ge","","",9,null],[11,"cmp","","",9,null],[11,"clone","","",9,null],[11,"fmt","","",9,null],[11,"eq","html5ever::tokenizer","",13,null],[11,"hash","","",13,null],[11,"clone","","",13,null],[11,"fmt","","",13,null],[11,"eq","","",11,null],[11,"ne","","",11,null],[11,"clone","","",11,null],[11,"fmt","","",11,null],[11,"equiv_modulo_attr_order","","Are the tags equivalent when we don&#39;t care about attribute order?\nAlso ignores the self-closing flag.",11,null],[11,"eq","","",14,null],[11,"ne","","",14,null],[11,"fmt","","",14,null],[8,"TokenSink","","Types which can receive tokens from the tokenizer.",null,null],[10,"process_token","","Process a token.",20,null],[11,"adjusted_current_node_present_but_not_in_html_namespace","","Used in the markup declaration open state. By default, this always\nreturns false and thus all CDATA sections are tokenized as bogus\ncomments.\nhttps://html.spec.whatwg.org/multipage/#markup-declaration-open-state",20,null],[11,"query_state_change","","The tokenizer will call this after emitting any tag.\nThis allows the tree builder to change the tokenizer&#39;s state.\nBy default no state changes occur.",20,null],[11,"clone","","",12,null],[11,"default","","",12,{"inputs":[],"output":{"name":"tokenizeropts"}}],[11,"new","","Create a new tokenizer which feeds tokens to a particular `TokenSink`.",21,{"inputs":[{"name":"sink"},{"name":"tokenizeropts"}],"output":{"name":"tokenizer"}}],[11,"unwrap","","",21,null],[11,"sink","","",21,null],[11,"sink_mut","","",21,null],[11,"feed","","Feed an input string into the tokenizer.",21,null],[11,"set_plaintext_state","","",21,null],[11,"run","","Run the state machine for as long as we can.",21,null],[11,"end","","Indicate that we have reached the end of the input.",21,null],[0,"tree_builder","html5ever","The HTML5 tree builder.",null,null],[3,"TreeBuilderOpts","html5ever::tree_builder","Tree builder options, with an impl for Default.",null,null],[12,"exact_errors","","Report all parse errors described in the spec, at some\nperformance penalty?  Default: false",22,null],[12,"scripting_enabled","","Is scripting enabled?",22,null],[12,"iframe_srcdoc","","Is this an `iframe srcdoc` document?",22,null],[12,"drop_doctype","","Should we drop the DOCTYPE (if any) from the tree?",22,null],[12,"ignore_missing_rules","","Obsolete, ignored.",22,null],[12,"quirks_mode","","Initial TreeBuilder quirks mode. Default: NoQuirks",22,null],[3,"TreeBuilder","","The HTML tree builder.",null,null],[0,"interface","","The interface for consumers of the tree builder (and thus the\nparser overall).",null,null],[4,"QuirksMode","html5ever::tree_builder::interface","A document&#39;s quirks mode.",null,null],[13,"Quirks","","",23,null],[13,"LimitedQuirks","","",23,null],[13,"NoQuirks","","",23,null],[4,"NodeOrText","","Something which can be inserted into the DOM.",null,null],[13,"AppendNode","","",24,null],[13,"AppendText","","",24,null],[4,"NextParserState","","Whether to interrupt further parsing of the current input until\nthe next explicit resumption of the tokenizer, or continue without\nany interruption.",null,null],[13,"Suspend","","",25,null],[13,"Continue","","",25,null],[8,"TreeSink","","Types which can process tree modifications from the tree builder.",null,null],[16,"Output","","The overall result of parsing.",26,null],[10,"finish","","Consume this sink and return the overall result of parsing.",26,null],[16,"Handle","","`Handle` is a reference to a DOM node.  The tree builder requires\nthat a `Handle` implements `Clone` to get another reference to\nthe same node.",26,null],[10,"parse_error","","Signal a parse error.",26,null],[10,"get_document","","Get a handle to the `Document` node.",26,null],[10,"get_template_contents","","Get a handle to a template&#39;s template contents. The tree builder\npromises this will never be called with something else than\na template element.",26,null],[10,"same_node","","Do two handles refer to the same node?",26,null],[10,"elem_name","","What is the name of this element?",26,null],[10,"set_quirks_mode","","Set the document&#39;s quirks mode.",26,null],[10,"create_element","","Create an element.",26,null],[10,"create_comment","","Create a comment node.",26,null],[10,"append","","Append a node as the last child of the given node.  If this would\nproduce adjacent sibling text nodes, it should concatenate the text\ninstead.",26,null],[10,"append_before_sibling","","Append a node as the sibling immediately before the given node.  If that node\nhas no parent, do nothing and return Err(new_node).",26,null],[10,"append_doctype_to_document","","Append a `DOCTYPE` element to the `Document` node.",26,null],[10,"add_attrs_if_missing","","Add each attribute to the given element, if no attribute with that name\nalready exists. The tree builder promises this will never be called\nwith something else than an element.",26,null],[10,"remove_from_parent","","Detach the given node from its parent.",26,null],[10,"reparent_children","","Remove all the children from node and append them to new_parent.",26,null],[10,"mark_script_already_started","","Mark a HTML `&lt;script&gt;` element as &quot;already started&quot;.",26,null],[11,"complete_script","","Indicate that a `&lt;script&gt;` element is complete.",26,null],[11,"is_mathml_annotation_xml_integration_point","","",26,null],[8,"Tracer","","Trace hooks for a garbage-collected DOM.",null,null],[16,"Handle","","",27,null],[10,"trace_handle","","Upon a call to `trace_handles`, the tree builder will call this method\nfor each handle in its internal state.",27,null],[11,"eq","","",23,null],[11,"clone","","",23,null],[11,"hash","","",23,null],[11,"fmt","","",23,null],[11,"eq","","",25,null],[11,"clone","","",25,null],[11,"hash","","",25,null],[11,"fmt","","",25,null],[11,"clone","html5ever::tree_builder","",22,null],[11,"default","","",22,{"inputs":[],"output":{"name":"treebuilderopts"}}],[11,"new","","Create a new tree builder which sends tree modifications to a particular `TreeSink`.",28,{"inputs":[{"name":"sink"},{"name":"treebuilderopts"}],"output":{"name":"treebuilder"}}],[11,"new_for_fragment","","Create a new tree builder which sends tree modifications to a particular `TreeSink`.\nThis is for parsing fragments.",28,{"inputs":[{"name":"sink"},{"name":"handle"},{"name":"option"},{"name":"treebuilderopts"}],"output":{"name":"treebuilder"}}],[11,"tokenizer_state_for_context_elem","","",28,null],[11,"unwrap","","",28,null],[11,"sink","","",28,null],[11,"sink_mut","","",28,null],[11,"trace_handles","","Call the `Tracer`&#39;s `trace_handle` method on every `Handle` in the tree builder&#39;s\ninternal state.  This is intended to support garbage-collected DOMs.",28,null],[11,"is_fragment","","Are we parsing a HTML fragment?",28,null],[11,"process_token","","",28,null],[11,"adjusted_current_node_present_but_not_in_html_namespace","","",28,null],[11,"query_state_change","","",28,null],[0,"serialize","html5ever","",null,null],[3,"SerializeOpts","html5ever::serialize","",null,null],[12,"scripting_enabled","","Is scripting enabled?",29,null],[12,"traversal_scope","","Serialize the root node? Default: ChildrenOnly",29,null],[3,"Serializer","","",null,null],[4,"TraversalScope","","",null,null],[13,"IncludeNode","","",30,null],[13,"ChildrenOnly","","",30,null],[5,"serialize","","",null,{"inputs":[{"name":"wr"},{"name":"t"},{"name":"serializeopts"}],"output":{"name":"result"}}],[6,"AttrRef","","",null,null],[8,"Serializable","","",null,null],[10,"serialize","","",31,null],[11,"clone","","",30,null],[11,"eq","","",30,null],[11,"clone","","",29,null],[11,"default","","",29,{"inputs":[],"output":{"name":"serializeopts"}}],[11,"start_elem","","",32,null],[11,"end_elem","","",32,null],[11,"write_text","","",32,null],[11,"write_comment","","",32,null],[11,"write_doctype","","",32,null],[11,"write_processing_instruction","","",32,null],[0,"driver","html5ever","High-level interface to the parser.",null,null],[3,"ParseOpts","html5ever::driver","All-encompassing options struct for the parser.",null,null],[12,"tokenizer","","Tokenizer options.",33,null],[12,"tree_builder","","Tree builder options.",33,null],[3,"Parser","","An HTML parser,\nready to recieve Unicode input through the `tendril::TendrilSink` trait’s methods.",null,null],[12,"tokenizer","","",34,null],[3,"BytesOpts","","Options for choosing a character encoding",null,null],[12,"transport_layer_encoding","","The character encoding specified by the transport layer, if any.\nIn HTTP for example, this is the `charset` parameter of the `Content-Type` response header.",35,null],[3,"BytesParser","","An HTML parser,\nready to recieve bytes input through the `tendril::TendrilSink` trait’s methods.",null,null],[5,"parse_document","","Parse an HTML document",null,{"inputs":[{"name":"sink"},{"name":"parseopts"}],"output":{"name":"parser"}}],[5,"parse_fragment","","Parse an HTML fragment",null,{"inputs":[{"name":"sink"},{"name":"parseopts"},{"name":"qualname"},{"name":"vec"}],"output":{"name":"parser"}}],[5,"parse_fragment_for_element","","Like `parse_fragment`, but with an existing context element\nand optionally a form element.",null,{"inputs":[{"name":"sink"},{"name":"parseopts"},{"name":"handle"},{"name":"option"}],"output":{"name":"parser"}}],[11,"clone","","",33,null],[11,"default","","",33,{"inputs":[],"output":{"name":"parseopts"}}],[11,"process","","",34,null],[11,"error","","",34,null],[11,"finish","","",34,null],[11,"from_utf8","","Wrap this parser into a `TendrilSink` that accepts UTF-8 bytes.",34,null],[11,"from_bytes","","Wrap this parser into a `TendrilSink` that accepts bytes\nand tries to detect the correct character encoding.",34,null],[11,"clone","","",35,null],[11,"default","","",35,{"inputs":[],"output":{"name":"bytesopts"}}],[11,"str_parser","","Access the underlying Parser",36,null],[11,"str_parser_mut","","Access the underlying Parser",36,null],[11,"process_unicode","","Insert a Unicode chunk in the middle of the byte stream.",36,null],[11,"process","","",36,null],[11,"error","","",36,null],[11,"finish","","",36,null],[0,"rcdom","html5ever","A simple reference-counted DOM.",null,null],[3,"Node","html5ever::rcdom","A DOM node.",null,null],[12,"node","","",37,null],[12,"parent","","",37,null],[12,"children","","",37,null],[3,"Handle","","Reference to a DOM node.",null,null],[3,"RcDom","","The DOM itself; the result of parsing.",null,null],[12,"document","","The `Document` itself.",38,null],[12,"errors","","Errors that occurred during parsing.",38,null],[12,"quirks_mode","","The document&#39;s quirks mode.",38,null],[4,"ElementEnum","","The different kinds of elements in the DOM.",null,null],[13,"Normal","","",39,null],[13,"Script","","A script element and its &quot;already started&quot; flag.\nhttps://html.spec.whatwg.org/multipage/#already-started",39,null],[13,"Template","","A template element and its template contents.\nhttps://html.spec.whatwg.org/multipage/#template-contents",39,null],[13,"AnnotationXml","","An annotation-xml element in the MathML namespace whose start tag token had an attribute\nwith the name &quot;encoding&quot; whose value was an ASCII case-insensitive match for the string\n&quot;text/html&quot; or &quot;application/xhtml+xml&quot;\nhttps://html.spec.whatwg.org/multipage/embedded-content.html#math:annotation-xml",39,null],[4,"NodeEnum","","The different kinds of nodes in the DOM.",null,null],[13,"Document","","The `Document` itself.",40,null],[13,"Doctype","","A `DOCTYPE` with name, public id, and system id.",40,null],[13,"Text","","A text node.",40,null],[13,"Comment","","A comment.",40,null],[13,"Element","","An element with attributes.",40,null],[6,"WeakHandle","","Weak reference to a DOM node, used for parent pointers.",null,null],[11,"fmt","","",39,null],[11,"fmt","","",40,null],[11,"fmt","","",37,null],[11,"clone","","",41,null],[11,"fmt","","",41,null],[11,"deref","","",41,null],[11,"finish","","",38,null],[11,"parse_error","","",38,null],[11,"get_document","","",38,null],[11,"get_template_contents","","",38,null],[11,"set_quirks_mode","","",38,null],[11,"same_node","","",38,null],[11,"elem_name","","",38,null],[11,"create_element","","",38,null],[11,"create_comment","","",38,null],[11,"append","","",38,null],[11,"append_before_sibling","","",38,null],[11,"append_doctype_to_document","","",38,null],[11,"add_attrs_if_missing","","",38,null],[11,"remove_from_parent","","",38,null],[11,"reparent_children","","",38,null],[11,"mark_script_already_started","","",38,null],[11,"is_mathml_annotation_xml_integration_point","","",38,null],[11,"default","","",38,{"inputs":[],"output":{"name":"rcdom"}}],[11,"serialize","","",41,null],[0,"tendril","html5ever","Re-export the tendril crate.",null,null],[11,"trap","html5ever::encoding::types","Handles an encoder error. May write to the output writer.\nReturns true only when it is fine to keep going.",0,null],[11,"from_self","html5ever::encoding::codec::error","",42,null],[11,"raw_feed","","",42,null],[11,"raw_finish","","",42,null],[11,"from_self","html5ever::encoding::codec::ascii","",43,null],[11,"is_ascii_compatible","","",43,null],[11,"raw_feed","","",43,null],[11,"raw_finish","","",43,null],[11,"from_self","html5ever::encoding::codec::singlebyte","",44,null],[11,"is_ascii_compatible","","",44,null],[11,"raw_feed","","",44,null],[11,"raw_finish","","",44,null],[11,"from_self","html5ever::encoding::codec::utf_8","",45,null],[11,"is_ascii_compatible","","",45,null],[11,"raw_feed","","",45,null],[11,"raw_finish","","",45,null],[11,"from_self","html5ever::encoding::codec::utf_16","",46,null],[11,"raw_feed","","",46,null],[11,"raw_finish","","",46,null],[11,"from_self","html5ever::encoding::codec::korean","",47,null],[11,"is_ascii_compatible","","",47,null],[11,"raw_feed","","",47,null],[11,"raw_finish","","",47,null],[11,"from_self","html5ever::encoding::codec::japanese","",48,null],[11,"is_ascii_compatible","","",48,null],[11,"raw_feed","","",48,null],[11,"raw_finish","","",48,null],[11,"from_self","","",49,null],[11,"is_ascii_compatible","","",49,null],[11,"raw_feed","","",49,null],[11,"raw_finish","","",49,null],[11,"from_self","","",50,null],[11,"is_ascii_compatible","","",50,null],[11,"raw_feed","","",50,null],[11,"raw_finish","","",50,null],[11,"from_self","html5ever::encoding::codec::simpchinese","",51,null],[11,"is_ascii_compatible","","",51,null],[11,"raw_feed","","",51,null],[11,"raw_finish","","",51,null],[11,"from_self","","",52,null],[11,"is_ascii_compatible","","",52,null],[11,"raw_feed","","",52,null],[11,"raw_finish","","",52,null],[11,"from_self","html5ever::encoding::codec::tradchinese","",53,null],[11,"is_ascii_compatible","","",53,null],[11,"raw_feed","","",53,null],[11,"raw_finish","","",53,null],[11,"from_self","html5ever::encoding::codec::error","",54,null],[11,"raw_feed","","",54,null],[11,"raw_finish","","",54,null],[11,"from_self","html5ever::encoding::codec::ascii","",55,null],[11,"is_ascii_compatible","","",55,null],[11,"raw_feed","","",55,null],[11,"raw_finish","","",55,null],[11,"from_self","html5ever::encoding::codec::singlebyte","",56,null],[11,"is_ascii_compatible","","",56,null],[11,"raw_feed","","",56,null],[11,"raw_finish","","",56,null],[11,"from_self","html5ever::encoding::codec::utf_8","",57,null],[11,"is_ascii_compatible","","",57,null],[11,"raw_feed","","",57,null],[11,"raw_finish","","",57,null],[11,"from_self","html5ever::encoding::codec::utf_16","",58,null],[11,"raw_feed","","",58,null],[11,"raw_finish","","",58,null],[11,"clone","html5ever::encoding::types","",3,null],[11,"clone","","",0,null],[11,"clone","html5ever::encoding::codec::error","",59,null],[11,"clone","","",42,null],[11,"clone","","",54,null],[11,"clone","html5ever::encoding::codec::ascii","",60,null],[11,"clone","","",43,null],[11,"clone","","",55,null],[11,"clone","html5ever::encoding::codec::singlebyte","",2,null],[11,"clone","","",44,null],[11,"clone","","",56,null],[11,"clone","html5ever::encoding::codec::utf_8","",61,null],[11,"clone","","",45,null],[11,"clone","","",57,null],[11,"clone","html5ever::encoding::codec::utf_16","",62,null],[11,"clone","","",63,null],[11,"clone","","",64,null],[11,"clone","","",46,null],[11,"clone","html5ever::encoding::codec::korean","",65,null],[11,"clone","","",47,null],[11,"clone","html5ever::encoding::codec::japanese","",66,null],[11,"clone","","",48,null],[11,"clone","","",67,null],[11,"clone","","",49,null],[11,"clone","","",68,null],[11,"clone","","",50,null],[11,"clone","html5ever::encoding::codec::simpchinese","",69,null],[11,"clone","","",70,null],[11,"clone","","",71,null],[11,"clone","","",51,null],[11,"clone","","",72,null],[11,"clone","","",52,null],[11,"clone","html5ever::encoding::codec::tradchinese","",73,null],[11,"clone","","",53,null],[11,"clone","html5ever::encoding::codec::whatwg","",74,null],[11,"name","html5ever::encoding::codec::error","",59,null],[11,"raw_encoder","","",59,null],[11,"raw_decoder","","",59,null],[11,"name","html5ever::encoding::codec::ascii","",60,null],[11,"raw_encoder","","",60,null],[11,"raw_decoder","","",60,null],[11,"name","html5ever::encoding::codec::singlebyte","",2,null],[11,"whatwg_name","","",2,null],[11,"raw_encoder","","",2,null],[11,"raw_decoder","","",2,null],[11,"name","html5ever::encoding::codec::utf_8","",61,null],[11,"whatwg_name","","",61,null],[11,"raw_encoder","","",61,null],[11,"raw_decoder","","",61,null],[11,"name","html5ever::encoding::codec::utf_16","",64,null],[11,"whatwg_name","","",64,null],[11,"raw_encoder","","",64,null],[11,"raw_decoder","","",64,null],[11,"name","html5ever::encoding::codec::korean","",65,null],[11,"whatwg_name","","",65,null],[11,"raw_encoder","","",65,null],[11,"raw_decoder","","",65,null],[11,"name","html5ever::encoding::codec::japanese","",66,null],[11,"whatwg_name","","",66,null],[11,"raw_encoder","","",66,null],[11,"raw_decoder","","",66,null],[11,"name","","",67,null],[11,"whatwg_name","","",67,null],[11,"raw_encoder","","",67,null],[11,"raw_decoder","","",67,null],[11,"name","","",68,null],[11,"whatwg_name","","",68,null],[11,"raw_encoder","","",68,null],[11,"raw_decoder","","",68,null],[11,"name","html5ever::encoding::codec::simpchinese","",71,null],[11,"whatwg_name","","",71,null],[11,"raw_encoder","","",71,null],[11,"raw_decoder","","",71,null],[11,"name","","",72,null],[11,"whatwg_name","","",72,null],[11,"raw_encoder","","",72,null],[11,"raw_decoder","","",72,null],[11,"name","html5ever::encoding::codec::tradchinese","",73,null],[11,"whatwg_name","","",73,null],[11,"raw_encoder","","",73,null],[11,"raw_decoder","","",73,null],[11,"name","html5ever::encoding::codec::whatwg","",74,null],[11,"whatwg_name","","",74,null],[11,"raw_encoder","","",74,null],[11,"raw_decoder","","",74,null],[11,"new","html5ever::encoding::codec::error","",42,{"inputs":[],"output":{"name":"box"}}],[11,"new","","",54,{"inputs":[],"output":{"name":"box"}}],[11,"new","html5ever::encoding::codec::ascii","",43,{"inputs":[],"output":{"name":"box"}}],[11,"new","","",55,{"inputs":[],"output":{"name":"box"}}],[11,"new","html5ever::encoding::codec::singlebyte","",44,null],[11,"new","","",56,null],[11,"new","html5ever::encoding::codec::utf_8","",45,{"inputs":[],"output":{"name":"box"}}],[11,"new","","",57,{"inputs":[],"output":{"name":"box"}}],[11,"new","html5ever::encoding::codec::utf_16","",58,{"inputs":[],"output":{"name":"box"}}],[11,"new","html5ever::encoding::codec::korean","",47,{"inputs":[],"output":{"name":"box"}}],[11,"new","html5ever::encoding::codec::japanese","",48,{"inputs":[],"output":{"name":"box"}}],[11,"new","","",49,{"inputs":[],"output":{"name":"box"}}],[11,"new","","",50,{"inputs":[],"output":{"name":"box"}}],[11,"new","html5ever::encoding::codec::simpchinese","",51,{"inputs":[],"output":{"name":"box"}}],[11,"new","","",52,{"inputs":[],"output":{"name":"box"}}],[11,"new","html5ever::encoding::codec::tradchinese","",53,{"inputs":[],"output":{"name":"box"}}],[11,"trap","html5ever::encoding::types","Handles a decoder error. May write to the output writer.\nReturns true only when it is fine to keep going.",3,null],[11,"adjusted_current_node_present_but_not_in_html_namespace","html5ever::tokenizer","Used in the markup declaration open state. By default, this always\nreturns false and thus all CDATA sections are tokenized as bogus\ncomments.\nhttps://html.spec.whatwg.org/multipage/#markup-declaration-open-state",20,null],[11,"query_state_change","","The tokenizer will call this after emitting any tag.\nThis allows the tree builder to change the tokenizer&#39;s state.\nBy default no state changes occur.",20,null]],"paths":[[4,"EncoderTrap"],[8,"RawEncoder"],[3,"SingleByteEncoding"],[4,"DecoderTrap"],[8,"Encoding"],[8,"ByteWriter"],[8,"RawDecoder"],[3,"CodecError"],[8,"StringWriter"],[3,"Attribute"],[3,"Doctype"],[3,"Tag"],[3,"TokenizerOpts"],[4,"TagKind"],[4,"Token"],[4,"ScriptEscapeKind"],[4,"DoctypeIdKind"],[4,"RawKind"],[4,"AttrValueKind"],[4,"State"],[8,"TokenSink"],[3,"Tokenizer"],[3,"TreeBuilderOpts"],[4,"QuirksMode"],[4,"NodeOrText"],[4,"NextParserState"],[8,"TreeSink"],[8,"Tracer"],[3,"TreeBuilder"],[3,"SerializeOpts"],[4,"TraversalScope"],[8,"Serializable"],[3,"Serializer"],[3,"ParseOpts"],[3,"Parser"],[3,"BytesOpts"],[3,"BytesParser"],[3,"Node"],[3,"RcDom"],[4,"ElementEnum"],[4,"NodeEnum"],[3,"Handle"],[3,"ErrorEncoder"],[3,"ASCIIEncoder"],[3,"SingleByteEncoder"],[3,"UTF8Encoder"],[3,"UTF16Encoder"],[3,"Windows949Encoder"],[3,"EUCJPEncoder"],[3,"Windows31JEncoder"],[3,"ISO2022JPEncoder"],[3,"GBEncoder"],[3,"HZEncoder"],[3,"BigFive2003Encoder"],[3,"ErrorDecoder"],[3,"ASCIIDecoder"],[3,"SingleByteDecoder"],[3,"UTF8Decoder"],[3,"UTF16Decoder"],[3,"ErrorEncoding"],[3,"ASCIIEncoding"],[3,"UTF8Encoding"],[3,"Little"],[3,"Big"],[3,"UTF16Encoding"],[3,"Windows949Encoding"],[3,"EUCJPEncoding"],[3,"Windows31JEncoding"],[3,"ISO2022JPEncoding"],[3,"GBK"],[3,"GB18030"],[3,"GBEncoding"],[3,"HZEncoding"],[3,"BigFive2003Encoding"],[3,"EncoderOnlyUTF8Encoding"]]};
searchIndex["serde_json"] = {"doc":"JSON and serialization","items":[[0,"builder","serde_json","JSON Builders",null,null],[3,"ArrayBuilder","serde_json::builder","This structure provides a simple interface for constructing a JSON array.",null,null],[3,"ObjectBuilder","","This structure provides a simple interface for constructing a JSON object.",null,null],[11,"default","","",0,{"inputs":[],"output":{"name":"arraybuilder"}}],[11,"new","","Construct an `ObjectBuilder`.",0,{"inputs":[],"output":{"name":"arraybuilder"}}],[11,"build","","Return the constructed `Value`.",0,null],[11,"push","","Insert a value into the array.",0,null],[11,"push_array","","Creates and passes an `ArrayBuilder` into a closure, then inserts the resulting array into\nthis array.",0,null],[11,"push_object","","Creates and passes an `ArrayBuilder` into a closure, then inserts the resulting object into\nthis array.",0,null],[11,"default","","",1,{"inputs":[],"output":{"name":"objectbuilder"}}],[11,"new","","Construct an `ObjectBuilder`.",1,{"inputs":[],"output":{"name":"objectbuilder"}}],[11,"build","","Return the constructed `Value`.",1,null],[11,"insert","","Insert a key-value pair into the object.",1,null],[11,"insert_array","","Creates and passes an `ObjectBuilder` into a closure, then inserts the resulting array into\nthis object.",1,null],[11,"insert_object","","Creates and passes an `ObjectBuilder` into a closure, then inserts the resulting object into\nthis object.",1,null],[0,"de","serde_json","JSON Deserialization",null,null],[3,"Deserializer","serde_json::de","A structure that deserializes JSON into Rust values.",null,null],[3,"StreamDeserializer","","Iterator that deserializes a stream into multiple JSON values.",null,null],[5,"from_iter","","Decodes a json value from an iterator over an iterator\n`Iterator&lt;Item=io::Result&lt;u8&gt;&gt;`.",null,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[5,"from_reader","","Decodes a json value from a `std::io::Read`.",null,{"inputs":[{"name":"r"}],"output":{"name":"result"}}],[5,"from_slice","","Decodes a json value from a byte slice `&amp;[u8]`.",null,null],[5,"from_str","","Decodes a json value from a `&amp;str`.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Creates the JSON parser from an `std::iter::Iterator`.",2,{"inputs":[{"name":"iter"}],"output":{"name":"self"}}],[11,"end","","The `Deserializer::end` method should be called after a value has been fully deserialized.\nThis allows the `Deserializer` to validate that the input stream is at the end or that it\nonly has trailing whitespace.",2,null],[11,"deserialize","","",2,null],[11,"deserialize_option","","Parses a `null` as a None, and any other values as a `Some(...)`.",2,null],[11,"deserialize_newtype_struct","","Parses a newtype struct as the underlying value.",2,null],[11,"deserialize_enum","","Parses an enum as an object like `{&quot;$KEY&quot;:$VALUE}`, where $VALUE is either a straight\nvalue, a `[..]`, or a `{..}`.",2,null],[11,"deserialize_bool","","",2,null],[11,"deserialize_usize","","",2,null],[11,"deserialize_u8","","",2,null],[11,"deserialize_u16","","",2,null],[11,"deserialize_u32","","",2,null],[11,"deserialize_u64","","",2,null],[11,"deserialize_isize","","",2,null],[11,"deserialize_i8","","",2,null],[11,"deserialize_i16","","",2,null],[11,"deserialize_i32","","",2,null],[11,"deserialize_i64","","",2,null],[11,"deserialize_f32","","",2,null],[11,"deserialize_f64","","",2,null],[11,"deserialize_char","","",2,null],[11,"deserialize_str","","",2,null],[11,"deserialize_string","","",2,null],[11,"deserialize_unit","","",2,null],[11,"deserialize_seq","","",2,null],[11,"deserialize_seq_fixed_size","","",2,null],[11,"deserialize_bytes","","",2,null],[11,"deserialize_map","","",2,null],[11,"deserialize_unit_struct","","",2,null],[11,"deserialize_tuple_struct","","",2,null],[11,"deserialize_struct","","",2,null],[11,"deserialize_struct_field","","",2,null],[11,"deserialize_tuple","","",2,null],[11,"deserialize_ignored_any","","",2,null],[11,"new","","Returns an `Iterator` of decoded JSON values from an iterator over\n`Iterator&lt;Item=io::Result&lt;u8&gt;&gt;`.",3,{"inputs":[{"name":"iter"}],"output":{"name":"streamdeserializer"}}],[11,"next","","",3,null],[0,"error","serde_json","JSON Errors",null,null],[4,"ErrorCode","serde_json::error","The errors that can arise while parsing a JSON stream.",null,null],[13,"Custom","","Catchall for syntax error messages",4,null],[13,"InvalidType","","Incorrect type from value",4,null],[13,"InvalidValue","","Incorrect value",4,null],[13,"InvalidLength","","Invalid length",4,null],[13,"UnknownVariant","","Unknown variant in an enum.",4,null],[13,"UnknownField","","Unknown field in struct.",4,null],[13,"MissingField","","Struct is missing a field.",4,null],[13,"EOFWhileParsingList","","EOF while parsing a list.",4,null],[13,"EOFWhileParsingObject","","EOF while parsing an object.",4,null],[13,"EOFWhileParsingString","","EOF while parsing a string.",4,null],[13,"EOFWhileParsingValue","","EOF while parsing a JSON value.",4,null],[13,"ExpectedColon","","Expected this character to be a `&#39;:&#39;`.",4,null],[13,"ExpectedListCommaOrEnd","","Expected this character to be either a `&#39;,&#39;` or a `]`.",4,null],[13,"ExpectedObjectCommaOrEnd","","Expected this character to be either a `&#39;,&#39;` or a `}`.",4,null],[13,"ExpectedSomeIdent","","Expected to parse either a `true`, `false`, or a `null`.",4,null],[13,"ExpectedSomeValue","","Expected this character to start a JSON value.",4,null],[13,"InvalidEscape","","Invalid hex escape code.",4,null],[13,"InvalidNumber","","Invalid number.",4,null],[13,"NumberOutOfRange","","Number is bigger than the maximum value of its type.",4,null],[13,"InvalidUnicodeCodePoint","","Invalid unicode code point.",4,null],[13,"KeyMustBeAString","","Object key is not a string.",4,null],[13,"LoneLeadingSurrogateInHexEscape","","Lone leading surrogate in hex escape.",4,null],[13,"TrailingCharacters","","JSON has non-whitespace trailing characters after the value.",4,null],[13,"UnexpectedEndOfHexEscape","","Unexpected end of hex excape.",4,null],[4,"Error","","This type represents all possible errors that can occur when serializing or deserializing a\nvalue into JSON.",null,null],[13,"Syntax","","The JSON value had some syntatic error.",5,null],[13,"Io","","Some IO error occurred when serializing or deserializing a value.",5,null],[6,"Result","","Helper alias for `Result` objects that return a JSON `Error`.",null,null],[11,"clone","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"fmt","","",4,null],[11,"fmt","","",4,null],[11,"fmt","","",5,null],[11,"description","","",5,null],[11,"cause","","",5,null],[11,"fmt","","",5,null],[11,"from","","",5,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",5,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"custom","","",5,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[11,"end_of_stream","","",5,{"inputs":[],"output":{"name":"error"}}],[11,"invalid_type","","",5,{"inputs":[{"name":"type"}],"output":{"name":"error"}}],[11,"invalid_value","","",5,{"inputs":[{"name":"str"}],"output":{"name":"error"}}],[11,"invalid_length","","",5,{"inputs":[{"name":"usize"}],"output":{"name":"error"}}],[11,"unknown_variant","","",5,{"inputs":[{"name":"str"}],"output":{"name":"error"}}],[11,"unknown_field","","",5,{"inputs":[{"name":"str"}],"output":{"name":"error"}}],[11,"missing_field","","",5,{"inputs":[{"name":"str"}],"output":{"name":"error"}}],[11,"custom","","Raised when there is general error when deserializing a type.",5,{"inputs":[{"name":"t"}],"output":{"name":"error"}}],[0,"ser","serde_json","JSON Serialization",null,null],[3,"Serializer","serde_json::ser","A structure for serializing Rust values into JSON.",null,null],[3,"CompactFormatter","","This structure compacts a JSON value with no extra whitespace.",null,null],[3,"PrettyFormatter","","This structure pretty prints a JSON value to make it human readable.",null,null],[5,"escape_str","","Serializes and escapes a `&amp;str` into a JSON string.",null,{"inputs":[{"name":"w"},{"name":"str"}],"output":{"name":"result"}}],[5,"to_writer","","Encode the specified struct into a json `[u8]` writer.",null,{"inputs":[{"name":"w"},{"name":"t"}],"output":{"name":"result"}}],[5,"to_writer_pretty","","Encode the specified struct into a json `[u8]` writer.",null,{"inputs":[{"name":"w"},{"name":"t"}],"output":{"name":"result"}}],[5,"to_vec","","Encode the specified struct into a json `[u8]` buffer.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"to_vec_pretty","","Encode the specified struct into a json `[u8]` buffer.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"to_string","","Encode the specified struct into a json `String` buffer.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[5,"to_string_pretty","","Encode the specified struct into a json `String` buffer.",null,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[8,"Formatter","","This trait abstracts away serializing the JSON control characters, which allows the user to\noptionally pretty print the JSON output.",null,null],[10,"open","","Called when serializing a &#39;{&#39; or &#39;[&#39;.",6,null],[10,"comma","","Called when serializing a &#39;,&#39;.",6,null],[10,"colon","","Called when serializing a &#39;:&#39;.",6,null],[10,"close","","Called when serializing a &#39;}&#39; or &#39;]&#39;.",6,null],[11,"new","","Creates a new JSON serializer.",7,{"inputs":[{"name":"w"}],"output":{"name":"self"}}],[11,"pretty","","Creates a new JSON pretty print serializer.",7,{"inputs":[{"name":"w"}],"output":{"name":"self"}}],[11,"with_formatter","","Creates a new JSON visitor whose output will be written to the writer\nspecified.",7,{"inputs":[{"name":"w"},{"name":"f"}],"output":{"name":"self"}}],[11,"into_inner","","Unwrap the `Writer` from the `Serializer`.",7,null],[11,"serialize_bool","","",7,null],[11,"serialize_isize","","",7,null],[11,"serialize_i8","","",7,null],[11,"serialize_i16","","",7,null],[11,"serialize_i32","","",7,null],[11,"serialize_i64","","",7,null],[11,"serialize_usize","","",7,null],[11,"serialize_u8","","",7,null],[11,"serialize_u16","","",7,null],[11,"serialize_u32","","",7,null],[11,"serialize_u64","","",7,null],[11,"serialize_f32","","",7,null],[11,"serialize_f64","","",7,null],[11,"serialize_char","","",7,null],[11,"serialize_str","","",7,null],[11,"serialize_bytes","","",7,null],[11,"serialize_unit","","",7,null],[11,"serialize_unit_struct","","",7,null],[11,"serialize_unit_variant","","",7,null],[11,"serialize_newtype_struct","","Serialize newtypes without an object wrapper.",7,null],[11,"serialize_newtype_variant","","",7,null],[11,"serialize_none","","",7,null],[11,"serialize_some","","",7,null],[11,"serialize_seq","","",7,null],[11,"serialize_seq_elt","","",7,null],[11,"serialize_seq_end","","",7,null],[11,"serialize_seq_fixed_size","","",7,null],[11,"serialize_tuple","","",7,null],[11,"serialize_tuple_elt","","",7,null],[11,"serialize_tuple_end","","",7,null],[11,"serialize_tuple_struct","","",7,null],[11,"serialize_tuple_struct_elt","","",7,null],[11,"serialize_tuple_struct_end","","",7,null],[11,"serialize_tuple_variant","","",7,null],[11,"serialize_tuple_variant_elt","","",7,null],[11,"serialize_tuple_variant_end","","",7,null],[11,"serialize_map","","",7,null],[11,"serialize_map_key","","",7,null],[11,"serialize_map_value","","",7,null],[11,"serialize_map_end","","",7,null],[11,"serialize_struct","","",7,null],[11,"serialize_struct_elt","","",7,null],[11,"serialize_struct_end","","",7,null],[11,"serialize_struct_variant","","",7,null],[11,"serialize_struct_variant_elt","","",7,null],[11,"serialize_struct_variant_end","","",7,null],[11,"clone","","",8,null],[11,"fmt","","",8,null],[11,"open","","",8,null],[11,"comma","","",8,null],[11,"colon","","",8,null],[11,"close","","",8,null],[11,"clone","","",9,null],[11,"fmt","","",9,null],[11,"new","","Construct a pretty printer formatter that defaults to using two spaces for indentation.",9,{"inputs":[],"output":{"name":"self"}}],[11,"with_indent","","Construct a pretty printer formatter that uses the `indent` string for indentation.",9,null],[11,"default","","",9,{"inputs":[],"output":{"name":"self"}}],[11,"open","","",9,null],[11,"comma","","",9,null],[11,"colon","","",9,null],[11,"close","","",9,null],[0,"value","serde_json","JSON Value",null,null],[3,"Serializer","serde_json::value","Create a `serde::Serializer` that serializes a `Serialize`e into a `Value`.",null,null],[3,"Deserializer","","Creates a `serde::Deserializer` from a `json::Value` object.",null,null],[4,"Value","","Represents a JSON value",null,null],[13,"Null","","Represents a JSON null value",10,null],[13,"Bool","","Represents a JSON Boolean",10,null],[13,"I64","","Represents a JSON signed integer",10,null],[13,"U64","","Represents a JSON unsigned integer",10,null],[13,"F64","","Represents a JSON floating point number",10,null],[13,"String","","Represents a JSON string",10,null],[13,"Array","","Represents a JSON array",10,null],[13,"Object","","Represents a JSON object",10,null],[5,"to_value","","Shortcut function to encode a `T` into a JSON `Value`",null,{"inputs":[{"name":"t"}],"output":{"name":"value"}}],[5,"from_value","","Shortcut function to decode a JSON `Value` into a `T`",null,{"inputs":[{"name":"value"}],"output":{"name":"result"}}],[6,"Map","","Represents a key/value type.",null,null],[6,"MapIntoIter","","Represents the `IntoIter` type.",null,null],[8,"ToJson","","A trait for converting values to JSON",null,null],[10,"to_json","","Converts the value of `self` to an instance of JSON",11,null],[11,"clone","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"find","","If the `Value` is an Object, returns the value associated with the provided key.\nOtherwise, returns None.",10,null],[11,"find_path","","Attempts to get a nested Value Object for each key in `keys`.\nIf any key is found not to exist, find_path will return None.\nOtherwise, it will return the `Value` associated with the final key.",10,null],[11,"lookup","","**Deprecated**: Use `Value.pointer()` and pointer syntax instead.",10,null],[11,"pointer","","Looks up a value by a JSON Pointer.",10,null],[11,"search","","If the `Value` is an Object, performs a depth-first search until\na value associated with the provided key is found. If no value is found\nor the `Value` is not an Object, returns None.",10,null],[11,"is_object","","Returns true if the `Value` is an Object. Returns false otherwise.",10,null],[11,"as_object","","If the `Value` is an Object, returns the associated Map.\nReturns None otherwise.",10,null],[11,"as_object_mut","","If the `Value` is an Object, returns the associated mutable Map.\nReturns None otherwise.",10,null],[11,"is_array","","Returns true if the `Value` is an Array. Returns false otherwise.",10,null],[11,"as_array","","If the `Value` is an Array, returns the associated vector.\nReturns None otherwise.",10,null],[11,"as_array_mut","","If the `Value` is an Array, returns the associated mutable vector.\nReturns None otherwise.",10,null],[11,"is_string","","Returns true if the `Value` is a String. Returns false otherwise.",10,null],[11,"as_str","","If the `Value` is a String, returns the associated str.\nReturns None otherwise.",10,null],[11,"is_number","","Returns true if the `Value` is a Number. Returns false otherwise.",10,null],[11,"is_i64","","Returns true if the `Value` is a i64. Returns false otherwise.",10,null],[11,"is_u64","","Returns true if the `Value` is a u64. Returns false otherwise.",10,null],[11,"is_f64","","Returns true if the `Value` is a f64. Returns false otherwise.",10,null],[11,"as_i64","","If the `Value` is a number, return or cast it to a i64.\nReturns None otherwise.",10,null],[11,"as_u64","","If the `Value` is a number, return or cast it to a u64.\nReturns None otherwise.",10,null],[11,"as_f64","","If the `Value` is a number, return or cast it to a f64.\nReturns None otherwise.",10,null],[11,"is_boolean","","Returns true if the `Value` is a Boolean. Returns false otherwise.",10,null],[11,"as_bool","","If the `Value` is a Boolean, returns the associated bool.\nReturns None otherwise.",10,null],[11,"is_null","","Returns true if the `Value` is a Null. Returns false otherwise.",10,null],[11,"as_null","","If the `Value` is a Null, returns ().\nReturns None otherwise.",10,null],[11,"serialize","","",10,null],[11,"deserialize","","",10,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","Serializes a json value into a string",10,null],[11,"fmt","","Serializes a json value into a string",10,null],[11,"from_str","","",10,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Construct a new `Serializer`.",12,{"inputs":[],"output":{"name":"serializer"}}],[11,"unwrap","","Unwrap the `Serializer` and return the `Value`.",12,null],[11,"default","","",12,{"inputs":[],"output":{"name":"self"}}],[11,"serialize_bool","","",12,null],[11,"serialize_isize","","",12,null],[11,"serialize_i8","","",12,null],[11,"serialize_i16","","",12,null],[11,"serialize_i32","","",12,null],[11,"serialize_i64","","",12,null],[11,"serialize_usize","","",12,null],[11,"serialize_u8","","",12,null],[11,"serialize_u16","","",12,null],[11,"serialize_u32","","",12,null],[11,"serialize_u64","","",12,null],[11,"serialize_f32","","",12,null],[11,"serialize_f64","","",12,null],[11,"serialize_char","","",12,null],[11,"serialize_str","","",12,null],[11,"serialize_bytes","","",12,null],[11,"serialize_unit","","",12,null],[11,"serialize_unit_struct","","",12,null],[11,"serialize_unit_variant","","",12,null],[11,"serialize_newtype_struct","","",12,null],[11,"serialize_newtype_variant","","",12,null],[11,"serialize_none","","",12,null],[11,"serialize_some","","",12,null],[11,"serialize_seq","","",12,null],[11,"serialize_seq_elt","","",12,null],[11,"serialize_seq_end","","",12,null],[11,"serialize_seq_fixed_size","","",12,null],[11,"serialize_tuple","","",12,null],[11,"serialize_tuple_elt","","",12,null],[11,"serialize_tuple_end","","",12,null],[11,"serialize_tuple_struct","","",12,null],[11,"serialize_tuple_struct_elt","","",12,null],[11,"serialize_tuple_struct_end","","",12,null],[11,"serialize_tuple_variant","","",12,null],[11,"serialize_tuple_variant_elt","","",12,null],[11,"serialize_tuple_variant_end","","",12,null],[11,"serialize_map","","",12,null],[11,"serialize_map_key","","",12,null],[11,"serialize_map_value","","",12,null],[11,"serialize_map_end","","",12,null],[11,"serialize_struct","","",12,null],[11,"serialize_struct_elt","","",12,null],[11,"serialize_struct_end","","",12,null],[11,"serialize_struct_variant","","",12,null],[11,"serialize_struct_variant_elt","","",12,null],[11,"serialize_struct_variant_end","","",12,null],[11,"new","","Creates a new deserializer instance for deserializing the specified JSON value.",13,{"inputs":[{"name":"value"}],"output":{"name":"deserializer"}}],[11,"deserialize","","",13,null],[11,"deserialize_option","","",13,null],[11,"deserialize_enum","","",13,null],[11,"deserialize_newtype_struct","","",13,null],[11,"deserialize_bool","","",13,null],[11,"deserialize_usize","","",13,null],[11,"deserialize_u8","","",13,null],[11,"deserialize_u16","","",13,null],[11,"deserialize_u32","","",13,null],[11,"deserialize_u64","","",13,null],[11,"deserialize_isize","","",13,null],[11,"deserialize_i8","","",13,null],[11,"deserialize_i16","","",13,null],[11,"deserialize_i32","","",13,null],[11,"deserialize_i64","","",13,null],[11,"deserialize_f32","","",13,null],[11,"deserialize_f64","","",13,null],[11,"deserialize_char","","",13,null],[11,"deserialize_str","","",13,null],[11,"deserialize_string","","",13,null],[11,"deserialize_unit","","",13,null],[11,"deserialize_seq","","",13,null],[11,"deserialize_seq_fixed_size","","",13,null],[11,"deserialize_bytes","","",13,null],[11,"deserialize_map","","",13,null],[11,"deserialize_unit_struct","","",13,null],[11,"deserialize_tuple_struct","","",13,null],[11,"deserialize_struct","","",13,null],[11,"deserialize_struct_field","","",13,null],[11,"deserialize_tuple","","",13,null],[11,"deserialize_ignored_any","","",13,null]],"paths":[[3,"ArrayBuilder"],[3,"ObjectBuilder"],[3,"Deserializer"],[3,"StreamDeserializer"],[4,"ErrorCode"],[4,"Error"],[8,"Formatter"],[3,"Serializer"],[3,"CompactFormatter"],[3,"PrettyFormatter"],[4,"Value"],[8,"ToJson"],[3,"Serializer"],[3,"Deserializer"]]};
searchIndex["string_cache"] = {"doc":"","items":[[0,"atom","string_cache","",null,null],[3,"Atom","string_cache::atom","",null,null],[3,"BorrowedAtom","","",null,null],[12,"0","","",0,null],[7,"STATIC_ATOM_SET","","",null,null],[11,"hash","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"deref","","",0,null],[11,"eq","","",0,null],[11,"get_hash","","",1,null],[11,"with_str","","",1,null],[11,"default","","",1,{"inputs":[],"output":{"name":"self"}}],[11,"eq","","",1,null],[11,"eq","","",1,null],[11,"from","","",1,{"inputs":[{"name":"cow"}],"output":{"name":"atom"}}],[11,"from","","",1,{"inputs":[{"name":"str"}],"output":{"name":"atom"}}],[11,"from","","",1,{"inputs":[{"name":"string"}],"output":{"name":"atom"}}],[11,"clone","","",1,null],[11,"drop","","",1,null],[11,"deref","","",1,null],[11,"fmt","","",1,null],[11,"fmt","","",1,null],[11,"partial_cmp","","",1,null],[11,"cmp","","",1,null],[11,"as_ref","","",1,null],[11,"serialize","","",1,null],[11,"deserialize","","",1,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"to_ascii_uppercase","","",1,null],[11,"to_ascii_lowercase","","",1,null],[11,"eq_ignore_ascii_case","","",1,null],[11,"eq_str_ignore_ascii_case","","",1,null],[0,"namespace","string_cache","**Note:** This may move as string-cache becomes less Web-specific.",null,null],[3,"Namespace","string_cache::namespace","An atom that is meant to represent a namespace in the HTML / XML sense.\nWhether a given string represents a namespace is contextual, so this is\na transparent wrapper that will not catch all mistakes.",null,null],[12,"0","","",2,null],[3,"BorrowedNamespace","","",null,null],[12,"0","","",3,null],[3,"QualName","","A name with a namespace.",null,null],[12,"ns","","",4,null],[12,"local","","",4,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"partial_cmp","","",2,null],[11,"lt","","",2,null],[11,"le","","",2,null],[11,"gt","","",2,null],[11,"ge","","",2,null],[11,"cmp","","",2,null],[11,"hash","","",2,null],[11,"fmt","","",2,null],[11,"clone","","",2,null],[11,"default","","",2,{"inputs":[],"output":{"name":"namespace"}}],[11,"deref","","",3,null],[11,"eq","","",3,null],[11,"fmt","","",2,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"partial_cmp","","",4,null],[11,"lt","","",4,null],[11,"le","","",4,null],[11,"gt","","",4,null],[11,"ge","","",4,null],[11,"cmp","","",4,null],[11,"hash","","",4,null],[11,"fmt","","",4,null],[11,"clone","","",4,null],[11,"new","","",4,{"inputs":[{"name":"namespace"},{"name":"atom"}],"output":{"name":"qualname"}}],[0,"shared","string_cache","",null,null],[3,"StaticAtomSet","string_cache::shared","",null,null],[12,"key","","",5,null],[12,"disps","","",5,null],[12,"atoms","","",5,null],[5,"pack_static","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"u64"}}],[17,"DYNAMIC_TAG","","",null,null],[17,"INLINE_TAG","","",null,null],[17,"STATIC_TAG","","",null,null],[17,"TAG_MASK","","",null,null],[17,"ENTRY_ALIGNMENT","","",null,null],[17,"MAX_INLINE_LEN","","",null,null],[17,"STATIC_SHIFT_BITS","","",null,null],[11,"get_index_or_hash","","",5,null],[11,"index","","",5,null],[11,"iter","","",5,null],[14,"qualname","string_cache","",null,null],[14,"ns","","",null,null],[14,"atom","","",null,null]],"paths":[[3,"BorrowedAtom"],[3,"Atom"],[3,"Namespace"],[3,"BorrowedNamespace"],[3,"QualName"],[3,"StaticAtomSet"]]};
searchIndex["serde"] = {"doc":"Serde Serialization Framework","items":[[0,"bytes","serde","Helper module to enable serializing bytes more efficiently",null,null],[3,"ByteBuf","serde::bytes","`ByteBuf` wraps a `Vec&lt;u8&gt;` and serializes as a byte array.",null,null],[3,"ByteBufVisitor","","This type implements the `serde::de::Visitor` trait for a `ByteBuf`.",null,null],[3,"Bytes","","`Bytes` wraps a `&amp;[u8]` in order to serialize into a byte array.",null,null],[11,"clone","","",0,null],[11,"default","","",0,{"inputs":[],"output":{"name":"bytebuf"}}],[11,"hash","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"partial_cmp","","",0,null],[11,"lt","","",0,null],[11,"le","","",0,null],[11,"gt","","",0,null],[11,"ge","","",0,null],[11,"cmp","","",0,null],[11,"new","","Construct a new, empty `ByteBuf`.",0,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Construct a new, empty `ByteBuf` with the specified capacity.",0,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from","","Wrap existing bytes in a `ByteBuf`.",0,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"fmt","","",0,null],[11,"into","","",0,null],[11,"from","","",0,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"as_ref","","",0,null],[11,"as_ref","","",0,null],[11,"as_mut","","",0,null],[11,"as_mut","","",0,null],[11,"deref","","",0,null],[11,"deref_mut","","",0,null],[11,"serialize","","",0,null],[11,"visit_unit","","",1,null],[11,"visit_seq","","",1,null],[11,"visit_bytes","","",1,null],[11,"visit_byte_buf","","",1,null],[11,"deserialize","","",0,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"clone","","",2,null],[11,"hash","","",2,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"partial_cmp","","",2,null],[11,"lt","","",2,null],[11,"le","","",2,null],[11,"gt","","",2,null],[11,"ge","","",2,null],[11,"cmp","","",2,null],[11,"new","","Wrap an existing `&amp;[u8]`.",2,null],[11,"fmt","","",2,null],[11,"from","","",2,null],[11,"from","","",2,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"into","","",2,null],[11,"deref","","",2,null],[11,"serialize","","",2,null],[0,"de","serde","Generic deserialization framework.",null,null],[4,"Type","serde::de","`Type` represents all the primitive types that can be deserialized. This is used by\n`Error::invalid_type`.",null,null],[13,"Bool","","Represents a `bool` type.",3,null],[13,"Usize","","Represents a `usize` type.",3,null],[13,"U8","","Represents a `u8` type.",3,null],[13,"U16","","Represents a `u16` type.",3,null],[13,"U32","","Represents a `u32` type.",3,null],[13,"U64","","Represents a `u64` type.",3,null],[13,"Isize","","Represents a `isize` type.",3,null],[13,"I8","","Represents a `i8` type.",3,null],[13,"I16","","Represents a `i16` type.",3,null],[13,"I32","","Represents a `i32` type.",3,null],[13,"I64","","Represents a `i64` type.",3,null],[13,"F32","","Represents a `f32` type.",3,null],[13,"F64","","Represents a `f64` type.",3,null],[13,"Char","","Represents a `char` type.",3,null],[13,"Str","","Represents a `&amp;str` type.",3,null],[13,"String","","Represents a `String` type.",3,null],[13,"Unit","","Represents a `()` type.",3,null],[13,"Option","","Represents an `Option&lt;T&gt;` type.",3,null],[13,"Seq","","Represents a sequence type.",3,null],[13,"Map","","Represents a map type.",3,null],[13,"UnitStruct","","Represents a unit struct type.",3,null],[13,"NewtypeStruct","","Represents a newtype type.",3,null],[13,"TupleStruct","","Represents a tuple struct type.",3,null],[13,"Struct","","Represents a struct type.",3,null],[13,"FieldName","","Represents a struct field name.",3,null],[13,"Tuple","","Represents a tuple type.",3,null],[13,"Enum","","Represents an `enum` type.",3,null],[13,"VariantName","","Represents an enum variant name.",3,null],[13,"StructVariant","","Represents a struct variant.",3,null],[13,"TupleVariant","","Represents a tuple variant.",3,null],[13,"UnitVariant","","Represents a unit variant.",3,null],[13,"Bytes","","Represents a `&amp;[u8]` type.",3,null],[0,"impls","","This module contains `Deserialize` and `Visitor` implementations.",null,null],[3,"UnitVisitor","serde::de::impls","A visitor that produces a `()`.",null,null],[3,"BoolVisitor","","A visitor that produces a `bool`.",null,null],[3,"PhantomDataVisitor","","A visitor that produces a `PhantomData`.",null,null],[3,"BinaryHeapVisitor","","A visitor that produces a sequence.",null,null],[3,"BTreeSetVisitor","","A visitor that produces a sequence.",null,null],[3,"LinkedListVisitor","","A visitor that produces a sequence.",null,null],[3,"HashSetVisitor","","A visitor that produces a sequence.",null,null],[3,"VecVisitor","","A visitor that produces a sequence.",null,null],[3,"VecDequeVisitor","","A visitor that produces a sequence.",null,null],[3,"TupleVisitor1","","Construct a tuple visitor.",null,null],[3,"TupleVisitor2","","Construct a tuple visitor.",null,null],[3,"TupleVisitor3","","Construct a tuple visitor.",null,null],[3,"TupleVisitor4","","Construct a tuple visitor.",null,null],[3,"TupleVisitor5","","Construct a tuple visitor.",null,null],[3,"TupleVisitor6","","Construct a tuple visitor.",null,null],[3,"TupleVisitor7","","Construct a tuple visitor.",null,null],[3,"TupleVisitor8","","Construct a tuple visitor.",null,null],[3,"TupleVisitor9","","Construct a tuple visitor.",null,null],[3,"TupleVisitor10","","Construct a tuple visitor.",null,null],[3,"TupleVisitor11","","Construct a tuple visitor.",null,null],[3,"TupleVisitor12","","Construct a tuple visitor.",null,null],[3,"TupleVisitor13","","Construct a tuple visitor.",null,null],[3,"TupleVisitor14","","Construct a tuple visitor.",null,null],[3,"TupleVisitor15","","Construct a tuple visitor.",null,null],[3,"TupleVisitor16","","Construct a tuple visitor.",null,null],[3,"BTreeMapVisitor","","A visitor that produces a map.",null,null],[3,"HashMapVisitor","","A visitor that produces a map.",null,null],[3,"IgnoredAny","","A target for deserializers that want to ignore data. Implements\nDeserialize and silently eats data given to it.",null,null],[11,"visit_unit","","",4,null],[11,"visit_seq","","",4,null],[11,"visit_bool","","",5,null],[11,"visit_str","","",5,null],[11,"visit_unit","","",6,null],[11,"new","","Construct a new sequence visitor.",7,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",7,null],[11,"visit_seq","","",7,null],[11,"new","","Construct a new sequence visitor.",8,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",8,null],[11,"visit_seq","","",8,null],[11,"new","","Construct a new sequence visitor.",9,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",9,null],[11,"visit_seq","","",9,null],[11,"new","","Construct a new sequence visitor.",10,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",10,null],[11,"visit_seq","","",10,null],[11,"new","","Construct a new sequence visitor.",11,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",11,null],[11,"visit_seq","","",11,null],[11,"new","","Construct a new sequence visitor.",12,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",12,null],[11,"visit_seq","","",12,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",13,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",13,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",14,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",14,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",15,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",15,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",16,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",16,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",17,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",17,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",18,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",18,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",19,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",19,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",20,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",20,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",21,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",21,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",22,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",22,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",23,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",23,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",24,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",24,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",25,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",25,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",26,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",26,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",27,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",27,null],[11,"new","","Construct a `TupleVisitor*&lt;T&gt;`.",28,{"inputs":[],"output":{"name":"self"}}],[11,"visit_seq","","",28,null],[11,"new","","Construct a `MapVisitor*&lt;T&gt;`.",29,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",29,null],[11,"visit_map","","",29,null],[11,"new","","Construct a `MapVisitor*&lt;T&gt;`.",30,{"inputs":[],"output":{"name":"self"}}],[11,"visit_unit","","",30,null],[11,"visit_map","","",30,null],[11,"deserialize","","",31,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[0,"value","serde::de","This module supports deserializing from primitives with the `ValueDeserializer` trait.",null,null],[3,"UnitDeserializer","serde::de::value","A helper deserializer that deserializes a `()`.",null,null],[3,"BoolDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I8Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I16Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I32Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"I64Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"IsizeDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U8Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U16Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U32Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"U64Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"UsizeDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"F32Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"F64Deserializer","","A helper deserializer that deserializes a number.",null,null],[3,"CharDeserializer","","A helper deserializer that deserializes a number.",null,null],[3,"StrDeserializer","","A helper deserializer that deserializes a `&amp;str`.",null,null],[3,"StringDeserializer","","A helper deserializer that deserializes a `String`.",null,null],[3,"CowStrDeserializer","","A helper deserializer that deserializes a `String`.",null,null],[3,"SeqDeserializer","","A helper deserializer that deserializes a sequence.",null,null],[3,"SeqVisitorDeserializer","","A helper deserializer that deserializes a sequence using a `SeqVisitor`.",null,null],[3,"MapDeserializer","","A helper deserializer that deserializes a map.",null,null],[3,"MapVisitorDeserializer","","A helper deserializer that deserializes a map using a `MapVisitor`.",null,null],[3,"BytesDeserializer","","A helper deserializer that deserializes a `&amp;[u8]`.",null,null],[3,"ByteBufDeserializer","","A helper deserializer that deserializes a `Vec&lt;u8&gt;`.",null,null],[4,"Error","","This represents all the possible errors that can occur using the `ValueDeserializer`.",null,null],[13,"Custom","","The value had some custom error.",32,null],[13,"InvalidType","","The value had an incorrect type.",32,null],[13,"InvalidLength","","The value had an invalid length.",32,null],[13,"InvalidValue","","The value is invalid and cannot be deserialized.",32,null],[13,"EndOfStream","","EOF while deserializing a value.",32,null],[13,"UnknownVariant","","Unknown variant in enum.",32,null],[13,"UnknownField","","Unknown field in struct.",32,null],[13,"MissingField","","Struct is missing a field.",32,null],[8,"ValueDeserializer","","This trait converts primitive types into a deserializer.",null,null],[16,"Deserializer","","The actual deserializer type.",33,null],[10,"into_deserializer","","Convert this value into a deserializer.",33,null],[11,"clone","","",32,null],[11,"fmt","","",32,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"custom","","",32,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"end_of_stream","","",32,{"inputs":[],"output":{"name":"self"}}],[11,"invalid_type","","",32,{"inputs":[{"name":"type"}],"output":{"name":"self"}}],[11,"invalid_value","","",32,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"invalid_length","","",32,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"unknown_variant","","",32,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"unknown_field","","",32,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"missing_field","","",32,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"fmt","","",32,null],[11,"description","","",32,null],[11,"cause","","",32,null],[11,"deserialize_bool","","",34,null],[11,"deserialize_usize","","",34,null],[11,"deserialize_u8","","",34,null],[11,"deserialize_u16","","",34,null],[11,"deserialize_u32","","",34,null],[11,"deserialize_u64","","",34,null],[11,"deserialize_isize","","",34,null],[11,"deserialize_i8","","",34,null],[11,"deserialize_i16","","",34,null],[11,"deserialize_i32","","",34,null],[11,"deserialize_i64","","",34,null],[11,"deserialize_f32","","",34,null],[11,"deserialize_f64","","",34,null],[11,"deserialize_char","","",34,null],[11,"deserialize_str","","",34,null],[11,"deserialize_string","","",34,null],[11,"deserialize_unit","","",34,null],[11,"deserialize_seq","","",34,null],[11,"deserialize_seq_fixed_size","","",34,null],[11,"deserialize_bytes","","",34,null],[11,"deserialize_map","","",34,null],[11,"deserialize_unit_struct","","",34,null],[11,"deserialize_newtype_struct","","",34,null],[11,"deserialize_tuple_struct","","",34,null],[11,"deserialize_struct","","",34,null],[11,"deserialize_struct_field","","",34,null],[11,"deserialize_tuple","","",34,null],[11,"deserialize_enum","","",34,null],[11,"deserialize_ignored_any","","",34,null],[11,"deserialize","","",34,null],[11,"deserialize_option","","",34,null],[11,"deserialize_bool","","",35,null],[11,"deserialize_usize","","",35,null],[11,"deserialize_u8","","",35,null],[11,"deserialize_u16","","",35,null],[11,"deserialize_u32","","",35,null],[11,"deserialize_u64","","",35,null],[11,"deserialize_isize","","",35,null],[11,"deserialize_i8","","",35,null],[11,"deserialize_i16","","",35,null],[11,"deserialize_i32","","",35,null],[11,"deserialize_i64","","",35,null],[11,"deserialize_f32","","",35,null],[11,"deserialize_f64","","",35,null],[11,"deserialize_char","","",35,null],[11,"deserialize_str","","",35,null],[11,"deserialize_string","","",35,null],[11,"deserialize_unit","","",35,null],[11,"deserialize_option","","",35,null],[11,"deserialize_seq","","",35,null],[11,"deserialize_seq_fixed_size","","",35,null],[11,"deserialize_bytes","","",35,null],[11,"deserialize_map","","",35,null],[11,"deserialize_unit_struct","","",35,null],[11,"deserialize_newtype_struct","","",35,null],[11,"deserialize_tuple_struct","","",35,null],[11,"deserialize_struct","","",35,null],[11,"deserialize_struct_field","","",35,null],[11,"deserialize_tuple","","",35,null],[11,"deserialize_enum","","",35,null],[11,"deserialize_ignored_any","","",35,null],[11,"deserialize","","",35,null],[11,"deserialize_bool","","",36,null],[11,"deserialize_usize","","",36,null],[11,"deserialize_u8","","",36,null],[11,"deserialize_u16","","",36,null],[11,"deserialize_u32","","",36,null],[11,"deserialize_u64","","",36,null],[11,"deserialize_isize","","",36,null],[11,"deserialize_i8","","",36,null],[11,"deserialize_i16","","",36,null],[11,"deserialize_i32","","",36,null],[11,"deserialize_i64","","",36,null],[11,"deserialize_f32","","",36,null],[11,"deserialize_f64","","",36,null],[11,"deserialize_char","","",36,null],[11,"deserialize_str","","",36,null],[11,"deserialize_string","","",36,null],[11,"deserialize_unit","","",36,null],[11,"deserialize_option","","",36,null],[11,"deserialize_seq","","",36,null],[11,"deserialize_seq_fixed_size","","",36,null],[11,"deserialize_bytes","","",36,null],[11,"deserialize_map","","",36,null],[11,"deserialize_unit_struct","","",36,null],[11,"deserialize_newtype_struct","","",36,null],[11,"deserialize_tuple_struct","","",36,null],[11,"deserialize_struct","","",36,null],[11,"deserialize_struct_field","","",36,null],[11,"deserialize_tuple","","",36,null],[11,"deserialize_enum","","",36,null],[11,"deserialize_ignored_any","","",36,null],[11,"deserialize","","",36,null],[11,"deserialize_bool","","",37,null],[11,"deserialize_usize","","",37,null],[11,"deserialize_u8","","",37,null],[11,"deserialize_u16","","",37,null],[11,"deserialize_u32","","",37,null],[11,"deserialize_u64","","",37,null],[11,"deserialize_isize","","",37,null],[11,"deserialize_i8","","",37,null],[11,"deserialize_i16","","",37,null],[11,"deserialize_i32","","",37,null],[11,"deserialize_i64","","",37,null],[11,"deserialize_f32","","",37,null],[11,"deserialize_f64","","",37,null],[11,"deserialize_char","","",37,null],[11,"deserialize_str","","",37,null],[11,"deserialize_string","","",37,null],[11,"deserialize_unit","","",37,null],[11,"deserialize_option","","",37,null],[11,"deserialize_seq","","",37,null],[11,"deserialize_seq_fixed_size","","",37,null],[11,"deserialize_bytes","","",37,null],[11,"deserialize_map","","",37,null],[11,"deserialize_unit_struct","","",37,null],[11,"deserialize_newtype_struct","","",37,null],[11,"deserialize_tuple_struct","","",37,null],[11,"deserialize_struct","","",37,null],[11,"deserialize_struct_field","","",37,null],[11,"deserialize_tuple","","",37,null],[11,"deserialize_enum","","",37,null],[11,"deserialize_ignored_any","","",37,null],[11,"deserialize","","",37,null],[11,"deserialize_bool","","",38,null],[11,"deserialize_usize","","",38,null],[11,"deserialize_u8","","",38,null],[11,"deserialize_u16","","",38,null],[11,"deserialize_u32","","",38,null],[11,"deserialize_u64","","",38,null],[11,"deserialize_isize","","",38,null],[11,"deserialize_i8","","",38,null],[11,"deserialize_i16","","",38,null],[11,"deserialize_i32","","",38,null],[11,"deserialize_i64","","",38,null],[11,"deserialize_f32","","",38,null],[11,"deserialize_f64","","",38,null],[11,"deserialize_char","","",38,null],[11,"deserialize_str","","",38,null],[11,"deserialize_string","","",38,null],[11,"deserialize_unit","","",38,null],[11,"deserialize_option","","",38,null],[11,"deserialize_seq","","",38,null],[11,"deserialize_seq_fixed_size","","",38,null],[11,"deserialize_bytes","","",38,null],[11,"deserialize_map","","",38,null],[11,"deserialize_unit_struct","","",38,null],[11,"deserialize_newtype_struct","","",38,null],[11,"deserialize_tuple_struct","","",38,null],[11,"deserialize_struct","","",38,null],[11,"deserialize_struct_field","","",38,null],[11,"deserialize_tuple","","",38,null],[11,"deserialize_enum","","",38,null],[11,"deserialize_ignored_any","","",38,null],[11,"deserialize","","",38,null],[11,"deserialize_bool","","",39,null],[11,"deserialize_usize","","",39,null],[11,"deserialize_u8","","",39,null],[11,"deserialize_u16","","",39,null],[11,"deserialize_u32","","",39,null],[11,"deserialize_u64","","",39,null],[11,"deserialize_isize","","",39,null],[11,"deserialize_i8","","",39,null],[11,"deserialize_i16","","",39,null],[11,"deserialize_i32","","",39,null],[11,"deserialize_i64","","",39,null],[11,"deserialize_f32","","",39,null],[11,"deserialize_f64","","",39,null],[11,"deserialize_char","","",39,null],[11,"deserialize_str","","",39,null],[11,"deserialize_string","","",39,null],[11,"deserialize_unit","","",39,null],[11,"deserialize_option","","",39,null],[11,"deserialize_seq","","",39,null],[11,"deserialize_seq_fixed_size","","",39,null],[11,"deserialize_bytes","","",39,null],[11,"deserialize_map","","",39,null],[11,"deserialize_unit_struct","","",39,null],[11,"deserialize_newtype_struct","","",39,null],[11,"deserialize_tuple_struct","","",39,null],[11,"deserialize_struct","","",39,null],[11,"deserialize_struct_field","","",39,null],[11,"deserialize_tuple","","",39,null],[11,"deserialize_enum","","",39,null],[11,"deserialize_ignored_any","","",39,null],[11,"deserialize","","",39,null],[11,"deserialize_bool","","",40,null],[11,"deserialize_usize","","",40,null],[11,"deserialize_u8","","",40,null],[11,"deserialize_u16","","",40,null],[11,"deserialize_u32","","",40,null],[11,"deserialize_u64","","",40,null],[11,"deserialize_isize","","",40,null],[11,"deserialize_i8","","",40,null],[11,"deserialize_i16","","",40,null],[11,"deserialize_i32","","",40,null],[11,"deserialize_i64","","",40,null],[11,"deserialize_f32","","",40,null],[11,"deserialize_f64","","",40,null],[11,"deserialize_char","","",40,null],[11,"deserialize_str","","",40,null],[11,"deserialize_string","","",40,null],[11,"deserialize_unit","","",40,null],[11,"deserialize_option","","",40,null],[11,"deserialize_seq","","",40,null],[11,"deserialize_seq_fixed_size","","",40,null],[11,"deserialize_bytes","","",40,null],[11,"deserialize_map","","",40,null],[11,"deserialize_unit_struct","","",40,null],[11,"deserialize_newtype_struct","","",40,null],[11,"deserialize_tuple_struct","","",40,null],[11,"deserialize_struct","","",40,null],[11,"deserialize_struct_field","","",40,null],[11,"deserialize_tuple","","",40,null],[11,"deserialize_enum","","",40,null],[11,"deserialize_ignored_any","","",40,null],[11,"deserialize","","",40,null],[11,"deserialize_bool","","",41,null],[11,"deserialize_usize","","",41,null],[11,"deserialize_u8","","",41,null],[11,"deserialize_u16","","",41,null],[11,"deserialize_u32","","",41,null],[11,"deserialize_u64","","",41,null],[11,"deserialize_isize","","",41,null],[11,"deserialize_i8","","",41,null],[11,"deserialize_i16","","",41,null],[11,"deserialize_i32","","",41,null],[11,"deserialize_i64","","",41,null],[11,"deserialize_f32","","",41,null],[11,"deserialize_f64","","",41,null],[11,"deserialize_char","","",41,null],[11,"deserialize_str","","",41,null],[11,"deserialize_string","","",41,null],[11,"deserialize_unit","","",41,null],[11,"deserialize_option","","",41,null],[11,"deserialize_seq","","",41,null],[11,"deserialize_seq_fixed_size","","",41,null],[11,"deserialize_bytes","","",41,null],[11,"deserialize_map","","",41,null],[11,"deserialize_unit_struct","","",41,null],[11,"deserialize_newtype_struct","","",41,null],[11,"deserialize_tuple_struct","","",41,null],[11,"deserialize_struct","","",41,null],[11,"deserialize_struct_field","","",41,null],[11,"deserialize_tuple","","",41,null],[11,"deserialize_enum","","",41,null],[11,"deserialize_ignored_any","","",41,null],[11,"deserialize","","",41,null],[11,"deserialize_bool","","",42,null],[11,"deserialize_usize","","",42,null],[11,"deserialize_u8","","",42,null],[11,"deserialize_u16","","",42,null],[11,"deserialize_u32","","",42,null],[11,"deserialize_u64","","",42,null],[11,"deserialize_isize","","",42,null],[11,"deserialize_i8","","",42,null],[11,"deserialize_i16","","",42,null],[11,"deserialize_i32","","",42,null],[11,"deserialize_i64","","",42,null],[11,"deserialize_f32","","",42,null],[11,"deserialize_f64","","",42,null],[11,"deserialize_char","","",42,null],[11,"deserialize_str","","",42,null],[11,"deserialize_string","","",42,null],[11,"deserialize_unit","","",42,null],[11,"deserialize_option","","",42,null],[11,"deserialize_seq","","",42,null],[11,"deserialize_seq_fixed_size","","",42,null],[11,"deserialize_bytes","","",42,null],[11,"deserialize_map","","",42,null],[11,"deserialize_unit_struct","","",42,null],[11,"deserialize_newtype_struct","","",42,null],[11,"deserialize_tuple_struct","","",42,null],[11,"deserialize_struct","","",42,null],[11,"deserialize_struct_field","","",42,null],[11,"deserialize_tuple","","",42,null],[11,"deserialize_enum","","",42,null],[11,"deserialize_ignored_any","","",42,null],[11,"deserialize","","",42,null],[11,"deserialize_bool","","",43,null],[11,"deserialize_usize","","",43,null],[11,"deserialize_u8","","",43,null],[11,"deserialize_u16","","",43,null],[11,"deserialize_u32","","",43,null],[11,"deserialize_u64","","",43,null],[11,"deserialize_isize","","",43,null],[11,"deserialize_i8","","",43,null],[11,"deserialize_i16","","",43,null],[11,"deserialize_i32","","",43,null],[11,"deserialize_i64","","",43,null],[11,"deserialize_f32","","",43,null],[11,"deserialize_f64","","",43,null],[11,"deserialize_char","","",43,null],[11,"deserialize_str","","",43,null],[11,"deserialize_string","","",43,null],[11,"deserialize_unit","","",43,null],[11,"deserialize_option","","",43,null],[11,"deserialize_seq","","",43,null],[11,"deserialize_seq_fixed_size","","",43,null],[11,"deserialize_bytes","","",43,null],[11,"deserialize_map","","",43,null],[11,"deserialize_unit_struct","","",43,null],[11,"deserialize_newtype_struct","","",43,null],[11,"deserialize_tuple_struct","","",43,null],[11,"deserialize_struct","","",43,null],[11,"deserialize_struct_field","","",43,null],[11,"deserialize_tuple","","",43,null],[11,"deserialize_enum","","",43,null],[11,"deserialize_ignored_any","","",43,null],[11,"deserialize","","",43,null],[11,"deserialize_bool","","",44,null],[11,"deserialize_usize","","",44,null],[11,"deserialize_u8","","",44,null],[11,"deserialize_u16","","",44,null],[11,"deserialize_u32","","",44,null],[11,"deserialize_u64","","",44,null],[11,"deserialize_isize","","",44,null],[11,"deserialize_i8","","",44,null],[11,"deserialize_i16","","",44,null],[11,"deserialize_i32","","",44,null],[11,"deserialize_i64","","",44,null],[11,"deserialize_f32","","",44,null],[11,"deserialize_f64","","",44,null],[11,"deserialize_char","","",44,null],[11,"deserialize_str","","",44,null],[11,"deserialize_string","","",44,null],[11,"deserialize_unit","","",44,null],[11,"deserialize_option","","",44,null],[11,"deserialize_seq","","",44,null],[11,"deserialize_seq_fixed_size","","",44,null],[11,"deserialize_bytes","","",44,null],[11,"deserialize_map","","",44,null],[11,"deserialize_unit_struct","","",44,null],[11,"deserialize_newtype_struct","","",44,null],[11,"deserialize_tuple_struct","","",44,null],[11,"deserialize_struct","","",44,null],[11,"deserialize_struct_field","","",44,null],[11,"deserialize_tuple","","",44,null],[11,"deserialize_enum","","",44,null],[11,"deserialize_ignored_any","","",44,null],[11,"deserialize","","",44,null],[11,"deserialize_bool","","",45,null],[11,"deserialize_usize","","",45,null],[11,"deserialize_u8","","",45,null],[11,"deserialize_u16","","",45,null],[11,"deserialize_u32","","",45,null],[11,"deserialize_u64","","",45,null],[11,"deserialize_isize","","",45,null],[11,"deserialize_i8","","",45,null],[11,"deserialize_i16","","",45,null],[11,"deserialize_i32","","",45,null],[11,"deserialize_i64","","",45,null],[11,"deserialize_f32","","",45,null],[11,"deserialize_f64","","",45,null],[11,"deserialize_char","","",45,null],[11,"deserialize_str","","",45,null],[11,"deserialize_string","","",45,null],[11,"deserialize_unit","","",45,null],[11,"deserialize_option","","",45,null],[11,"deserialize_seq","","",45,null],[11,"deserialize_seq_fixed_size","","",45,null],[11,"deserialize_bytes","","",45,null],[11,"deserialize_map","","",45,null],[11,"deserialize_unit_struct","","",45,null],[11,"deserialize_newtype_struct","","",45,null],[11,"deserialize_tuple_struct","","",45,null],[11,"deserialize_struct","","",45,null],[11,"deserialize_struct_field","","",45,null],[11,"deserialize_tuple","","",45,null],[11,"deserialize_enum","","",45,null],[11,"deserialize_ignored_any","","",45,null],[11,"deserialize","","",45,null],[11,"deserialize_bool","","",46,null],[11,"deserialize_usize","","",46,null],[11,"deserialize_u8","","",46,null],[11,"deserialize_u16","","",46,null],[11,"deserialize_u32","","",46,null],[11,"deserialize_u64","","",46,null],[11,"deserialize_isize","","",46,null],[11,"deserialize_i8","","",46,null],[11,"deserialize_i16","","",46,null],[11,"deserialize_i32","","",46,null],[11,"deserialize_i64","","",46,null],[11,"deserialize_f32","","",46,null],[11,"deserialize_f64","","",46,null],[11,"deserialize_char","","",46,null],[11,"deserialize_str","","",46,null],[11,"deserialize_string","","",46,null],[11,"deserialize_unit","","",46,null],[11,"deserialize_option","","",46,null],[11,"deserialize_seq","","",46,null],[11,"deserialize_seq_fixed_size","","",46,null],[11,"deserialize_bytes","","",46,null],[11,"deserialize_map","","",46,null],[11,"deserialize_unit_struct","","",46,null],[11,"deserialize_newtype_struct","","",46,null],[11,"deserialize_tuple_struct","","",46,null],[11,"deserialize_struct","","",46,null],[11,"deserialize_struct_field","","",46,null],[11,"deserialize_tuple","","",46,null],[11,"deserialize_enum","","",46,null],[11,"deserialize_ignored_any","","",46,null],[11,"deserialize","","",46,null],[11,"deserialize_bool","","",47,null],[11,"deserialize_usize","","",47,null],[11,"deserialize_u8","","",47,null],[11,"deserialize_u16","","",47,null],[11,"deserialize_u32","","",47,null],[11,"deserialize_u64","","",47,null],[11,"deserialize_isize","","",47,null],[11,"deserialize_i8","","",47,null],[11,"deserialize_i16","","",47,null],[11,"deserialize_i32","","",47,null],[11,"deserialize_i64","","",47,null],[11,"deserialize_f32","","",47,null],[11,"deserialize_f64","","",47,null],[11,"deserialize_char","","",47,null],[11,"deserialize_str","","",47,null],[11,"deserialize_string","","",47,null],[11,"deserialize_unit","","",47,null],[11,"deserialize_option","","",47,null],[11,"deserialize_seq","","",47,null],[11,"deserialize_seq_fixed_size","","",47,null],[11,"deserialize_bytes","","",47,null],[11,"deserialize_map","","",47,null],[11,"deserialize_unit_struct","","",47,null],[11,"deserialize_newtype_struct","","",47,null],[11,"deserialize_tuple_struct","","",47,null],[11,"deserialize_struct","","",47,null],[11,"deserialize_struct_field","","",47,null],[11,"deserialize_tuple","","",47,null],[11,"deserialize_enum","","",47,null],[11,"deserialize_ignored_any","","",47,null],[11,"deserialize","","",47,null],[11,"deserialize_bool","","",48,null],[11,"deserialize_usize","","",48,null],[11,"deserialize_u8","","",48,null],[11,"deserialize_u16","","",48,null],[11,"deserialize_u32","","",48,null],[11,"deserialize_u64","","",48,null],[11,"deserialize_isize","","",48,null],[11,"deserialize_i8","","",48,null],[11,"deserialize_i16","","",48,null],[11,"deserialize_i32","","",48,null],[11,"deserialize_i64","","",48,null],[11,"deserialize_f32","","",48,null],[11,"deserialize_f64","","",48,null],[11,"deserialize_char","","",48,null],[11,"deserialize_str","","",48,null],[11,"deserialize_string","","",48,null],[11,"deserialize_unit","","",48,null],[11,"deserialize_option","","",48,null],[11,"deserialize_seq","","",48,null],[11,"deserialize_seq_fixed_size","","",48,null],[11,"deserialize_bytes","","",48,null],[11,"deserialize_map","","",48,null],[11,"deserialize_unit_struct","","",48,null],[11,"deserialize_newtype_struct","","",48,null],[11,"deserialize_tuple_struct","","",48,null],[11,"deserialize_struct","","",48,null],[11,"deserialize_struct_field","","",48,null],[11,"deserialize_tuple","","",48,null],[11,"deserialize_enum","","",48,null],[11,"deserialize_ignored_any","","",48,null],[11,"deserialize","","",48,null],[11,"deserialize","","",49,null],[11,"deserialize_enum","","",49,null],[11,"deserialize_bool","","",49,null],[11,"deserialize_usize","","",49,null],[11,"deserialize_u8","","",49,null],[11,"deserialize_u16","","",49,null],[11,"deserialize_u32","","",49,null],[11,"deserialize_u64","","",49,null],[11,"deserialize_isize","","",49,null],[11,"deserialize_i8","","",49,null],[11,"deserialize_i16","","",49,null],[11,"deserialize_i32","","",49,null],[11,"deserialize_i64","","",49,null],[11,"deserialize_f32","","",49,null],[11,"deserialize_f64","","",49,null],[11,"deserialize_char","","",49,null],[11,"deserialize_str","","",49,null],[11,"deserialize_string","","",49,null],[11,"deserialize_unit","","",49,null],[11,"deserialize_option","","",49,null],[11,"deserialize_seq","","",49,null],[11,"deserialize_seq_fixed_size","","",49,null],[11,"deserialize_bytes","","",49,null],[11,"deserialize_map","","",49,null],[11,"deserialize_unit_struct","","",49,null],[11,"deserialize_newtype_struct","","",49,null],[11,"deserialize_tuple_struct","","",49,null],[11,"deserialize_struct","","",49,null],[11,"deserialize_struct_field","","",49,null],[11,"deserialize_tuple","","",49,null],[11,"deserialize_ignored_any","","",49,null],[11,"visit_variant","","",49,null],[11,"visit_unit","","",49,null],[11,"visit_newtype","","",49,null],[11,"visit_tuple","","",49,null],[11,"visit_struct","","",49,null],[11,"deserialize","","",50,null],[11,"deserialize_enum","","",50,null],[11,"deserialize_bool","","",50,null],[11,"deserialize_usize","","",50,null],[11,"deserialize_u8","","",50,null],[11,"deserialize_u16","","",50,null],[11,"deserialize_u32","","",50,null],[11,"deserialize_u64","","",50,null],[11,"deserialize_isize","","",50,null],[11,"deserialize_i8","","",50,null],[11,"deserialize_i16","","",50,null],[11,"deserialize_i32","","",50,null],[11,"deserialize_i64","","",50,null],[11,"deserialize_f32","","",50,null],[11,"deserialize_f64","","",50,null],[11,"deserialize_char","","",50,null],[11,"deserialize_str","","",50,null],[11,"deserialize_string","","",50,null],[11,"deserialize_unit","","",50,null],[11,"deserialize_option","","",50,null],[11,"deserialize_seq","","",50,null],[11,"deserialize_seq_fixed_size","","",50,null],[11,"deserialize_bytes","","",50,null],[11,"deserialize_map","","",50,null],[11,"deserialize_unit_struct","","",50,null],[11,"deserialize_newtype_struct","","",50,null],[11,"deserialize_tuple_struct","","",50,null],[11,"deserialize_struct","","",50,null],[11,"deserialize_struct_field","","",50,null],[11,"deserialize_tuple","","",50,null],[11,"deserialize_ignored_any","","",50,null],[11,"visit_variant","","",50,null],[11,"visit_unit","","",50,null],[11,"visit_newtype","","",50,null],[11,"visit_tuple","","",50,null],[11,"visit_struct","","",50,null],[11,"deserialize","","",51,null],[11,"deserialize_enum","","",51,null],[11,"deserialize_bool","","",51,null],[11,"deserialize_usize","","",51,null],[11,"deserialize_u8","","",51,null],[11,"deserialize_u16","","",51,null],[11,"deserialize_u32","","",51,null],[11,"deserialize_u64","","",51,null],[11,"deserialize_isize","","",51,null],[11,"deserialize_i8","","",51,null],[11,"deserialize_i16","","",51,null],[11,"deserialize_i32","","",51,null],[11,"deserialize_i64","","",51,null],[11,"deserialize_f32","","",51,null],[11,"deserialize_f64","","",51,null],[11,"deserialize_char","","",51,null],[11,"deserialize_str","","",51,null],[11,"deserialize_string","","",51,null],[11,"deserialize_unit","","",51,null],[11,"deserialize_option","","",51,null],[11,"deserialize_seq","","",51,null],[11,"deserialize_seq_fixed_size","","",51,null],[11,"deserialize_bytes","","",51,null],[11,"deserialize_map","","",51,null],[11,"deserialize_unit_struct","","",51,null],[11,"deserialize_newtype_struct","","",51,null],[11,"deserialize_tuple_struct","","",51,null],[11,"deserialize_struct","","",51,null],[11,"deserialize_struct_field","","",51,null],[11,"deserialize_tuple","","",51,null],[11,"deserialize_ignored_any","","",51,null],[11,"visit_variant","","",51,null],[11,"visit_unit","","",51,null],[11,"visit_newtype","","",51,null],[11,"visit_tuple","","",51,null],[11,"visit_struct","","",51,null],[11,"new","","Construct a new `SeqDeserializer&lt;I&gt;`.",52,{"inputs":[{"name":"i"},{"name":"usize"}],"output":{"name":"self"}}],[11,"deserialize","","",52,null],[11,"deserialize_bool","","",52,null],[11,"deserialize_usize","","",52,null],[11,"deserialize_u8","","",52,null],[11,"deserialize_u16","","",52,null],[11,"deserialize_u32","","",52,null],[11,"deserialize_u64","","",52,null],[11,"deserialize_isize","","",52,null],[11,"deserialize_i8","","",52,null],[11,"deserialize_i16","","",52,null],[11,"deserialize_i32","","",52,null],[11,"deserialize_i64","","",52,null],[11,"deserialize_f32","","",52,null],[11,"deserialize_f64","","",52,null],[11,"deserialize_char","","",52,null],[11,"deserialize_str","","",52,null],[11,"deserialize_string","","",52,null],[11,"deserialize_unit","","",52,null],[11,"deserialize_option","","",52,null],[11,"deserialize_seq","","",52,null],[11,"deserialize_seq_fixed_size","","",52,null],[11,"deserialize_bytes","","",52,null],[11,"deserialize_map","","",52,null],[11,"deserialize_unit_struct","","",52,null],[11,"deserialize_newtype_struct","","",52,null],[11,"deserialize_tuple_struct","","",52,null],[11,"deserialize_struct","","",52,null],[11,"deserialize_struct_field","","",52,null],[11,"deserialize_tuple","","",52,null],[11,"deserialize_enum","","",52,null],[11,"deserialize_ignored_any","","",52,null],[11,"visit","","",52,null],[11,"end","","",52,null],[11,"size_hint","","",52,null],[11,"new","","Construct a new `SeqVisitorDeserializer&lt;V_, E&gt;`.",53,{"inputs":[{"name":"v_"}],"output":{"name":"self"}}],[11,"deserialize","","",53,null],[11,"deserialize_bool","","",53,null],[11,"deserialize_usize","","",53,null],[11,"deserialize_u8","","",53,null],[11,"deserialize_u16","","",53,null],[11,"deserialize_u32","","",53,null],[11,"deserialize_u64","","",53,null],[11,"deserialize_isize","","",53,null],[11,"deserialize_i8","","",53,null],[11,"deserialize_i16","","",53,null],[11,"deserialize_i32","","",53,null],[11,"deserialize_i64","","",53,null],[11,"deserialize_f32","","",53,null],[11,"deserialize_f64","","",53,null],[11,"deserialize_char","","",53,null],[11,"deserialize_str","","",53,null],[11,"deserialize_string","","",53,null],[11,"deserialize_unit","","",53,null],[11,"deserialize_option","","",53,null],[11,"deserialize_seq","","",53,null],[11,"deserialize_seq_fixed_size","","",53,null],[11,"deserialize_bytes","","",53,null],[11,"deserialize_map","","",53,null],[11,"deserialize_unit_struct","","",53,null],[11,"deserialize_newtype_struct","","",53,null],[11,"deserialize_tuple_struct","","",53,null],[11,"deserialize_struct","","",53,null],[11,"deserialize_struct_field","","",53,null],[11,"deserialize_tuple","","",53,null],[11,"deserialize_enum","","",53,null],[11,"deserialize_ignored_any","","",53,null],[11,"new","","Construct a new `MapDeserializer&lt;I, K, V, E&gt;` with a specific length.",54,{"inputs":[{"name":"i"},{"name":"usize"}],"output":{"name":"self"}}],[11,"unbounded","","Construct a new `MapDeserializer&lt;I, K, V, E&gt;` that is not bounded\nby a specific length and that delegates to `iter` for its size hint.",54,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"deserialize","","",54,null],[11,"deserialize_seq","","",54,null],[11,"deserialize_seq_fixed_size","","",54,null],[11,"deserialize_bool","","",54,null],[11,"deserialize_usize","","",54,null],[11,"deserialize_u8","","",54,null],[11,"deserialize_u16","","",54,null],[11,"deserialize_u32","","",54,null],[11,"deserialize_u64","","",54,null],[11,"deserialize_isize","","",54,null],[11,"deserialize_i8","","",54,null],[11,"deserialize_i16","","",54,null],[11,"deserialize_i32","","",54,null],[11,"deserialize_i64","","",54,null],[11,"deserialize_f32","","",54,null],[11,"deserialize_f64","","",54,null],[11,"deserialize_char","","",54,null],[11,"deserialize_str","","",54,null],[11,"deserialize_string","","",54,null],[11,"deserialize_unit","","",54,null],[11,"deserialize_option","","",54,null],[11,"deserialize_bytes","","",54,null],[11,"deserialize_map","","",54,null],[11,"deserialize_unit_struct","","",54,null],[11,"deserialize_newtype_struct","","",54,null],[11,"deserialize_tuple_struct","","",54,null],[11,"deserialize_struct","","",54,null],[11,"deserialize_struct_field","","",54,null],[11,"deserialize_tuple","","",54,null],[11,"deserialize_enum","","",54,null],[11,"deserialize_ignored_any","","",54,null],[11,"visit_key","","",54,null],[11,"visit_value","","",54,null],[11,"end","","",54,null],[11,"size_hint","","",54,null],[11,"visit","","",54,null],[11,"end","","",54,null],[11,"size_hint","","",54,null],[11,"new","","Construct a new `MapVisitorDeserializer&lt;V_, E&gt;`.",55,{"inputs":[{"name":"v_"}],"output":{"name":"self"}}],[11,"deserialize","","",55,null],[11,"deserialize_bool","","",55,null],[11,"deserialize_usize","","",55,null],[11,"deserialize_u8","","",55,null],[11,"deserialize_u16","","",55,null],[11,"deserialize_u32","","",55,null],[11,"deserialize_u64","","",55,null],[11,"deserialize_isize","","",55,null],[11,"deserialize_i8","","",55,null],[11,"deserialize_i16","","",55,null],[11,"deserialize_i32","","",55,null],[11,"deserialize_i64","","",55,null],[11,"deserialize_f32","","",55,null],[11,"deserialize_f64","","",55,null],[11,"deserialize_char","","",55,null],[11,"deserialize_str","","",55,null],[11,"deserialize_string","","",55,null],[11,"deserialize_unit","","",55,null],[11,"deserialize_option","","",55,null],[11,"deserialize_seq","","",55,null],[11,"deserialize_seq_fixed_size","","",55,null],[11,"deserialize_bytes","","",55,null],[11,"deserialize_map","","",55,null],[11,"deserialize_unit_struct","","",55,null],[11,"deserialize_newtype_struct","","",55,null],[11,"deserialize_tuple_struct","","",55,null],[11,"deserialize_struct","","",55,null],[11,"deserialize_struct_field","","",55,null],[11,"deserialize_tuple","","",55,null],[11,"deserialize_enum","","",55,null],[11,"deserialize_ignored_any","","",55,null],[11,"into_deserializer","serde::bytes","",2,null],[11,"deserialize","serde::de::value","",56,null],[11,"deserialize_bool","","",56,null],[11,"deserialize_usize","","",56,null],[11,"deserialize_u8","","",56,null],[11,"deserialize_u16","","",56,null],[11,"deserialize_u32","","",56,null],[11,"deserialize_u64","","",56,null],[11,"deserialize_isize","","",56,null],[11,"deserialize_i8","","",56,null],[11,"deserialize_i16","","",56,null],[11,"deserialize_i32","","",56,null],[11,"deserialize_i64","","",56,null],[11,"deserialize_f32","","",56,null],[11,"deserialize_f64","","",56,null],[11,"deserialize_char","","",56,null],[11,"deserialize_str","","",56,null],[11,"deserialize_string","","",56,null],[11,"deserialize_unit","","",56,null],[11,"deserialize_option","","",56,null],[11,"deserialize_seq","","",56,null],[11,"deserialize_seq_fixed_size","","",56,null],[11,"deserialize_bytes","","",56,null],[11,"deserialize_map","","",56,null],[11,"deserialize_unit_struct","","",56,null],[11,"deserialize_newtype_struct","","",56,null],[11,"deserialize_tuple_struct","","",56,null],[11,"deserialize_struct","","",56,null],[11,"deserialize_struct_field","","",56,null],[11,"deserialize_tuple","","",56,null],[11,"deserialize_enum","","",56,null],[11,"deserialize_ignored_any","","",56,null],[11,"into_deserializer","serde::bytes","",0,null],[11,"deserialize","serde::de::value","",57,null],[11,"deserialize_bool","","",57,null],[11,"deserialize_usize","","",57,null],[11,"deserialize_u8","","",57,null],[11,"deserialize_u16","","",57,null],[11,"deserialize_u32","","",57,null],[11,"deserialize_u64","","",57,null],[11,"deserialize_isize","","",57,null],[11,"deserialize_i8","","",57,null],[11,"deserialize_i16","","",57,null],[11,"deserialize_i32","","",57,null],[11,"deserialize_i64","","",57,null],[11,"deserialize_f32","","",57,null],[11,"deserialize_f64","","",57,null],[11,"deserialize_char","","",57,null],[11,"deserialize_str","","",57,null],[11,"deserialize_string","","",57,null],[11,"deserialize_unit","","",57,null],[11,"deserialize_option","","",57,null],[11,"deserialize_seq","","",57,null],[11,"deserialize_seq_fixed_size","","",57,null],[11,"deserialize_bytes","","",57,null],[11,"deserialize_map","","",57,null],[11,"deserialize_unit_struct","","",57,null],[11,"deserialize_newtype_struct","","",57,null],[11,"deserialize_tuple_struct","","",57,null],[11,"deserialize_struct","","",57,null],[11,"deserialize_struct_field","","",57,null],[11,"deserialize_tuple","","",57,null],[11,"deserialize_enum","","",57,null],[11,"deserialize_ignored_any","","",57,null],[8,"Error","serde::de","`Error` is a trait that allows a `Deserialize` to generically create a\n`Deserializer` error.",null,null],[10,"custom","","Raised when there is general error when deserializing a type.",58,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[10,"end_of_stream","","Raised when a `Deserialize` type unexpectedly hit the end of the stream.",58,{"inputs":[],"output":{"name":"self"}}],[11,"invalid_type","","Raised when a `Deserialize` was passed an incorrect type.",58,{"inputs":[{"name":"type"}],"output":{"name":"self"}}],[11,"invalid_value","","Raised when a `Deserialize` was passed an incorrect value.",58,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"invalid_length","","Raised when a fixed sized sequence or map was passed in the wrong amount of arguments.",58,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"unknown_variant","","Raised when a `Deserialize` enum type received an unexpected variant.",58,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"unknown_field","","Raised when a `Deserialize` struct type received an unexpected struct field.",58,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"missing_field","","raised when a `deserialize` struct type did not receive a field.",58,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"duplicate_field","","Raised when a `Deserialize` struct type received more than one of the\nsame struct field.",58,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[8,"Deserialize","","`Deserialize` represents a type that can be deserialized.",null,null],[10,"deserialize","","Deserialize this value given this `Deserializer`.",59,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"Deserializer","","`Deserializer` is a trait that can deserialize values by threading a `Visitor` trait through a\nvalue. It supports two entry point styles which enables different kinds of deserialization.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",60,null],[10,"deserialize","","This method walks a visitor through a value as it is being deserialized.",60,null],[10,"deserialize_bool","","This method hints that the `Deserialize` type is expecting a `bool` value.",60,null],[10,"deserialize_usize","","This method hints that the `Deserialize` type is expecting an `usize` value.\nA reasonable default is to forward to `deserialize_u64`.",60,null],[10,"deserialize_u8","","This method hints that the `Deserialize` type is expecting an `u8` value.\nA reasonable default is to forward to `deserialize_u64`.",60,null],[10,"deserialize_u16","","This method hints that the `Deserialize` type is expecting an `u16` value.\nA reasonable default is to forward to `deserialize_u64`.",60,null],[10,"deserialize_u32","","This method hints that the `Deserialize` type is expecting an `u32` value.\nA reasonable default is to forward to `deserialize_u64`.",60,null],[10,"deserialize_u64","","This method hints that the `Deserialize` type is expecting an `u64` value.",60,null],[10,"deserialize_isize","","This method hints that the `Deserialize` type is expecting an `isize` value.\nA reasonable default is to forward to `deserialize_i64`.",60,null],[10,"deserialize_i8","","This method hints that the `Deserialize` type is expecting an `i8` value.\nA reasonable default is to forward to `deserialize_i64`.",60,null],[10,"deserialize_i16","","This method hints that the `Deserialize` type is expecting an `i16` value.\nA reasonable default is to forward to `deserialize_i64`.",60,null],[10,"deserialize_i32","","This method hints that the `Deserialize` type is expecting an `i32` value.\nA reasonable default is to forward to `deserialize_i64`.",60,null],[10,"deserialize_i64","","This method hints that the `Deserialize` type is expecting an `i64` value.",60,null],[10,"deserialize_f32","","This method hints that the `Deserialize` type is expecting a `f32` value.\nA reasonable default is to forward to `deserialize_f64`.",60,null],[10,"deserialize_f64","","This method hints that the `Deserialize` type is expecting a `f64` value.",60,null],[10,"deserialize_char","","This method hints that the `Deserialize` type is expecting a `char` value.",60,null],[10,"deserialize_str","","This method hints that the `Deserialize` type is expecting a `&amp;str` value.",60,null],[10,"deserialize_string","","This method hints that the `Deserialize` type is expecting a `String` value.",60,null],[10,"deserialize_unit","","This method hints that the `Deserialize` type is expecting an `unit` value.",60,null],[10,"deserialize_option","","This method hints that the `Deserialize` type is expecting an `Option` value. This allows\ndeserializers that encode an optional value as a nullable value to convert the null value\ninto a `None`, and a regular value as `Some(value)`.",60,null],[10,"deserialize_seq","","This method hints that the `Deserialize` type is expecting a sequence value. This allows\ndeserializers to parse sequences that aren&#39;t tagged as sequences.",60,null],[10,"deserialize_seq_fixed_size","","This method hints that the `Deserialize` type is expecting a fixed size array. This allows\ndeserializers to parse arrays that aren&#39;t tagged as arrays.",60,null],[10,"deserialize_bytes","","This method hints that the `Deserialize` type is expecting a `Vec&lt;u8&gt;`. This allows\ndeserializers that provide a custom byte vector serialization to properly deserialize the\ntype.",60,null],[10,"deserialize_map","","This method hints that the `Deserialize` type is expecting a map of values. This allows\ndeserializers to parse sequences that aren&#39;t tagged as maps.",60,null],[10,"deserialize_unit_struct","","This method hints that the `Deserialize` type is expecting a unit struct. This allows\ndeserializers to a unit struct that aren&#39;t tagged as a unit struct.",60,null],[10,"deserialize_newtype_struct","","This method hints that the `Deserialize` type is expecting a newtype struct. This allows\ndeserializers to a newtype struct that aren&#39;t tagged as a newtype struct.\nA reasonable default is to simply deserialize the expected value directly.",60,null],[10,"deserialize_tuple_struct","","This method hints that the `Deserialize` type is expecting a tuple struct. This allows\ndeserializers to parse sequences that aren&#39;t tagged as sequences.",60,null],[10,"deserialize_struct","","This method hints that the `Deserialize` type is expecting a struct. This allows\ndeserializers to parse sequences that aren&#39;t tagged as maps.",60,null],[10,"deserialize_struct_field","","This method hints that the `Deserialize` type is expecting some sort of struct field\nname.  This allows deserializers to choose between &amp;str, usize, or &amp;[u8] to properly\ndeserialize a struct field.",60,null],[10,"deserialize_tuple","","This method hints that the `Deserialize` type is expecting a tuple value. This allows\ndeserializers that provide a custom tuple serialization to properly deserialize the type.",60,null],[10,"deserialize_enum","","This method hints that the `Deserialize` type is expecting an enum value. This allows\ndeserializers that provide a custom enumeration serialization to properly deserialize the\ntype.",60,null],[10,"deserialize_ignored_any","","This method hints that the `Deserialize` type needs to deserialize a value whose type\ndoesn&#39;t matter because it is ignored.",60,null],[8,"Visitor","","This trait represents a visitor that walks through a deserializer.",null,null],[16,"Value","","The value produced by this visitor.",61,null],[11,"visit_bool","","`visit_bool` deserializes a `bool` into a `Value`.",61,null],[11,"visit_isize","","`visit_isize` deserializes a `isize` into a `Value`.",61,null],[11,"visit_i8","","`visit_i8` deserializes a `i8` into a `Value`.",61,null],[11,"visit_i16","","`visit_i16` deserializes a `i16` into a `Value`.",61,null],[11,"visit_i32","","`visit_i32` deserializes a `i32` into a `Value`.",61,null],[11,"visit_i64","","`visit_i64` deserializes a `i64` into a `Value`.",61,null],[11,"visit_usize","","`visit_usize` deserializes a `usize` into a `Value`.",61,null],[11,"visit_u8","","`visit_u8` deserializes a `u8` into a `Value`.",61,null],[11,"visit_u16","","`visit_u16` deserializes a `u16` into a `Value`.",61,null],[11,"visit_u32","","`visit_u32` deserializes a `u32` into a `Value`.",61,null],[11,"visit_u64","","`visit_u64` deserializes a `u64` into a `Value`.",61,null],[11,"visit_f32","","`visit_f32` deserializes a `f32` into a `Value`.",61,null],[11,"visit_f64","","`visit_f64` deserializes a `f64` into a `Value`.",61,null],[11,"visit_char","","`visit_char` deserializes a `char` into a `Value`.",61,null],[11,"visit_str","","`visit_str` deserializes a `&amp;str` into a `Value`.",61,null],[11,"visit_string","","`visit_string` deserializes a `String` into a `Value`.  This allows a deserializer to avoid\na copy if it is deserializing a string from a `String` type.  By default it passes a `&amp;str`\nto the `visit_str` method.",61,null],[11,"visit_unit","","`visit_unit` deserializes a `()` into a `Value`.",61,null],[11,"visit_unit_struct","","`visit_unit_struct` deserializes a unit struct into a `Value`.",61,null],[11,"visit_none","","`visit_none` deserializes a none value into a `Value`.",61,null],[11,"visit_some","","`visit_some` deserializes a value into a `Value`.",61,null],[11,"visit_newtype_struct","","`visit_newtype_struct` deserializes a value into a `Value`.",61,null],[11,"visit_seq","","`visit_seq` deserializes a `SeqVisitor` into a `Value`.",61,null],[11,"visit_map","","`visit_map` deserializes a `MapVisitor` into a `Value`.",61,null],[11,"visit_bytes","","`visit_bytes` deserializes a `&amp;[u8]` into a `Value`.",61,null],[11,"visit_byte_buf","","`visit_byte_buf` deserializes a `Vec&lt;u8&gt;` into a `Value`.",61,null],[8,"SeqVisitor","","`SeqVisitor` visits each item in a sequence.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",62,null],[10,"visit","","This returns a `Ok(Some(value))` for the next value in the sequence, or `Ok(None)` if there\nare no more remaining items.",62,null],[10,"end","","This signals to the `SeqVisitor` that the `Visitor` does not expect any more items.",62,null],[11,"size_hint","","Return the lower and upper bound of items remaining in the sequence.",62,null],[8,"MapVisitor","","`MapVisitor` visits each item in a sequence.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",63,null],[11,"visit","","This returns a `Ok(Some((key, value)))` for the next (key-value) pair in the map, or\n`Ok(None)` if there are no more remaining items.",63,null],[10,"visit_key","","This returns a `Ok(Some(key))` for the next key in the map, or `Ok(None)` if there are no\nmore remaining items.",63,null],[10,"visit_value","","This returns a `Ok(value)` for the next value in the map.",63,null],[10,"end","","This signals to the `MapVisitor` that the `Visitor` does not expect any more items.",63,null],[11,"size_hint","","Return the lower and upper bound of items remaining in the sequence.",63,null],[11,"missing_field","","Report that the struct has a field that wasn&#39;t deserialized",63,null],[8,"EnumVisitor","","`EnumVisitor` is a visitor that is created by the `Deserialize` and passed to the\n`Deserializer` in order to deserialize enums.",null,null],[16,"Value","","The value produced by this visitor.",64,null],[10,"visit","","Visit the specific variant with the `VariantVisitor`.",64,null],[8,"VariantVisitor","","`VariantVisitor` is a visitor that is created by the `Deserializer` and passed to the\n`Deserialize` in order to deserialize a specific enum variant.",null,null],[16,"Error","","The error type that can be returned if some error occurs during deserialization.",65,null],[10,"visit_variant","","`visit_variant` is called to identify which variant to deserialize.",65,null],[11,"visit_unit","","`visit_unit` is called when deserializing a variant with no values.",65,null],[10,"visit_newtype","","`visit_newtype` is called when deserializing a variant with a single value.\nA good default is often to use the `visit_tuple` method to deserialize a `(value,)`.",65,null],[10,"visit_tuple","","`visit_tuple` is called when deserializing a tuple-like variant.\nIf no tuple variants are expected, yield a\n`Err(serde::de::Error::invalid_type(serde::de::Type::TupleVariant))`",65,null],[10,"visit_struct","","`visit_struct` is called when deserializing a struct-like variant.\nIf no struct variants are expected, yield a\n`Err(serde::de::Error::invalid_type(serde::de::Type::StructVariant))`",65,null],[11,"clone","","",3,null],[11,"eq","","",3,null],[11,"fmt","","",3,null],[11,"fmt","","",3,null],[0,"iter","serde","Module that contains helper iterators.",null,null],[3,"LineColIterator","serde::iter","Iterator over a byte stream that tracks the current position&#39;s line and column.",null,null],[11,"new","","Construct a new `LineColIterator&lt;Iter&gt;`.",66,{"inputs":[{"name":"iter"}],"output":{"name":"linecoliterator"}}],[11,"line","","Report the current line inside the iterator.",66,null],[11,"col","","Report the current column inside the iterator.",66,null],[11,"get_ref","","Gets a reference to the underlying iterator.",66,null],[11,"get_mut","","Gets a mutable reference to the underlying iterator.",66,null],[11,"into_inner","","Unwraps this `LineColIterator`, returning the underlying iterator.",66,null],[11,"peek","","peeks at the next value",66,null],[11,"next","","",66,null],[0,"ser","serde","Generic serialization framework.\n# For Developers who want to serialize objects\nImplement the `Serialize` trait for the type of objects you want to serialize. Call methods of\nthe `serializer` object. For which methods to call and how to do so, look at the documentation\nof the `Serializer` trait.",null,null],[0,"impls","serde::ser","Implementations for all of Rust&#39;s builtin types. Tuples implement the `Serialize` trait if they\nhave at most 16 fields. Arrays implement the `Serialize` trait if their length is 32 or less.\nYou can always forward array serialization to slice serialization, which works for any length.\nLong tuples are best replaced by tuple structs, for which you can use `derive(Serialize)`. In\nthat case the number of fields is irrelevant.",null,null],[8,"Error","","`Error` is a trait that allows a `Serialize` to generically create a\n`Serializer` error.",null,null],[10,"custom","","Raised when there is a general error when serializing a type.",67,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"invalid_value","","Raised when a `Serialize` was passed an incorrect value.",67,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[8,"Serialize","","A trait that describes a type that can be serialized by a `Serializer`.",null,null],[10,"serialize","","Serializes this value into this serializer.",68,null],[8,"Serializer","","A trait that describes a type that can serialize a stream of values into the underlying format.",null,null],[16,"Error","","The error type that can be returned if some error occurs during serialization.",69,null],[16,"SeqState","","A state object that is initialized by `serialize_seq`, passed to\n`serialize_seq_elt`, and consumed by `serialize_seq_end`. Use `()` if no\nstate is required.",69,null],[16,"TupleState","","A state object that is initialized by `serialize_tuple`, passed to\n`serialize_tuple_elt`, and consumed by `serialize_tuple_end`. Use `()`\nif no state is required.",69,null],[16,"TupleStructState","","A state object that is initialized by `serialize_tuple_struct`, passed\nto `serialize_tuple_struct_elt`, and consumed by\n`serialize_tuple_struct_end`. Use `()` if no state is required.",69,null],[16,"TupleVariantState","","A state object that is initialized by `serialize_tuple_variant`, passed\nto `serialize_tuple_variant_elt`, and consumed by\n`serialize_tuple_variant_end`. Use `()` if no state is required.",69,null],[16,"MapState","","A state object that is initialized by `serialize_map`, passed to\n`serialize_map_elt`, and consumed by `serialize_map_end`. Use `()` if no\nstate is required.",69,null],[16,"StructState","","A state object that is initialized by `serialize_struct`, passed to\n`serialize_struct_elt`, and consumed by `serialize_struct_end`. Use `()`\nif no state is required.",69,null],[16,"StructVariantState","","A state object that is initialized by `serialize_struct_variant`, passed\nto `serialize_struct_variant_elt`, and consumed by\n`serialize_struct_variant_end`. Use `()` if no state is required.",69,null],[10,"serialize_bool","","Serializes a `bool` value.",69,null],[10,"serialize_isize","","Serializes an `isize` value. If the format does not differentiate\nbetween `isize` and `i64`, a reasonable implementation would be to cast\nthe value to `i64` and forward to `serialize_i64`.",69,null],[10,"serialize_i8","","Serializes an `i8` value. If the format does not differentiate between\n`i8` and `i64`, a reasonable implementation would be to cast the value\nto `i64` and forward to `serialize_i64`.",69,null],[10,"serialize_i16","","Serializes an `i16` value. If the format does not differentiate between\n`i16` and `i64`, a reasonable implementation would be to cast the value\nto `i64` and forward to `serialize_i64`.",69,null],[10,"serialize_i32","","Serializes an `i32` value. If the format does not differentiate between\n`i32` and `i64`, a reasonable implementation would be to cast the value\nto `i64` and forward to `serialize_i64`.",69,null],[10,"serialize_i64","","Serializes an `i64` value.",69,null],[10,"serialize_usize","","Serializes a `usize` value. If the format does not differentiate between\n`usize` and `u64`, a reasonable implementation would be to cast the\nvalue to `u64` and forward to `serialize_u64`.",69,null],[10,"serialize_u8","","Serializes a `u8` value. If the format does not differentiate between\n`u8` and `u64`, a reasonable implementation would be to cast the value\nto `u64` and forward to `serialize_u64`.",69,null],[10,"serialize_u16","","Serializes a `u16` value. If the format does not differentiate between\n`u16` and `u64`, a reasonable implementation would be to cast the value\nto `u64` and forward to `serialize_u64`.",69,null],[10,"serialize_u32","","Serializes a `u32` value. If the format does not differentiate between\n`u32` and `u64`, a reasonable implementation would be to cast the value\nto `u64` and forward to `serialize_u64`.",69,null],[10,"serialize_u64","","`Serializes a `u64` value.",69,null],[10,"serialize_f32","","Serializes an `f32` value. If the format does not differentiate between\n`f32` and `f64`, a reasonable implementation would be to cast the value\nto `f64` and forward to `serialize_f64`.",69,null],[10,"serialize_f64","","Serializes an `f64` value.",69,null],[10,"serialize_char","","Serializes a character. If the format does not support characters,\nit is reasonable to serialize it as a single element `str` or a `u32`.",69,null],[10,"serialize_str","","Serializes a `&amp;str`.",69,null],[10,"serialize_bytes","","Enables serializers to serialize byte slices more compactly or more\nefficiently than other types of slices. If no efficient implementation\nis available, a reasonable implementation would be to forward to\n`serialize_seq`. If forwarded, the implementation looks usually just like this:\n```rust\nlet mut state = try!(self.serialize_seq(value));\nfor b in value {\n    try!(self.serialize_seq_elt(&amp;mut state, b));\n}\nself.serialize_seq_end(state)\n```",69,null],[10,"serialize_unit","","Serializes a `()` value. It&#39;s reasonable to just not serialize anything.",69,null],[10,"serialize_unit_struct","","Serializes a unit struct value. A reasonable implementation would be to\nforward to `serialize_unit`.",69,null],[10,"serialize_unit_variant","","Serializes a unit variant, otherwise known as a variant with no\narguments. A reasonable implementation would be to forward to\n`serialize_unit`.",69,null],[10,"serialize_newtype_struct","","Allows a tuple struct with a single element, also known as a newtype\nstruct, to be more efficiently serialized than a tuple struct with\nmultiple items. A reasonable implementation would be to forward to\n`serialize_tuple_struct` or to just serialize the inner value without wrapping.",69,null],[10,"serialize_newtype_variant","","Allows a variant with a single item to be more efficiently serialized\nthan a variant with multiple items. A reasonable implementation would be\nto forward to `serialize_tuple_variant`.",69,null],[10,"serialize_none","","Serializes a `None` value.",69,null],[10,"serialize_some","","Serializes a `Some(...)` value.",69,null],[10,"serialize_seq","","Begins to serialize a sequence. This call must be followed by zero or\nmore calls to `serialize_seq_elt`, then a call to `serialize_seq_end`.",69,null],[10,"serialize_seq_elt","","Serializes a sequence element. Must have previously called\n`serialize_seq`.",69,null],[10,"serialize_seq_end","","Finishes serializing a sequence.",69,null],[10,"serialize_seq_fixed_size","","Begins to serialize a sequence whose length will be known at\ndeserialization time. This call must be followed by zero or more calls\nto `serialize_seq_elt`, then a call to `serialize_seq_end`. A reasonable\nimplementation would be to forward to `serialize_seq`.",69,null],[10,"serialize_tuple","","Begins to serialize a tuple. This call must be followed by zero or more\ncalls to `serialize_tuple_elt`, then a call to `serialize_tuple_end`. A\nreasonable implementation would be to forward to `serialize_seq`.",69,null],[10,"serialize_tuple_elt","","Serializes a tuple element. Must have previously called\n`serialize_tuple`.",69,null],[10,"serialize_tuple_end","","Finishes serializing a tuple.",69,null],[10,"serialize_tuple_struct","","Begins to serialize a tuple struct. This call must be followed by zero\nor more calls to `serialize_tuple_struct_elt`, then a call to\n`serialize_tuple_struct_end`. A reasonable implementation would be to\nforward to `serialize_tuple`.",69,null],[10,"serialize_tuple_struct_elt","","Serializes a tuple struct element. Must have previously called\n`serialize_tuple_struct`.",69,null],[10,"serialize_tuple_struct_end","","Finishes serializing a tuple struct.",69,null],[10,"serialize_tuple_variant","","Begins to serialize a tuple variant. This call must be followed by zero\nor more calls to `serialize_tuple_variant_elt`, then a call to\n`serialize_tuple_variant_end`. A reasonable implementation would be to\nforward to `serialize_tuple_struct`.",69,null],[10,"serialize_tuple_variant_elt","","Serializes a tuple variant element. Must have previously called\n`serialize_tuple_variant`.",69,null],[10,"serialize_tuple_variant_end","","Finishes serializing a tuple variant.",69,null],[10,"serialize_map","","Begins to serialize a map. This call must be followed by zero or more\ncalls to `serialize_map_key` and `serialize_map_value`, then a call to\n`serialize_map_end`.",69,null],[10,"serialize_map_key","","Serialize a map key. Must have previously called `serialize_map`.",69,null],[10,"serialize_map_value","","Serialize a map value. Must have previously called `serialize_map`.",69,null],[10,"serialize_map_end","","Finishes serializing a map.",69,null],[10,"serialize_struct","","Begins to serialize a struct. This call must be followed by zero or more\ncalls to `serialize_struct_elt`, then a call to `serialize_struct_end`.",69,null],[10,"serialize_struct_elt","","Serializes a struct field. Must have previously called\n`serialize_struct`.",69,null],[10,"serialize_struct_end","","Finishes serializing a struct.",69,null],[10,"serialize_struct_variant","","Begins to serialize a struct variant. This call must be followed by zero\nor more calls to `serialize_struct_variant_elt`, then a call to\n`serialize_struct_variant_end`.",69,null],[10,"serialize_struct_variant_elt","","Serialize a struct variant element. Must have previously called\n`serialize_struct_variant`.",69,null],[10,"serialize_struct_variant_end","","Finishes serializing a struct variant.",69,null],[14,"forward_to_deserialize","serde","Helper to forward `Deserializer` methods to `Deserializer::deserialize`.\nEvery given method ignores all arguments and forwards to `deserialize`.\nNote that `deserialize_enum` simply returns an `Error::invalid_type`; a\nbetter approach is tracked in [serde-rs/serde#521][1].",null,null]],"paths":[[3,"ByteBuf"],[3,"ByteBufVisitor"],[3,"Bytes"],[4,"Type"],[3,"UnitVisitor"],[3,"BoolVisitor"],[3,"PhantomDataVisitor"],[3,"BinaryHeapVisitor"],[3,"BTreeSetVisitor"],[3,"LinkedListVisitor"],[3,"HashSetVisitor"],[3,"VecVisitor"],[3,"VecDequeVisitor"],[3,"TupleVisitor1"],[3,"TupleVisitor2"],[3,"TupleVisitor3"],[3,"TupleVisitor4"],[3,"TupleVisitor5"],[3,"TupleVisitor6"],[3,"TupleVisitor7"],[3,"TupleVisitor8"],[3,"TupleVisitor9"],[3,"TupleVisitor10"],[3,"TupleVisitor11"],[3,"TupleVisitor12"],[3,"TupleVisitor13"],[3,"TupleVisitor14"],[3,"TupleVisitor15"],[3,"TupleVisitor16"],[3,"BTreeMapVisitor"],[3,"HashMapVisitor"],[3,"IgnoredAny"],[4,"Error"],[8,"ValueDeserializer"],[3,"UnitDeserializer"],[3,"BoolDeserializer"],[3,"I8Deserializer"],[3,"I16Deserializer"],[3,"I32Deserializer"],[3,"I64Deserializer"],[3,"IsizeDeserializer"],[3,"U8Deserializer"],[3,"U16Deserializer"],[3,"U32Deserializer"],[3,"U64Deserializer"],[3,"UsizeDeserializer"],[3,"F32Deserializer"],[3,"F64Deserializer"],[3,"CharDeserializer"],[3,"StrDeserializer"],[3,"StringDeserializer"],[3,"CowStrDeserializer"],[3,"SeqDeserializer"],[3,"SeqVisitorDeserializer"],[3,"MapDeserializer"],[3,"MapVisitorDeserializer"],[3,"BytesDeserializer"],[3,"ByteBufDeserializer"],[8,"Error"],[8,"Deserialize"],[8,"Deserializer"],[8,"Visitor"],[8,"SeqVisitor"],[8,"MapVisitor"],[8,"EnumVisitor"],[8,"VariantVisitor"],[3,"LineColIterator"],[8,"Error"],[8,"Serialize"],[8,"Serializer"]]};
searchIndex["clang"] = {"doc":"A somewhat idiomatic Rust wrapper for libclang.","items":[[3,"Clang","clang","An empty type which prevents the use of this library from multiple threads simultaneously.",null,null],[3,"Entity","","An AST entity.",null,null],[3,"Index","","A collection of translation units.",null,null],[3,"ObjCAttributes","","Indicates which attributes were applied to an Objective-C property.",null,null],[12,"readonly","","Indicates use of the `readonly` attribute.",0,null],[12,"getter","","Indicates use of the `getter` attribute.",0,null],[12,"assign","","Indicates use of the `assign` attribute.",0,null],[12,"readwrite","","Indicates use of the `readwrite` attribute.",0,null],[12,"retain","","Indicates use of the `retain` attribute.",0,null],[12,"copy","","Indicates use of the `copy` attribute.",0,null],[12,"nonatomic","","Indicates use of the `nonatomic` attribute.",0,null],[12,"setter","","Indicates use of the `setter` attribute.",0,null],[12,"atomic","","Indicates use of the `atomic` attribute.",0,null],[12,"weak","","Indicates use of the `weak` attribute.",0,null],[12,"strong","","Indicates use of the `strong` attribute.",0,null],[12,"unsafe_retained","","Indicates use of the `unsafe_retained` attribute.",0,null],[3,"ObjCQualifiers","","Indicates which qualifiers were applied to an Objective-C method return or parameter type.",null,null],[12,"in_","","Indicates use of the `in` qualifier.",1,null],[12,"inout","","Indicates use of the `inout` qualifier.",1,null],[12,"out","","Indicates use of the `out` qualifier.",1,null],[12,"bycopy","","Indicates use of the `bycopy` qualifier.",1,null],[12,"byref","","Indicates use of the `byref` qualifier.",1,null],[12,"oneway","","Indicates use of the `oneway` qualifier.",1,null],[3,"Parser","","Parses translation units.",null,null],[3,"PlatformAvailability","","The availability of an AST entity on a particular platform.",null,null],[12,"platform","","The name of the platform.",2,null],[12,"unavailable","","Whether the AST entity is unavailable on the platform.",2,null],[12,"introduced","","The version of the platform in which this AST entity was introduced, if any.",2,null],[12,"deprecated","","The version of the platform in which this AST entity was deprecated, if any.",2,null],[12,"obsoleted","","The version of the platform in which this AST entity was obsoleted, if any.",2,null],[12,"message","","A message to display to users (e.g., replacement API suggestions).",2,null],[3,"ThreadOptions","","A set of options that determines which types of threads should use background priority.",null,null],[12,"editing","","Indicates whether threads creating for editing purposes should use background priority.",3,null],[12,"indexing","","Indicates whether threads creating for indexing purposes should use background priority.",3,null],[3,"TranslationUnit","","A preprocessed and parsed source file.",null,null],[3,"Type","","The type of an AST entity.",null,null],[3,"Unsaved","","The path to and unsaved contents of a previously existing file.",null,null],[3,"Usr","","A Unified Symbol Resolution (USR).",null,null],[12,"0","","",4,null],[3,"Version","","A version number in the form `x.y.z`.",null,null],[12,"x","","The `x` component of the version number.",5,null],[12,"y","","The `y` component of the version number.",5,null],[12,"z","","The `z` component of the version number.",5,null],[4,"AlignofError","","Indicates the error that prevented determining the alignment of a type.",null,null],[13,"Dependent","","The type is a dependent type.",6,null],[13,"Incomplete","","The type is an incomplete type.",6,null],[4,"OffsetofError","","Indicates the error that prevented determining the offset of a field in a record type.",null,null],[13,"Dependent","","The record type is a dependent type.",7,null],[13,"Incomplete","","The record type is an incomplete type.",7,null],[13,"Name","","The record type does not contain a field with the supplied name.",7,null],[13,"Parent","","The record type has an invalid parent declaration.",7,null],[4,"SaveError","","Indicates the type of error that prevented the saving of a translation unit to an AST file.",null,null],[13,"Errors","","Errors in the translation unit prevented saving.",8,null],[13,"Unknown","","An unknown error occurred.",8,null],[4,"SizeofError","","Indicates the error that prevented determining the size of a type.",null,null],[13,"Dependent","","The type is a dependent type.",9,null],[13,"Incomplete","","The type is an incomplete type.",9,null],[13,"VariableSize","","The type is a variable size type.",9,null],[4,"SourceError","","Indicates the type of error that prevented the loading of a translation unit from a source\nfile.",null,null],[13,"AstDeserialization","","An error occurred while deserializing an AST file.",10,null],[13,"Crash","","`libclang` crashed.",10,null],[13,"Unknown","","An unknown error occurred.",10,null],[4,"Accessibility","","Indicates the accessibility of a declaration or base class specifier.",null,null],[13,"Private","","The declaration or base class specifier is private.",11,null],[13,"Protected","","The declaration or base class specifier is protected.",11,null],[13,"Public","","The declaration or base class specifier is public.",11,null],[4,"Availability","","Indicates the availability of an AST entity.",null,null],[13,"Available","","The entity is available.",12,null],[13,"Deprecated","","The entity is available but has been deprecated and any usage of it will be a warning.",12,null],[13,"Inaccessible","","The entity is available but is not accessible and any usage of it will be an error.",12,null],[13,"Unavailable","","The entity is not available and any usage of it will be an error.",12,null],[4,"CallingConvention","","Indicates the calling convention specified for a function type.",null,null],[13,"Unexposed","","The function type uses a calling convention that is not exposed via this interface.",13,null],[13,"Cdecl","","The function type uses the x86 `cdecl` calling convention.",13,null],[13,"Fastcall","","The function type uses the x86 `fastcall` calling convention.",13,null],[13,"Pascal","","The function type uses the x86 `pascal` calling convention.",13,null],[13,"Stdcall","","The function type uses the x86 `stdcall` calling convention.",13,null],[13,"Thiscall","","The function type uses the x86 `thiscall` calling convention.",13,null],[13,"Aapcs","","The function type uses the ARM AACPS calling convention.",13,null],[13,"AapcsVfp","","The function type uses the ARM AACPS-VFP calling convention.",13,null],[13,"IntelOcl","","The function type uses the calling convention for Intel OpenCL built-ins.",13,null],[13,"SysV64","","The function type uses the x64 C calling convention as specified in the System V ABI.",13,null],[13,"Win64","","The function type uses the x64 C calling convention as implemented on Windows.",13,null],[4,"EntityKind","","Indicates the categorization of an AST entity.",null,null],[13,"UnexposedDecl","","A declaration whose specific type is not exposed via this interface.",14,null],[13,"StructDecl","","A C or C++ struct.",14,null],[13,"UnionDecl","","A C or C++ union.",14,null],[13,"ClassDecl","","A C++ class.",14,null],[13,"EnumDecl","","An enum.",14,null],[13,"FieldDecl","","A C field or C++ non-static data member in a struct, union, or class.",14,null],[13,"EnumConstantDecl","","An enum constant.",14,null],[13,"FunctionDecl","","A function.",14,null],[13,"VarDecl","","A variable.",14,null],[13,"ParmDecl","","A parameter.",14,null],[13,"ObjCInterfaceDecl","","An Objective-C `@interface`.",14,null],[13,"ObjCCategoryDecl","","An Objective-C `@interface` for a category.",14,null],[13,"ObjCProtocolDecl","","An Objective-C `@protocol` declaration.",14,null],[13,"ObjCPropertyDecl","","An Objective-C `@property` declaration.",14,null],[13,"ObjCIvarDecl","","An Objective-C instance variable.",14,null],[13,"ObjCInstanceMethodDecl","","An Objective-C instance method.",14,null],[13,"ObjCClassMethodDecl","","An Objective-C class method.",14,null],[13,"ObjCImplementationDecl","","An Objective-C `@implementation`.",14,null],[13,"ObjCCategoryImplDecl","","An Objective-C `@implementation` for a category.",14,null],[13,"TypedefDecl","","A typedef.",14,null],[13,"Method","","A C++ method.",14,null],[13,"Namespace","","A C++ namespace.",14,null],[13,"LinkageSpec","","A linkage specification (e.g., `extern &quot;C&quot;`).",14,null],[13,"Constructor","","A C++ constructor.",14,null],[13,"Destructor","","A C++ destructor.",14,null],[13,"ConversionFunction","","A C++ conversion function.",14,null],[13,"TemplateTypeParameter","","A C++ template type parameter.",14,null],[13,"NonTypeTemplateParameter","","A C++ template non-type parameter.",14,null],[13,"TemplateTemplateParameter","","A C++ template template parameter.",14,null],[13,"FunctionTemplate","","A C++ function template.",14,null],[13,"ClassTemplate","","A C++ class template.",14,null],[13,"ClassTemplatePartialSpecialization","","A C++ class template partial specialization.",14,null],[13,"NamespaceAlias","","A C++ namespace alias declaration.",14,null],[13,"UsingDirective","","A C++ using directive.",14,null],[13,"UsingDeclaration","","A C++ using declaration.",14,null],[13,"TypeAliasDecl","","A C++ type alias declaration.",14,null],[13,"ObjCSynthesizeDecl","","An Objective-C `@synthesize` definition.",14,null],[13,"ObjCDynamicDecl","","An Objective-C `@dynamic` definition.",14,null],[13,"AccessSpecifier","","An access specifier.",14,null],[13,"ObjCSuperClassRef","","A reference to a super class in Objective-C.",14,null],[13,"ObjCProtocolRef","","A reference to a protocol in Objective-C.",14,null],[13,"ObjCClassRef","","A reference to a class in Objective-C.",14,null],[13,"TypeRef","","A reference to a type declaration.",14,null],[13,"BaseSpecifier","","A base class specifier.",14,null],[13,"TemplateRef","","A reference to a class template, function template, template template parameter, or class\ntemplate partial specialization.",14,null],[13,"NamespaceRef","","A reference to a namespace or namespace alias.",14,null],[13,"MemberRef","","A reference to a member of a struct, union, or class that occurs in some non-expression\ncontext.",14,null],[13,"LabelRef","","A reference to a labeled statement.",14,null],[13,"OverloadedDeclRef","","A reference to a set of overloaded functions or function templates that has not yet been\nresolved to a specific function or function template.",14,null],[13,"VariableRef","","A reference to a variable that occurs in some non-expression context.",14,null],[13,"UnexposedExpr","","An expression whose specific kind is not exposed via this interface.",14,null],[13,"DeclRefExpr","","An expression that refers to some value declaration, such as a function or enumerator.",14,null],[13,"MemberRefExpr","","An expression that refers to the member of a struct, union, or class.",14,null],[13,"CallExpr","","An expression that calls a function.",14,null],[13,"ObjCMessageExpr","","An expression that sends a message to an Objective-C object or class.",14,null],[13,"BlockExpr","","An expression that represents a block literal.",14,null],[13,"IntegerLiteral","","An integer literal.",14,null],[13,"FloatingLiteral","","A floating point number literal.",14,null],[13,"ImaginaryLiteral","","An imaginary number literal.",14,null],[13,"StringLiteral","","A string literal.",14,null],[13,"CharacterLiteral","","A character literal.",14,null],[13,"ParenExpr","","A parenthesized expression.",14,null],[13,"UnaryOperator","","Any unary expression other than `sizeof` and `alignof`.",14,null],[13,"ArraySubscriptExpr","","An array subscript expression (`[C99 6.5.2.1]`).",14,null],[13,"BinaryOperator","","A built-in binary expression (e.g., `x + y`).",14,null],[13,"CompoundAssignOperator","","A compound assignment expression (e.g., `x += y`).",14,null],[13,"ConditionalOperator","","A ternary expression.",14,null],[13,"CStyleCastExpr","","An explicit cast in C or a C-style cast in C++.",14,null],[13,"CompoundLiteralExpr","","A compound literal expression (`[C99 6.5.2.5]`).",14,null],[13,"InitListExpr","","A C or C++ initializer list.",14,null],[13,"AddrLabelExpr","","A GNU address of label expression.",14,null],[13,"StmtExpr","","A GNU statement expression.",14,null],[13,"GenericSelectionExpr","","A C11 generic selection expression.",14,null],[13,"GNUNullExpr","","A GNU `__null` expression.",14,null],[13,"StaticCastExpr","","A C++ `static_cast&lt;&gt;` expression.",14,null],[13,"DynamicCastExpr","","A C++ `dynamic_cast&lt;&gt;` expression.",14,null],[13,"ReinterpretCastExpr","","A C++ `reinterpret_cast&lt;&gt;` expression.",14,null],[13,"ConstCastExpr","","A C++ `const_cast&lt;&gt;` expression.",14,null],[13,"FunctionalCastExpr","","A C++ cast that uses &quot;function&quot; notation (e.g., `int(0.5)`).",14,null],[13,"TypeidExpr","","A C++ `typeid` expression.",14,null],[13,"BoolLiteralExpr","","A C++ boolean literal.",14,null],[13,"NullPtrLiteralExpr","","A C++ `nullptr` expression.",14,null],[13,"ThisExpr","","A C++ `this` expression.",14,null],[13,"ThrowExpr","","A C++ `throw` expression.",14,null],[13,"NewExpr","","A C++ `new` expression.",14,null],[13,"DeleteExpr","","A C++ `delete` expression.",14,null],[13,"UnaryExpr","","A unary expression.",14,null],[13,"ObjCStringLiteral","","An Objective-C string literal.",14,null],[13,"ObjCEncodeExpr","","An Objective-C `@encode` expression.",14,null],[13,"ObjCSelectorExpr","","An Objective-C `@selector` expression.",14,null],[13,"ObjCProtocolExpr","","An Objective-C `@protocol` expression.",14,null],[13,"ObjCBridgedCastExpr","","An Objective-C bridged cast expression.",14,null],[13,"PackExpansionExpr","","A C++11 parameter pack expansion expression.",14,null],[13,"SizeOfPackExpr","","A C++11 `sizeof...` expression.",14,null],[13,"LambdaExpr","","A C++11 lambda expression.",14,null],[13,"ObjCBoolLiteralExpr","","An Objective-C boolean literal.",14,null],[13,"ObjCSelfExpr","","An Objective-C `self` expression.",14,null],[13,"UnexposedStmt","","A statement whose specific kind is not exposed via this interface.",14,null],[13,"LabelStmt","","A labelled statement in a function.",14,null],[13,"CompoundStmt","","A group of statements (e.g., a function body).",14,null],[13,"CaseStmt","","A `case` statement.",14,null],[13,"DefaultStmt","","A `default` statement.",14,null],[13,"IfStmt","","An `if` statement.",14,null],[13,"SwitchStmt","","A `switch` statement.",14,null],[13,"WhileStmt","","A `while` statement.",14,null],[13,"DoStmt","","A `do` statement.",14,null],[13,"ForStmt","","A `for` statement.",14,null],[13,"GotoStmt","","A `goto` statement.",14,null],[13,"IndirectGotoStmt","","An indirect `goto` statement.",14,null],[13,"ContinueStmt","","A `continue` statement.",14,null],[13,"BreakStmt","","A `break` statement.",14,null],[13,"ReturnStmt","","A `return` statement.",14,null],[13,"AsmStmt","","An inline assembly statement.",14,null],[13,"ObjCAtTryStmt","","An Objective-C `@try`-`@catch`-`@finally` statement.",14,null],[13,"ObjCAtCatchStmt","","An Objective-C `@catch` statement.",14,null],[13,"ObjCAtFinallyStmt","","An Objective-C `@finally` statement.",14,null],[13,"ObjCAtThrowStmt","","An Objective-C `@throw` statement.",14,null],[13,"ObjCAtSynchronizedStmt","","An Objective-C `@synchronized` statement.",14,null],[13,"ObjCAutoreleasePoolStmt","","An Objective-C autorelease pool statement.",14,null],[13,"ObjCForCollectionStmt","","An Objective-C collection statement.",14,null],[13,"CatchStmt","","A C++ catch statement.",14,null],[13,"TryStmt","","A C++ try statement.",14,null],[13,"ForRangeStmt","","A C++11 range-based for statement.",14,null],[13,"SehTryStmt","","A Windows Structured Exception Handling `__try` statement.",14,null],[13,"SehExceptStmt","","A Windows Structured Exception Handling `__except` statement.",14,null],[13,"SehFinallyStmt","","A Windows Structured Exception Handling `__finally` statement.",14,null],[13,"SehLeaveStmt","","A Windows Structured Exception Handling `__leave` statement.",14,null],[13,"MsAsmStmt","","A Microsoft inline assembly statement.",14,null],[13,"NullStmt","","A null statement.",14,null],[13,"DeclStmt","","An adaptor for mixing declarations with statements and expressions.",14,null],[13,"OmpParallelDirective","","An OpenMP parallel directive.",14,null],[13,"OmpSimdDirective","","An OpenMP SIMD directive.",14,null],[13,"OmpForDirective","","An OpenMP for directive.",14,null],[13,"OmpSectionsDirective","","An OpenMP sections directive.",14,null],[13,"OmpSectionDirective","","An OpenMP section directive.",14,null],[13,"OmpSingleDirective","","An OpenMP single directive.",14,null],[13,"OmpParallelForDirective","","An OpenMP parallel for directive.",14,null],[13,"OmpParallelSectionsDirective","","An OpenMP parallel sections directive.",14,null],[13,"OmpTaskDirective","","An OpenMP task directive.",14,null],[13,"OmpMasterDirective","","An OpenMP master directive.",14,null],[13,"OmpCriticalDirective","","An OpenMP critical directive.",14,null],[13,"OmpTaskyieldDirective","","An OpenMP taskyield directive.",14,null],[13,"OmpBarrierDirective","","An OpenMP barrier directive.",14,null],[13,"OmpTaskwaitDirective","","An OpenMP taskwait directive.",14,null],[13,"OmpFlushDirective","","An OpenMP flush directive.",14,null],[13,"TranslationUnit","","The top-level AST entity which acts as the root for the other entitys.",14,null],[13,"UnexposedAttr","","An attribute whose specific kind is not exposed via this interface.",14,null],[13,"IbActionAttr","","An attribute applied to an Objective-C IBAction.",14,null],[13,"IbOutletAttr","","An attribute applied to an Objective-C IBOutlet.",14,null],[13,"IbOutletCollectionAttr","","An attribute applied to an Objective-C IBOutletCollection.",14,null],[13,"FinalAttr","","The `final` attribute.",14,null],[13,"OverrideAttr","","The `override` attribute.",14,null],[13,"AnnotateAttr","","An annotation attribute.",14,null],[13,"AsmLabelAttr","","An ASM label attribute.",14,null],[13,"PackedAttr","","An attribute that requests for packed records (e.g., `__attribute__ ((__packed__))`).",14,null],[13,"PureAttr","","An attribute that asserts a function has no side effects (e.g., `__attribute__((pure))`).",14,null],[13,"ConstAttr","","The `const` attribute.",14,null],[13,"NoDuplicateAttr","","An attribute that allows calls to a function to be duplicated by the optimized\n(e.g., `__attribute__((noduplicate))`).",14,null],[13,"CudaConstantAttr","","A CUDA constant attribute.",14,null],[13,"CudaDeviceAttr","","A CUDA device attribute.",14,null],[13,"CudaGlobalAttr","","A CUDA global attribute.",14,null],[13,"CudaHostAttr","","A CUDA host attribute.",14,null],[13,"PreprocessingDirective","","A preprocessing directive.",14,null],[13,"MacroDefinition","","A macro definition.",14,null],[13,"MacroExpansion","","A macro expansion.",14,null],[13,"InclusionDirective","","An inclusion directive.",14,null],[13,"ModuleImportDecl","","A module import declaration.",14,null],[4,"EntityVisitResult","","Indicates how a entity visitation should proceed.",null,null],[13,"Break","","Do not continue visiting entities.",15,null],[13,"Continue","","Continue visiting sibling entities iteratively, skipping child entities.",15,null],[13,"Recurse","","Continue visiting sibling and child entities recursively, children first.",15,null],[4,"Language","","Indicates the language used by a declaration.",null,null],[13,"C","","The declaration uses the C programming language.",16,null],[13,"Cpp","","The declaration uses the C++ programming language.",16,null],[13,"ObjectiveC","","The declaration uses the Objective-C programming language.",16,null],[4,"Linkage","","Indicates the linkage of an AST entity.",null,null],[13,"Automatic","","The AST entity has automatic storage (e.g., variables or parameters).",17,null],[13,"Internal","","The AST entity is a static variable or static function.",17,null],[13,"External","","The AST entity has external linkage.",17,null],[13,"UniqueExternal","","The AST entity has external linkage and lives in a C++ anonymous namespace.",17,null],[4,"MemoryUsage","","Indicates the usage category of a quantity of memory.",null,null],[13,"Ast","","Expressions, declarations, and types.",18,null],[13,"AstSideTables","","Various tables used by the AST.",18,null],[13,"ExternalAstSourceMalloc","","Memory allocated with `malloc` for external AST sources.",18,null],[13,"ExternalAstSourceMMap","","Memory allocated with `mmap` for external AST sources.",18,null],[13,"GlobalCodeCompletionResults","","Cached global code completion results.",18,null],[13,"Identifiers","","Identifiers.",18,null],[13,"PreprocessingRecord","","The preprocessing record.",18,null],[13,"Preprocessor","","Memory allocated with `malloc` for the preprocessor.",18,null],[13,"PreprocessorHeaderSearch","","Header search tables.",18,null],[13,"Selectors","","Selectors.",18,null],[13,"SourceManagerContentCache","","The content cache used by the source manager.",18,null],[13,"SourceManagerDataStructures","","Data structures used by the source manager.",18,null],[13,"SourceManagerMalloc","","Memory allocated with `malloc` for the source manager.",18,null],[13,"SourceManagerMMap","","Memory allocated with `mmap` for the source manager.",18,null],[4,"RefQualifier","","Indicates the ref qualifier of a C++ function or method type.",null,null],[13,"LValue","","The function or method has an l-value ref qualifier (`&amp;`).",19,null],[13,"RValue","","The function or method has an r-value ref qualifier (`&amp;&amp;`).",19,null],[4,"TypeKind","","Indicates the categorization of a type.",null,null],[13,"Unexposed","","A type whose specific kind is not exposed via this interface.",20,null],[13,"Void","","`void`",20,null],[13,"Bool","","`bool` (C++) or `_Bool` (C99)",20,null],[13,"CharS","","The `char` type when it is signed by default.",20,null],[13,"CharU","","The `char` type when it is unsigned by default.",20,null],[13,"SChar","","`signed char`",20,null],[13,"UChar","","`unsigned char`",20,null],[13,"WChar","","`wchar_t`",20,null],[13,"Char16","","`char16_t`",20,null],[13,"Char32","","`char32_t`",20,null],[13,"Short","","`short`",20,null],[13,"UShort","","`unsigned short`",20,null],[13,"Int","","`int`",20,null],[13,"UInt","","`unsigned int`",20,null],[13,"Long","","`long`",20,null],[13,"ULong","","`unsigned long`",20,null],[13,"LongLong","","`long long`",20,null],[13,"ULongLong","","`unsigned long long`",20,null],[13,"Int128","","`__int128_t`",20,null],[13,"UInt128","","`__uint128_t`",20,null],[13,"Float","","`float`",20,null],[13,"Double","","`double`",20,null],[13,"LongDouble","","`long double`",20,null],[13,"Nullptr","","`nullptr_t` (C++11)",20,null],[13,"Complex","","A C99 complex type (e.g., `_Complex float`).",20,null],[13,"Dependent","","An unknown dependent type.",20,null],[13,"Overload","","The type of an unresolved overload set.",20,null],[13,"ObjCId","","`id` (Objective-C)",20,null],[13,"ObjCClass","","`Class` (Objective-C)",20,null],[13,"ObjCSel","","`SEL` (Objective-C)",20,null],[13,"ObjCInterface","","An Objective-C interface type.",20,null],[13,"ObjCObjectPointer","","An Objective-C pointer to object type.",20,null],[13,"Pointer","","A pointer type.",20,null],[13,"BlockPointer","","A block pointer type (e.g., `void (^)(int)`).",20,null],[13,"MemberPointer","","A pointer to a record member type.",20,null],[13,"LValueReference","","An l-value reference (e.g. `int&amp;`).",20,null],[13,"RValueReference","","An r-value reference (e.g. `int&amp;&amp;`).",20,null],[13,"Enum","","An enum type.",20,null],[13,"Record","","A record type such as a struct or a class.",20,null],[13,"Typedef","","A typedef.",20,null],[13,"FunctionPrototype","","A function prototype with parameter type information (e.g., `void foo(int)`).",20,null],[13,"FunctionNoPrototype","","A function prototype without parameter type information (e.g., `void foo()`).",20,null],[13,"ConstantArray","","An array type with a specified size that is an integer constant expression.",20,null],[13,"DependentSizedArray","","An array type with a specified size that is a dependent value.",20,null],[13,"IncompleteArray","","An array type without a specified size.",20,null],[13,"VariableArray","","An array type with a specified size that is not an integer constant expression.",20,null],[13,"Vector","","A GCC generic vector type.",20,null],[5,"get_version","","Returns the version string for the version of `libclang` in use.",null,{"inputs":[],"output":{"name":"string"}}],[0,"completion","","Code completion.",null,null],[3,"Completer","clang::completion","Runs code completion.",null,null],[3,"CompletionContext","","Indicates which types of results were included in a set of code completion results.",null,null],[12,"all_types","","Indicates whether all possible types were included.",21,null],[12,"all_values","","Indicates whether all possible values were included.",21,null],[12,"class_type_values","","Indicates whether values that resolve to C++ class types were included.",21,null],[12,"dot_members","","Indicates whether the members of a record that are accessed with the dot operator were\nincluded.",21,null],[12,"arrow_members","","Indicates whether the members of a record that are accessed with the arrow operator were\nincluded.",21,null],[12,"enum_tags","","Indicates whether enum tags were included.",21,null],[12,"union_tags","","Indicates whether union tags were included.",21,null],[12,"struct_tags","","Indicates whether struct tags were included.",21,null],[12,"class_names","","Indicates whether C++ class names were included.",21,null],[12,"namespaces","","Indicates whether C++ namespaces and namespace aliases were included.",21,null],[12,"nested_name_specifiers","","Indicates whether C++ nested name specifiers were included.",21,null],[12,"macro_names","","Indicates whether macro names were included.",21,null],[12,"natural_language","","Indicates whether natural language results were included.",21,null],[12,"objc_object_values","","Indicates whether values that resolve to Objective-C objects were included.",21,null],[12,"objc_selector_values","","Indicates whether values that resolve to Objective-C selectors were included.",21,null],[12,"objc_property_members","","Indicates whether the properties of an Objective-C object that are accessed with the dot\noperator were included.",21,null],[12,"objc_interfaces","","Indicates whether Objective-C interfaces were included.",21,null],[12,"objc_protocols","","Indicates whether Objective-C protocols were included.",21,null],[12,"objc_categories","","Indicates whether Objective-C categories were included.",21,null],[12,"objc_instance_messages","","Indicates whether Objective-C instance messages were included.",21,null],[12,"objc_class_messages","","Indicates whether Objective-C class messages were included.",21,null],[12,"objc_selector_names","","Indicates whether Objective-C selector names were included.",21,null],[3,"CompletionResult","","A code completion result.",null,null],[12,"kind","","The categorization of the AST entity this code completion result produces.",22,null],[12,"string","","The completion string for this code completion result.",22,null],[3,"CompletionResults","","A set of code completion results.",null,null],[3,"CompletionString","","A semantic string that describes a code completion result.",null,null],[4,"CompletionChunk","","A piece of a code completion string.",null,null],[13,"Colon","","A colon (`&#39;:&#39;`).",23,null],[13,"Comma","","A comma (`&#39;,&#39;`).",23,null],[13,"Equals","","An equals sign (`&#39;=&#39;`).",23,null],[13,"Semicolon","","A semicolon (`&#39;;&#39;`).",23,null],[13,"LeftAngleBracket","","A left angle bracket (`&#39;&lt;&#39;`).",23,null],[13,"RightAngleBracket","","A right angle bracket (`&#39;&gt;&#39;`).",23,null],[13,"LeftBrace","","A left brace (`&#39;{&#39;`).",23,null],[13,"RightBrace","","A right brace (`&#39;}&#39;`).",23,null],[13,"LeftParenthesis","","A left parentesis (`&#39;(&#39;`)).",23,null],[13,"RightParenthesis","","A right parenthesis (`&#39;)&#39;`).",23,null],[13,"LeftSquareBracket","","A left square bracket (`&#39;[&#39;`).",23,null],[13,"RightSquareBracket","","A right square bracket (`&#39;]&#39;`).",23,null],[13,"HorizontalSpace","","Horizontal space (e.g., `&#39; &#39;`).",23,null],[13,"VerticalSpace","","Vertical space (e.g., `&#39;\\n&#39;`).",23,null],[13,"CurrentParameter","","Text that describes the current parameter when code completion was run on a function call,\nmessage send, or template specialization.",23,null],[13,"Informative","","Informative text that should be displayed but not inserted as part of the template.",23,null],[13,"Placeholder","","Text that should be replaced by the user.",23,null],[13,"ResultType","","Text that specifies the result type of the containing result.",23,null],[13,"Text","","Text that should be inserted.",23,null],[13,"TypedText","","Text that the user would be expected to type to get the containing code completion result.",23,null],[13,"Optional","","An optional piece that could be part of the template but is not required.",23,null],[11,"clone","","",23,null],[11,"fmt","","",23,null],[11,"eq","","",23,null],[11,"ne","","",23,null],[11,"get_text","","Returns the text associated with this completion chunk if this chunk is not optional.",23,null],[11,"is_optional","","Returns whether this completion chunk is optional.",23,null],[11,"clone","","",24,null],[11,"fmt","","",24,null],[11,"macros","","Sets whether macros will be included in code completion results.",24,null],[11,"code_patterns","","Sets whether code patterns (e.g., for loops) will be included in code completion\nresults.",24,null],[11,"briefs","","Sets whether documentation comment briefs will be included in code completion results.",24,null],[11,"unsaved","","Sets the unsaved files to use.",24,null],[11,"complete","","Runs code completion.",24,null],[11,"clone","","",21,null],[11,"fmt","","",21,null],[11,"eq","","",21,null],[11,"ne","","",21,null],[11,"hash","","",21,null],[11,"from","","",21,{"inputs":[{"name":"cxcompletioncontext"}],"output":{"name":"completioncontext"}}],[11,"clone","","",22,null],[11,"fmt","","",22,null],[11,"eq","","",22,null],[11,"ne","","",22,null],[11,"partial_cmp","","",22,null],[11,"cmp","","",22,null],[11,"get_diagnostics","","Returns the diagnostics that were produced prior to the code completion context for this set\nof code completion results.",25,null],[11,"get_context","","Returns the code completion context for this set of code completion results, if any.",25,null],[11,"get_container_kind","","Returns the categorization of the entity that contains the code completion context for this\nset of code completion results and whether that entity is incomplete, if applicable.",25,null],[11,"get_objc_selector","","Returns the selector or partial selector that has been entered this far for the Objective-C\nmessage send context for this set of code completion results.",25,null],[11,"get_usr","","Returns the USR for the entity that contains the code completion context for this set of\ncode completion results, if applicable.",25,null],[11,"get_results","","Returns the code completion results in this set of code completion results.",25,null],[11,"drop","","",25,null],[11,"fmt","","",25,null],[11,"clone","","",26,null],[11,"get_priority","","Returns an integer that represents how likely a user is to select this completion string as\ndetermined by internal heuristics. Smaller values indicate higher priorities.",26,null],[11,"get_annotations","","Returns the annotations associated with this completion string.",26,null],[11,"get_availability","","Returns the availability of this completion string.",26,null],[11,"get_comment_brief","","Returns the documentation comment brief associated with the declaration this completion\nstring refers to, if applicable.",26,null],[11,"get_parent_name","","Returns the name of the semantic parent of the declaration this completion string refers to,\nif applicable.",26,null],[11,"get_typed_text","","Returns the text of the typed text chunk for this completion string, if any.",26,null],[11,"get_chunks","","Returns the chunks of this completion string.",26,null],[11,"fmt","","",26,null],[11,"eq","","",26,null],[11,"partial_cmp","","",26,null],[11,"cmp","","",26,null],[0,"diagnostic","clang","Issues with source files.",null,null],[3,"Diagnostic","clang::diagnostic","A message from the compiler about an issue with a source file.",null,null],[3,"DiagnosticFormatter","","Builds formatted strings from diagnostics.",null,null],[4,"FixIt","","A suggested fix for an issue with a source file.",null,null],[13,"Deletion","","Delete a segment of the source file.",27,null],[13,"Insertion","","Insert a string into the source file.",27,null],[13,"Replacement","","Replace a segment of the source file with a string.",27,null],[4,"Severity","","Indicates the severity of a diagnostic.",null,null],[13,"Ignored","","The diagnostic has been suppressed (e.g., by a command-line option).",28,null],[13,"Note","","The diagnostic is attached to the previous non-note diagnostic.",28,null],[13,"Warning","","The diagnostic targets suspicious code that may or may not be wrong.",28,null],[13,"Error","","The diagnostic targets ill-formed code.",28,null],[13,"Fatal","","The diagnostic targets code that is ill-formed in such a way that parser recovery is\nunlikely to produce any useful results.",28,null],[11,"clone","","",27,null],[11,"fmt","","",27,null],[11,"eq","","",27,null],[11,"ne","","",27,null],[11,"clone","","",28,null],[11,"fmt","","",28,null],[11,"eq","","",28,null],[11,"partial_cmp","","",28,null],[11,"cmp","","",28,null],[11,"hash","","",28,null],[11,"clone","","",29,null],[11,"get_severity","","Returns the severity of this diagnostic.",29,null],[11,"get_text","","Returns the text of this diagnostic.",29,null],[11,"get_location","","Returns the source location of this diagnostic.",29,null],[11,"get_ranges","","Returns the source ranges of this diagnostic.",29,null],[11,"get_fix_its","","Returns the fix-its for this diagnostic.",29,null],[11,"get_children","","Returns the child diagnostics of this diagnostic.",29,null],[11,"formatter","","Returns a diagnostic formatter that builds a formatted string from this diagnostic.",29,null],[11,"partial_cmp","","",29,null],[11,"fmt","","",29,null],[11,"fmt","","",29,null],[11,"clone","","",30,null],[11,"fmt","","",30,null],[11,"source_location","","Sets whether the diagnostic text will be prefixed by the file and line of the source\nlocation the diagnostic indicates. This prefix may also contain column and/or source\nrange information.",30,null],[11,"column","","Sets whether the column will be included in the source location prefix.",30,null],[11,"source_ranges","","Sets whether the source ranges will be included to the source location prefix.",30,null],[11,"option","","Sets whether the option associated with the diagnostic (e.g., `-Wconversion`) will be\nplaced in brackets after the diagnostic text if there is such an option.",30,null],[11,"category_id","","Sets whether the category number associated with the diagnostic will be placed in\nbrackets after the diagnostic text if there is such a category number.",30,null],[11,"category_name","","Sets whether the category name associated with the diagnostic will be placed in brackets\nafter the diagnostic text if there is such a category name.",30,null],[11,"format","","Returns a formatted string.",30,null],[0,"documentation","clang","Comments.",null,null],[3,"BlockCommand","clang::documentation","A block command with zero or more arguments and a paragraph as an argument.",null,null],[12,"command","","The command.",31,null],[12,"arguments","","The command arguments.",31,null],[12,"children","","The children of the paragraph argument.",31,null],[3,"Comment","","A comment attached to a declaration.",null,null],[3,"HtmlStartTag","","An HTML start tag.",null,null],[12,"name","","The tag name.",32,null],[12,"attributes","","The attributes associated with the tag, if any.",32,null],[12,"closing","","Whether the tag is self-closing.",32,null],[3,"InlineCommand","","An inline command with word-like arguments.",null,null],[12,"command","","The command.",33,null],[12,"arguments","","The command arguments.",33,null],[12,"style","","The style with which to render the command arguments, if any.",33,null],[3,"ParamCommand","","A `\\param` command.",null,null],[12,"index","","The index of the parameter, if this command refers to a valid parameter.",34,null],[12,"parameter","","The parameter.",34,null],[12,"direction","","The parameter direction, if specified.",34,null],[3,"TParamCommand","","A `\\tparam` command.",null,null],[12,"position","","The nesting depth and the index of the template parameter, if this command refers to a\nvalid template parameter.",35,null],[12,"parameter","","The template parameter.",35,null],[4,"CommentChild","","A child component of a comment.",null,null],[13,"BlockCommand","","A block command with zero or more arguments and a paragraph as an argument.",36,null],[13,"HtmlStartTag","","An HTML start tag.",36,null],[13,"HtmlEndTag","","An HTML end tag.",36,null],[13,"InlineCommand","","An inline command with word-like arguments.",36,null],[13,"Paragraph","","A paragraph containing inline content.",36,null],[13,"ParamCommand","","A `\\param` command.",36,null],[13,"TParamCommand","","A `\\tparam` command.",36,null],[13,"Text","","Plain text.",36,null],[13,"VerbatimCommand","","A verbatim command with a closing command.",36,null],[13,"VerbatimLineCommand","","A verbatim command with a single line and no closing command.",36,null],[4,"ParameterDirection","","Indicates the parameter passing direction for a `\\param` command.",null,null],[13,"In","","Indicates the parameter is an input parameter.",37,null],[13,"Out","","Indicates the parameter is an output parameter.",37,null],[13,"InOut","","Indicates the parameter is both an input and an output parameter.",37,null],[4,"InlineCommandStyle","","Indicates the appropriate rendering style for an inline command argument.",null,null],[13,"Bold","","Indicates the command should be rendered in a bold font.",38,null],[13,"Monospace","","Indicates the command should be rendered in a monospace font.",38,null],[13,"Emphasized","","Indicates the command should be rendered emphasized (typically italicized).",38,null],[11,"clone","","",36,null],[11,"fmt","","",36,null],[11,"eq","","",36,null],[11,"ne","","",36,null],[11,"clone","","",37,null],[11,"fmt","","",37,null],[11,"eq","","",37,null],[11,"hash","","",37,null],[11,"clone","","",38,null],[11,"fmt","","",38,null],[11,"eq","","",38,null],[11,"hash","","",38,null],[11,"clone","","",31,null],[11,"fmt","","",31,null],[11,"eq","","",31,null],[11,"ne","","",31,null],[11,"clone","","",39,null],[11,"get_children","","Returns the children of this comment.",39,null],[11,"as_html","","Returns this comment as an HTML string.",39,null],[11,"as_xml","","Returns this comment as an XML string.",39,null],[11,"fmt","","",39,null],[11,"clone","","",32,null],[11,"fmt","","",32,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"clone","","",33,null],[11,"fmt","","",33,null],[11,"eq","","",33,null],[11,"ne","","",33,null],[11,"clone","","",34,null],[11,"fmt","","",34,null],[11,"eq","","",34,null],[11,"ne","","",34,null],[11,"clone","","",35,null],[11,"fmt","","",35,null],[11,"eq","","",35,null],[11,"ne","","",35,null],[0,"source","clang","Source files, locations, and ranges.",null,null],[3,"File","clang::source","A source file.",null,null],[3,"Location","","The file, line, column, and character offset of a source location.",null,null],[12,"file","","The file of the source location.",40,null],[12,"line","","The line of the source location.",40,null],[12,"column","","The column of the source location.",40,null],[12,"offset","","The character offset of the source location.",40,null],[3,"Module","","A collection of headers.",null,null],[3,"SourceLocation","","A location in a source file.",null,null],[3,"SourceRange","","A half-open range in a source file.",null,null],[11,"clone","","",41,null],[11,"get_path","","Returns the absolute path to this file.",41,null],[11,"get_time","","Returns the last modification time for this file.",41,null],[11,"get_id","","Returns a unique identifier for this file.",41,null],[11,"get_module","","Returns the module containing this file, if any.",41,null],[11,"get_skipped_ranges","","Returns the source ranges in this file that were skipped by the preprocessor.",41,null],[11,"is_include_guarded","","Returns whether this file is guarded against multiple inclusions.",41,null],[11,"get_location","","Returns the source location at the supplied line and column in this file.",41,null],[11,"get_offset_location","","Returns the source location at the supplied character offset in this file.",41,null],[11,"get_includes","","Returns the inclusion directives in this file.",41,null],[11,"get_references","","Returns the references to the supplied entity in this file.",41,null],[11,"visit_includes","","Visits the inclusion directives in this file and returns whether visitation was ended by the\ncallback returning `false`.",41,null],[11,"visit_references","","Visits the references to the supplied entity in this file and returns whether visitation was\nended by the callback returning `false`.",41,null],[11,"fmt","","",41,null],[11,"eq","","",41,null],[11,"hash","","",41,null],[11,"clone","","",40,null],[11,"fmt","","",40,null],[11,"eq","","",40,null],[11,"ne","","",40,null],[11,"hash","","",40,null],[11,"clone","","",42,null],[11,"get_name","","Returns the name of this module (e.g., `vector` for the `std.vector` module).",42,null],[11,"get_full_name","","Returns the full name of this module (e.g., `std.vector` for the `std.vector` module).",42,null],[11,"get_parent","","Returns the parent of this module, if any.",42,null],[11,"get_file","","Returns the AST file this module came from.",42,null],[11,"get_top_level_headers","","Returns the top-level headers in this module.",42,null],[11,"is_system","","Returns whether this module is a system module.",42,null],[11,"fmt","","",42,null],[11,"eq","","",42,null],[11,"clone","","",43,null],[11,"get_expansion_location","","Returns the file, line, column and character offset of this source location.",43,null],[11,"get_file_location","","Returns the file, line, column and character offset of this source location.",43,null],[11,"get_presumed_location","","Returns the file path, line, and column of this source location taking line directives into\naccount.",43,null],[11,"get_spelling_location","","Returns the file, line, column and character offset of this source location.",43,null],[11,"get_entity","","Returns the AST entity at this source location, if any.",43,null],[11,"is_in_main_file","","Returns whether this source location is in the main file of its translation unit.",43,null],[11,"is_in_system_header","","Returns whether this source location is in a system header.",43,null],[11,"fmt","","",43,null],[11,"eq","","",43,null],[11,"hash","","",43,null],[11,"clone","","",44,null],[11,"new","","Constructs a new `SourceRange` that spans [`start`, `end`).",44,{"inputs":[{"name":"sourcelocation"},{"name":"sourcelocation"}],"output":{"name":"sourcerange"}}],[11,"get_start","","Returns the inclusive start of this source range.",44,null],[11,"get_end","","Returns the exclusive end of this source range.",44,null],[11,"is_in_main_file","","Returns whether this source range is in the main file of its translation unit.",44,null],[11,"is_in_system_header","","Returns whether this source range is in a system header.",44,null],[11,"tokenize","","Tokenizes the source code covered by this source range and returns the resulting tokens.",44,null],[11,"fmt","","",44,null],[11,"eq","","",44,null],[11,"hash","","",44,null],[0,"token","clang","Lexed pieces of source files.",null,null],[3,"Token","clang::token","A lexed piece of a source file.",null,null],[4,"TokenKind","","Indicates the categorization of a token.",null,null],[13,"Comment","","A comment token.",45,null],[13,"Identifier","","An identifier token.",45,null],[13,"Keyword","","A keyword token.",45,null],[13,"Literal","","A literal token.",45,null],[13,"Punctuation","","A puncuation token.",45,null],[11,"clone","","",45,null],[11,"fmt","","",45,null],[11,"eq","","",45,null],[11,"hash","","",45,null],[11,"clone","","",46,null],[11,"get_kind","","Returns the categorization of this token.",46,null],[11,"get_spelling","","Returns the textual representation of this token.",46,null],[11,"get_location","","Returns the source location of this token.",46,null],[11,"get_range","","Returns the source range of this token.",46,null],[11,"fmt","","",46,null],[0,"sonar","clang","Finding C declarations.",null,null],[3,"Declaration","clang::sonar","A C declaration.",null,null],[12,"name","","The name of the declaration.",47,null],[12,"entity","","The entity that describes the declaration (e.g., contains the fields of a struct).",47,null],[12,"source","","The entity the declaration originated from if it differs from `entity`.",47,null],[3,"Definition","","A C preprocessor definition.",null,null],[12,"name","","The name of the definition.",48,null],[12,"value","","The value of the definition.",48,null],[12,"entity","","The entity that describes the definition.",48,null],[3,"Definitions","","An iterator over preprocessor definition declarations.",null,null],[3,"Enums","","An iterator over enum declarations.",null,null],[3,"Functions","","An iterator over function declarations.",null,null],[3,"Structs","","An iterator over struct declarations.",null,null],[3,"Typedefs","","An iterator over typedef declarations.",null,null],[3,"Unions","","An iterator over struct declarations.",null,null],[4,"DefinitionValue","","The value of a C preprocessor definition.",null,null],[13,"Integer","","An integer.",49,null],[13,"Real","","A floating point number.",49,null],[5,"find_definitions","","Returns an iterator over the simple preprocessor definitions in the supplied entities.",null,{"inputs":[{"name":"e"}],"output":{"name":"definitions"}}],[5,"find_enums","","Returns an iterator over the enums in the supplied entities.",null,{"inputs":[{"name":"e"}],"output":{"name":"enums"}}],[5,"find_functions","","Returns an iterator over the functions in the supplied entities.",null,{"inputs":[{"name":"e"}],"output":{"name":"functions"}}],[5,"find_structs","","Returns an iterator over the structs in the supplied entities.",null,{"inputs":[{"name":"e"}],"output":{"name":"structs"}}],[5,"find_typedefs","","Returns an iterator over the typedefs in the supplied entities.",null,{"inputs":[{"name":"e"}],"output":{"name":"typedefs"}}],[5,"find_unions","","Returns an iterator over the unions in the supplied entities.",null,{"inputs":[{"name":"e"}],"output":{"name":"unions"}}],[11,"clone","","",49,null],[11,"fmt","","",49,null],[11,"eq","","",49,null],[11,"ne","","",49,null],[11,"clone","","",47,null],[11,"fmt","","",47,null],[11,"eq","","",47,null],[11,"ne","","",47,null],[11,"clone","","",48,null],[11,"fmt","","",48,null],[11,"eq","","",48,null],[11,"ne","","",48,null],[11,"next","","",50,null],[11,"next","","",51,null],[11,"next","","",52,null],[11,"next","","",53,null],[11,"next","","",54,null],[11,"next","","",55,null],[11,"clone","clang","",6,null],[11,"fmt","","",6,null],[11,"eq","","",6,null],[11,"hash","","",6,null],[11,"description","","",6,null],[11,"fmt","","",6,null],[11,"clone","","",7,null],[11,"fmt","","",7,null],[11,"eq","","",7,null],[11,"hash","","",7,null],[11,"description","","",7,null],[11,"fmt","","",7,null],[11,"clone","","",8,null],[11,"fmt","","",8,null],[11,"eq","","",8,null],[11,"hash","","",8,null],[11,"description","","",8,null],[11,"fmt","","",8,null],[11,"clone","","",9,null],[11,"fmt","","",9,null],[11,"eq","","",9,null],[11,"hash","","",9,null],[11,"description","","",9,null],[11,"fmt","","",9,null],[11,"clone","","",10,null],[11,"fmt","","",10,null],[11,"eq","","",10,null],[11,"hash","","",10,null],[11,"description","","",10,null],[11,"fmt","","",10,null],[11,"clone","","",0,null],[11,"fmt","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"hash","","",0,null],[11,"from","","",0,{"inputs":[{"name":"cxobjcpropertyattrkind"}],"output":{"name":"objcattributes"}}],[11,"clone","","",11,null],[11,"fmt","","",11,null],[11,"eq","","",11,null],[11,"hash","","",11,null],[11,"clone","","",12,null],[11,"fmt","","",12,null],[11,"eq","","",12,null],[11,"hash","","",12,null],[11,"clone","","",13,null],[11,"fmt","","",13,null],[11,"eq","","",13,null],[11,"hash","","",13,null],[11,"clone","","",14,null],[11,"fmt","","",14,null],[11,"eq","","",14,null],[11,"hash","","",14,null],[11,"clone","","",15,null],[11,"fmt","","",15,null],[11,"eq","","",15,null],[11,"hash","","",15,null],[11,"clone","","",16,null],[11,"fmt","","",16,null],[11,"eq","","",16,null],[11,"hash","","",16,null],[11,"clone","","",17,null],[11,"fmt","","",17,null],[11,"eq","","",17,null],[11,"hash","","",17,null],[11,"clone","","",18,null],[11,"fmt","","",18,null],[11,"eq","","",18,null],[11,"hash","","",18,null],[11,"clone","","",19,null],[11,"fmt","","",19,null],[11,"eq","","",19,null],[11,"hash","","",19,null],[11,"clone","","",20,null],[11,"fmt","","",20,null],[11,"eq","","",20,null],[11,"hash","","",20,null],[11,"fmt","","",56,null],[11,"new","","Constructs a new `Clang`.",56,{"inputs":[],"output":{"name":"result"}}],[11,"drop","","",56,null],[11,"clone","","",57,null],[11,"get_kind","","Returns the categorization of this AST entity.",57,null],[11,"get_display_name","","Returns the display name of this AST entity, if any.",57,null],[11,"get_location","","Returns the source location of this AST entity, if any.",57,null],[11,"get_range","","Returns the source range of this AST entity, if any.",57,null],[11,"get_accessibility","","Returns the accessibility of this declaration or base class specifier, if applicable.",57,null],[11,"get_arguments","","Returns the arguments of this function or method, if applicable.",57,null],[11,"get_availability","","Returns the availability of this AST entity.",57,null],[11,"get_bit_field_width","","Returns the width of this bit field, if applicable.",57,null],[11,"get_canonical_entity","","Returns the canonical entity for this AST entity.",57,null],[11,"get_comment","","Returns the comment associated with this AST entity, if any.",57,null],[11,"get_parsed_comment","","Returns the parsed comment associated with this declaration, if application.",57,null],[11,"get_comment_brief","","Returns the brief of the comment associated with this AST entity, if any.",57,null],[11,"get_comment_range","","Returns the source range of the comment associated with this AST entity, if any.",57,null],[11,"get_completion_string","","Returns a completion string for this declaration or macro definition, if applicable.",57,null],[11,"get_child","","Returns the child of this AST entity with the supplied index.",57,null],[11,"get_children","","Returns the children of this AST entity.",57,null],[11,"get_definition","","Returns the AST entity that describes the definition of this AST entity, if any.",57,null],[11,"get_enum_constant_value","","Returns the value of this enum constant declaration, if applicable.",57,null],[11,"get_enum_underlying_type","","Returns the underlying type of this enum declaration, if applicable.",57,null],[11,"get_file","","Returns the file included by this inclusion directive, if applicable.",57,null],[11,"get_language","","Returns the language used by this declaration, if applicable.",57,null],[11,"get_lexical_parent","","Returns the lexical parent of this AST entity, if any.",57,null],[11,"get_linkage","","Returns the linkage of this AST entity, if any.",57,null],[11,"get_module","","Returns the module imported by this module import declaration, if applicable.",57,null],[11,"get_name","","Returns the name of this AST entity, if any.",57,null],[11,"get_name_ranges","","Returns the source ranges of the name of this AST entity.",57,null],[11,"get_objc_attributes","","Returns which attributes were applied to this Objective-C property, if applicable.",57,null],[11,"get_objc_ib_outlet_collection_type","","Returns the element type for this Objective-C `iboutletcollection` attribute, if applicable.",57,null],[11,"get_objc_receiver_type","","Returns the type of the receiver of this Objective-C message, if applicable.",57,null],[11,"get_objc_selector_index","","Returns the selector index for this Objective-C selector identifier, if applicable.",57,null],[11,"get_objc_type_encoding","","Returns the type encoding for this Objective-C declaration, if applicable.",57,null],[11,"get_objc_qualifiers","","Returns which qualifiers were applied to this Objective-C method return or parameter type,\nif applicable.",57,null],[11,"get_overloaded_declarations","","Returns the overloaded declarations referenced by this overloaded declaration reference, if\napplicable.",57,null],[11,"get_overridden_methods","","Returns the methods that were overridden by this method, if applicable.",57,null],[11,"get_platform_availability","","Returns the availability of this declaration on the platforms where it is known, if\napplicable.",57,null],[11,"get_reference","","Returns the AST entity referred to by this AST entity, if any.",57,null],[11,"get_semantic_parent","","Returns the semantic parent of this AST entity, if any.",57,null],[11,"get_template","","Returns the template declaration this template specialization was instantiated from, if\napplicable.",57,null],[11,"get_template_kind","","Returns the categorization of the template specialization that would result from\ninstantiating this template declaration, if applicable.",57,null],[11,"get_translation_unit","","Returns the translation unit which contains this AST entity.",57,null],[11,"get_type","","Returns the type of this AST entity, if any.",57,null],[11,"get_typedef_underlying_type","","Returns the underlying type of this typedef declaration, if applicable.",57,null],[11,"get_usr","","Returns the USR for this AST entity, if any.",57,null],[11,"is_bit_field","","Returns whether this AST entity is a bit field.",57,null],[11,"is_const_method","","Returns whether this AST entity is a const method.",57,null],[11,"is_definition","","Returns whether this AST entity is a declaration and also the definition of that\ndeclaration.",57,null],[11,"is_dynamic_call","","Returns whether this AST entity is a dynamic call.",57,null],[11,"is_objc_optional","","Returns whether this AST entity is an Objective-C method or property declaration with the\n`@optional` attribute applied to it.",57,null],[11,"is_pure_virtual_method","","Returns whether this AST entity is a pure virtual method.",57,null],[11,"is_static_method","","Returns whether this AST entity is a static method.",57,null],[11,"is_variadic","","Returns whether this AST entity is a variadic function or method.",57,null],[11,"is_virtual_base","","Returns whether this AST entity is a virtual base class specifier.",57,null],[11,"is_virtual_method","","Returns whether this AST entity is a virtual method.",57,null],[11,"visit_children","","Visits the children of this AST entity recursively and returns whether visitation was ended\nby the callback returning `EntityVisitResult::Break`.",57,null],[11,"is_attribute","","Returns whether this AST entity is categorized as an attribute.",57,null],[11,"is_declaration","","Returns whether this AST entity is categorized as a declaration.",57,null],[11,"is_expression","","Returns whether this AST entity is categorized as an expression.",57,null],[11,"is_preprocessing","","Returns whether this AST entity is categorized as a preprocessing entity.",57,null],[11,"is_reference","","Returns whether this AST entity is categorized as a reference.",57,null],[11,"is_statement","","Returns whether this AST entity is categorized as a statement.",57,null],[11,"is_unexposed","","Returns whether the categorization of this AST entity is unexposed.",57,null],[11,"is_in_main_file","","Returns whether this AST entity is in a main file.",57,null],[11,"is_in_system_header","","Returns whether this AST entity is in a system header.",57,null],[11,"fmt","","",57,null],[11,"eq","","",57,null],[11,"hash","","",57,null],[11,"new","","Constructs a new `Index`.",58,{"inputs":[{"name":"clang"},{"name":"bool"},{"name":"bool"}],"output":{"name":"index"}}],[11,"parser","","Returns a parser for the supplied file.",58,null],[11,"get_thread_options","","Returns the thread options for this index.",58,null],[11,"set_thread_options","","Sets the thread options for this index.",58,null],[11,"drop","","",58,null],[11,"fmt","","",58,null],[11,"clone","","",1,null],[11,"fmt","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"hash","","",1,null],[11,"from","","",1,{"inputs":[{"name":"cxobjcdeclqualifierkind"}],"output":{"name":"objcqualifiers"}}],[11,"clone","","",59,null],[11,"fmt","","",59,null],[11,"cache_completion_results","","Sets whether certain code completion results will be cached when the translation unit is\nreparsed.",59,null],[11,"detailed_preprocessing_record","","Sets whether a detailed preprocessing record will be constructed which tracks all macro\ndefinitions and instantiations.",59,null],[11,"briefs_in_completion_results","","Sets whether documentation comment briefs will be included in code completion results.",59,null],[11,"incomplete","","Sets whether the translation unit will be considered incomplete.",59,null],[11,"skip_function_bodies","","Sets whether function and method bodies will be skipped.",59,null],[11,"arguments","","Sets the compiler arguments to provide to `libclang`.",59,null],[11,"unsaved","","Sets the unsaved files to use.",59,null],[11,"parse","","Parses a translation unit.",59,null],[11,"clone","","",2,null],[11,"fmt","","",2,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"hash","","",2,null],[11,"clone","","",3,null],[11,"fmt","","",3,null],[11,"eq","","",3,null],[11,"ne","","",3,null],[11,"hash","","",3,null],[11,"default","","",3,{"inputs":[],"output":{"name":"threadoptions"}}],[11,"from","","",3,{"inputs":[{"name":"cxglobaloptflags"}],"output":{"name":"threadoptions"}}],[11,"from_ast","","Constructs a new `TranslationUnit` from an AST file.",60,{"inputs":[{"name":"index"},{"name":"f"}],"output":{"name":"result"}}],[11,"get_diagnostics","","Returns the diagnostics for this translation unit.",60,null],[11,"get_entity","","Returns the entity for this translation unit.",60,null],[11,"get_file","","Returns the file at the supplied path in this translation unit, if any.",60,null],[11,"get_memory_usage","","Returns the memory usage of this translation unit.",60,null],[11,"annotate","","Returns the AST entities which correspond to the supplied tokens, if any.",60,null],[11,"completer","","Returns a completer which runs code completion.",60,null],[11,"save","","Saves this translation unit to an AST file.",60,null],[11,"reparse","","Consumes this translation unit and reparses the source file it was created from with the\nsame compiler arguments that were used originally.",60,null],[11,"drop","","",60,null],[11,"fmt","","",60,null],[11,"clone","","",61,null],[11,"get_kind","","Returns the kind of this type.",61,null],[11,"get_display_name","","Returns the display name of this type.",61,null],[11,"get_alignof","","Returns the alignment of this type in bytes.",61,null],[11,"get_offsetof","","Returns the offset of the field with the supplied name in this record type in bits.",61,null],[11,"get_sizeof","","Returns the size of this type in bytes.",61,null],[11,"get_argument_types","","Returns the argument types for this function or method type, if applicable.",61,null],[11,"get_calling_convention","","Returns the calling convention specified for this function type, if applicable.",61,null],[11,"get_canonical_type","","Returns the canonical type for this type.",61,null],[11,"get_class_type","","Returns the class type for this member pointer type, if applicable.",61,null],[11,"get_declaration","","Returns the AST entity that declared this type, if any.",61,null],[11,"get_element_type","","Returns the element type for this array, complex, or vector type, if applicable.",61,null],[11,"get_pointee_type","","Returns the pointee type for this pointer type, if applicable.",61,null],[11,"get_ref_qualifier","","Returns the ref qualifier for this C++ function or method type, if applicable.",61,null],[11,"get_result_type","","Returns the result type for this function or method type, if applicable.",61,null],[11,"get_size","","Returns the size of this constant array or vector type, if applicable.",61,null],[11,"get_template_argument_types","","Returns the template argument types for this template class specialization type, if\napplicable.",61,null],[11,"is_const_qualified","","Returns whether this type is qualified with const.",61,null],[11,"is_elaborated","","Returns whether this type is an elaborated type, if it can be determined for certain.",61,null],[11,"is_pod","","Returns whether this type is plain old data (POD).",61,null],[11,"is_restrict_qualified","","Returns whether this type is qualified with restrict.",61,null],[11,"is_variadic","","Returns whether this type is a variadic function type.",61,null],[11,"is_volatile_qualified","","Returns whether this type is qualified with volatile.",61,null],[11,"is_integer","","Returns whether this type is an integer type.",61,null],[11,"is_signed_integer","","Returns whether this type is a signed integer type.",61,null],[11,"is_unsigned_integer","","Returns whether this type is an unsigned integer type.",61,null],[11,"fmt","","",61,null],[11,"eq","","",61,null],[11,"clone","","",62,null],[11,"fmt","","",62,null],[11,"eq","","",62,null],[11,"ne","","",62,null],[11,"hash","","",62,null],[11,"new","","Constructs a new `Unsaved`.",62,{"inputs":[{"name":"p"},{"name":"c"}],"output":{"name":"unsaved"}}],[11,"clone","","",4,null],[11,"fmt","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"partial_cmp","","",4,null],[11,"lt","","",4,null],[11,"le","","",4,null],[11,"gt","","",4,null],[11,"ge","","",4,null],[11,"cmp","","",4,null],[11,"hash","","",4,null],[11,"from_objc_category","","Constructs a new `Usr` from an Objective-C category.",4,{"inputs":[{"name":"c"},{"name":"c"}],"output":{"name":"usr"}}],[11,"from_objc_class","","Constructs a new `Usr` from an Objective-C class.",4,{"inputs":[{"name":"c"}],"output":{"name":"usr"}}],[11,"from_objc_ivar","","Constructs a new `Usr` from an Objective-C instance variable.",4,{"inputs":[{"name":"usr"},{"name":"n"}],"output":{"name":"usr"}}],[11,"from_objc_method","","Constructs a new `Usr` from an Objective-C method.",4,{"inputs":[{"name":"usr"},{"name":"n"},{"name":"bool"}],"output":{"name":"usr"}}],[11,"from_objc_property","","Constructs a new `Usr` from an Objective-C property.",4,{"inputs":[{"name":"usr"},{"name":"n"}],"output":{"name":"usr"}}],[11,"from_objc_protocol","","Constructs a new `Usr` from an Objective-C protocol.",4,{"inputs":[{"name":"p"}],"output":{"name":"usr"}}],[11,"clone","","",5,null],[11,"fmt","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"hash","","",5,null]],"paths":[[3,"ObjCAttributes"],[3,"ObjCQualifiers"],[3,"PlatformAvailability"],[3,"ThreadOptions"],[3,"Usr"],[3,"Version"],[4,"AlignofError"],[4,"OffsetofError"],[4,"SaveError"],[4,"SizeofError"],[4,"SourceError"],[4,"Accessibility"],[4,"Availability"],[4,"CallingConvention"],[4,"EntityKind"],[4,"EntityVisitResult"],[4,"Language"],[4,"Linkage"],[4,"MemoryUsage"],[4,"RefQualifier"],[4,"TypeKind"],[3,"CompletionContext"],[3,"CompletionResult"],[4,"CompletionChunk"],[3,"Completer"],[3,"CompletionResults"],[3,"CompletionString"],[4,"FixIt"],[4,"Severity"],[3,"Diagnostic"],[3,"DiagnosticFormatter"],[3,"BlockCommand"],[3,"HtmlStartTag"],[3,"InlineCommand"],[3,"ParamCommand"],[3,"TParamCommand"],[4,"CommentChild"],[4,"ParameterDirection"],[4,"InlineCommandStyle"],[3,"Comment"],[3,"Location"],[3,"File"],[3,"Module"],[3,"SourceLocation"],[3,"SourceRange"],[4,"TokenKind"],[3,"Token"],[3,"Declaration"],[3,"Definition"],[4,"DefinitionValue"],[3,"Definitions"],[3,"Enums"],[3,"Functions"],[3,"Structs"],[3,"Typedefs"],[3,"Unions"],[3,"Clang"],[3,"Entity"],[3,"Index"],[3,"Parser"],[3,"TranslationUnit"],[3,"Type"],[3,"Unsaved"]]};
searchIndex["env_logger"] = {"doc":"A logger configured via an environment variable which writes to standard\nerror.","items":[[3,"Logger","env_logger","The logger.",null,null],[3,"LogBuilder","","LogBuilder acts as builder for initializing the Logger.\nIt can be used to customize the log format, change the enviromental variable used\nto provide the logging directives and also set the default log level filter.",null,null],[5,"init","","Initializes the global logger with an env logger.",null,{"inputs":[],"output":{"name":"result"}}],[11,"new","","Initializes the log builder with defaults",0,{"inputs":[],"output":{"name":"logbuilder"}}],[11,"filter","","Adds filters to the logger",0,null],[11,"format","","Sets the format function for formatting the log output.",0,null],[11,"parse","","Parses the directives string in the same form as the RUST_LOG\nenvironment variable.",0,null],[11,"init","","Initializes the global logger with an env logger.",0,null],[11,"build","","Build an env logger.",0,null],[11,"new","","",1,{"inputs":[],"output":{"name":"logger"}}],[11,"filter","","",1,null],[11,"enabled","","",1,null],[11,"log","","",1,null]],"paths":[[3,"LogBuilder"],[3,"Logger"]]};
searchIndex["clap"] = {"doc":"A simple-to-use, efficient, and full-featured library for parsing command line arguments and subcommands when writing console/terminal applications.","items":[[3,"Arg","clap","The abstract representation of a command line argument. Used to set all the options and\nrelationships that define a valid argument for the program.",null,null],[3,"ArgGroup","","`ArgGroup`s are a family of related [arguments] and way for you to express, &quot;Any of these\narguments&quot;. By placing arguments in a logical group, you can create easier requirement and\nexclusion rules instead of having to list each argument individually, or when you want a rule\nto apply &quot;any but not all&quot; arguments.",null,null],[3,"ArgMatches","","Used to get information about the arguments that where supplied to the program at runtime by\nthe user. New instances of this struct are obtained by using the [`App::get_matches`] family of\nmethods.",null,null],[3,"SubCommand","","The abstract representation of a command line subcommand.",null,null],[3,"Values","","An iterator for getting multiple values out of an argument via the [`ArgMatches::values_of`]\nmethod.",null,null],[3,"OsValues","","An iterator for getting multiple values out of an argument via the [`ArgMatches::values_of_os`]\nmethod. Usage of this iterator allows values which contain invalid UTF-8 code points unlike\n[`Values`].",null,null],[3,"App","","Used to create a representation of a command line program and all possible command line\narguments. Application settings are set using the &quot;builder pattern&quot; with the\n[`App::get_matches`] family of methods being the terminal methods that starts the\nruntime-parsing process. These methods then return information about the user supplied\narguments (or lack there of).",null,null],[3,"Error","","Command Line Argument Parser Error",null,null],[12,"message","","Formated error message",0,null],[12,"kind","","The type of error",0,null],[12,"info","","Any additional information passed along, such as the argument name that caused the error",0,null],[4,"ArgSettings","","Various settings that apply to arguments and may be set, unset, and checked via getter/setter\nmethods [`Arg::set`], [`Arg::unset`], and [`Arg::is_set`]\n[`Arg::set`]: ./struct.Arg.html#method.set\n[`Arg::unset`]: ./struct.Arg.html#method.unset\n[`Arg::is_set`]: ./struct.Arg.html#method.is_set",null,null],[13,"Required","","The argument must be used",1,null],[13,"Multiple","","The argument may be used multiple times such as `--flag --flag`",1,null],[13,"EmptyValues","","The argument allows empty values such as `--option &quot;&quot;`",1,null],[13,"Global","","The argument should be propagated down through all child [`SubCommands`]\n[`SubCommand`]: ./struct.SubCommand.html",1,null],[13,"Hidden","","The argument should **not** be shown in help text",1,null],[13,"TakesValue","","The argument accepts a value, such as `--option &lt;value&gt;`",1,null],[13,"UseValueDelimiter","","Determines if the argument allows values to be grouped via a delimter",1,null],[13,"NextLineHelp","","Prints the help text on the line after the argument",1,null],[13,"RequireDelimiter","","Requires the use of a value delimiter for all multiple values",1,null],[4,"AppSettings","","Application level settings, which affect how [`App`] operates",null,null],[13,"SubcommandsNegateReqs","","Allows [`SubCommand`]s to override all requirements of the parent command. For example if you\nhad a subcommand or top level application which had a required argument that are only\nrequired as long as there is no subcommand present, using this setting would allow you set\nthose arguments to [`Arg::required(true)`] and yet receive no error so long as the user\nuses a valid subcommand instead.",2,null],[13,"SubcommandRequired","","Allows specifying that if no [`SubCommand`] is present at runtime, error and exit\ngracefully",2,null],[13,"ArgRequiredElseHelp","","Specifies that the help text should be displayed (and then exit gracefully), if no\narguments are present at runtime (i.e. an empty run such as, `$ myprog`.",2,null],[13,"GlobalVersion","","Specifies to use the version of the current command for all child [`SubCommand`]. (Defaults\nto `false`; subcommands have independant version strings from their parents)",2,null],[13,"VersionlessSubcommands","","Disables `-V` and `--version` for all [`SubCommand`]s (Defaults to `false`; subcommands\n*do* have version flags)",2,null],[13,"UnifiedHelpMessage","","Groups flags and options together presenting a more unified help message (a la `getopts` or\n`docopt` style).",2,null],[13,"WaitOnError","","Will display a message &quot;Press [ENTER]/[RETURN] to continue...&quot; and wait for user before\nexiting",2,null],[13,"SubcommandRequiredElseHelp","","Specifies that the help text should be displayed (and then exit gracefully), if no\n[`SubCommand`]s are present at runtime (i.e. an empty run such as, `$ myprog`.",2,null],[13,"Hidden","","Specifies that this [`SubCommand`] should be hidden from help messages",2,null],[13,"TrailingVarArg","","Specifies that the final positional argument is a &quot;VarArg&quot; and that `clap` should not\nattempt to parse any further args.",2,null],[13,"NoBinaryName","","Specifies that the parser should not assume the first argument passed is the binary name.\nThis is normally the case when using a &quot;daemon&quot; style mode, or an interactive CLI where one\none would not normally type the binary or program name for each command.",2,null],[13,"AllowExternalSubcommands","","Specifies that an unexpected positional argument, which would otherwise cause a\n[`ErrorKind::UnknownArgument`] error, should instead be treated as a [`SubCommand`] within\nthe [`ArgMatches`] struct.",2,null],[13,"StrictUtf8","","Specifies that any invalid UTF-8 code points should be treated as an error and fail\nwith a [`ErrorKind::InvalidUtf8`] error.",2,null],[13,"AllowInvalidUtf8","","Specifies that any invalid UTF-8 code points should *not* be treated as an error. This is\nthe default behavior of `clap`",2,null],[13,"AllowLeadingHyphen","","Specifies that leading hyphens are allowed in argument *values*, such as negative numbers\n`-10` (which would otherwise be parsed as another flag or option)",2,null],[13,"HidePossibleValuesInHelp","","Tells `clap` *not* to print possible values when displaying help information. This can be\nuseful if there are many values, or they are explained elsewhere.",2,null],[13,"NextLineHelp","","Places the help string for all arguments on the line after the argument",2,null],[13,"DeriveDisplayOrder","","Displays the arguments and [`SubCommand`]s in the help message in the order that they were\ndeclared in, vice alphabetically which is the default.",2,null],[13,"ColoredHelp","","Uses colorized help messages.",2,null],[13,"ColorAuto","","Enables colored output only when the output is going to a terminal or TTY.",2,null],[13,"ColorAlways","","Enables colored output regardless of whether or not the output is going to a terminal/TTY.",2,null],[13,"ColorNever","","Disables colored output no matter if the output is going to a terminal/TTY, or not.",2,null],[13,"DontDelimitTrailingValues","","Disables the automatic delimiting of values when `--` or [`AppSettings::TrailingVarArg`]\nwas used.",2,null],[4,"ErrorKind","","Command line argument parser kind of error",null,null],[13,"InvalidValue","","Occurs when an [`Arg`] has a set of possible values, and the user provides a value which\nisn&#39;t in that set.",3,null],[13,"UnknownArgument","","Occurs when a user provides a flag, option, or argument which wasn&#39;t defined.",3,null],[13,"InvalidSubcommand","","Occurs when the user provids an unrecognized [`SubCommand`] which meets the threshold for\nbeing similar enough to an existing subcommand so as to not cause the more general\n[`UnknownArgument`] error.",3,null],[13,"UnrecognizedSubcommand","","Occurs when the user provids an unrecognized [`SubCommand`] which does not meet the\nthreshold for being similar enough to an existing subcommand so as to not cause the more\ndetailed [`InvalidSubcommand`] error.",3,null],[13,"EmptyValue","","Occurs when the user provides an empty value for an option that does not allow empty\nvalues.",3,null],[13,"ValueValidation","","Occurs when the user provides a value for an argument with a custom validation and the\nvalue fails that validation.",3,null],[13,"TooManyValues","","Occurs when a user provides more values for an argument than were defined by setting\n[`Arg::max_values`].",3,null],[13,"TooFewValues","","Occurs when the user provides fewer values for an argument than were defined by setting\n[`Arg::min_values`].",3,null],[13,"WrongNumberOfValues","","Occurs when the user provides a different number of values for an argument than what&#39;s\nbeen defined by setting [`Arg::number_of_values`] or than was implicitly set by\n[`Arg::value_names`].",3,null],[13,"ArgumentConflict","","Occurs when the user provides two values which conflict with each other and can&#39;t be used\ntogether.",3,null],[13,"MissingRequiredArgument","","Occurs when the user does not provide one or more required arguments.",3,null],[13,"MissingSubcommand","","Occurs when a subcommand is required (as defined by [`AppSettings::SubcommandRequired`]),\nbut the user does not provide one.",3,null],[13,"MissingArgumentOrSubcommand","","Occurs when either an argument or [`SubCommand`] is required, as defined by\n[`AppSettings::ArgRequiredElseHelp`] but the user did not provide one.",3,null],[13,"UnexpectedMultipleUsage","","Occurs when the user provides an argument multiple times which has not been set to allow\nmultiple uses.",3,null],[13,"InvalidUtf8","","Occurs when the user provides a value containing invalid UTF-8 for an argument and\n[`AppSettings::StrictUtf8`] is set.",3,null],[13,"HelpDisplayed","","Not a true &quot;error&quot; as it means `--help` or similar was used. The help message will be sent\nto `stdout`.",3,null],[13,"VersionDisplayed","","Not a true &quot;error&quot; as it means `--version` or similar was used. The message will be sent\nto `stdout`.",3,null],[13,"ArgumentNotFound","","Occurs when using the [`value_t!`] and [`values_t!`] macros to convert an argument value\ninto type `T`, but the argument you requested wasn&#39;t used. I.e. you asked for an argument\nwith name `config` to be converted, but `config` wasn&#39;t used by the user.\n[`value_t!`]: ./macro.value_t!.html\n[`values_t!`]: ./macro.values_t!.html",3,null],[13,"Io","","Represents an [I/O error], typically while writing to `stderr` or `stdout`.\n[I/O error]: https://doc.rust-lang.org/std/io/struct.Error.html",3,null],[13,"Format","","Represents an Rust&#39;s [Format error] as part of [`Display`] , typically while writing to\n`stderr` or `stdout`.\n[`Display`]: https://doc.rust-lang.org/std/fmt/trait.Display.html\n[Format error]: https://doc.rust-lang.org/std/fmt/struct.Error.html",3,null],[4,"Shell","","Describes which shell to produce a completions file for",null,null],[13,"Bash","","Generates a .sh completion file for the Bourne Again SHell (BASH)",4,null],[13,"Fish","","Generates a .fish completion file for the friendly interactive shell (fish)",4,null],[11,"fmt","","",2,null],[11,"eq","","",2,null],[11,"clone","","",2,null],[11,"from_str","","",2,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Creates a new instance of an application requiring a name. The name may be, but doesn&#39;t\nhave to be same as the binary. The name will be displayed to the user when they request to\nprint version or help and usage information.",5,{"inputs":[{"name":"s"}],"output":{"name":"self"}}],[11,"author","","Sets a string of author(s) that will be displayed to the user when they\nrequest the help information with `--help` or `-h`.",5,null],[11,"bin_name","","Overrides the system-determined binary name. This should only be used when absolutely\nneccessary, such as when the binary name for your application is misleading, or perhaps\n*not* how the user should invoke your program.",5,null],[11,"about","","Sets a string describing what the program does. This will be displayed when displaying help\ninformation.",5,null],[11,"after_help","","Adds additional help information to be displayed in addition to auto-generated help. This\ninformation is displayed **after** the auto-generated help information. This is often used\nto describe how to use the arguments, or caveats to be noted.",5,null],[11,"before_help","","Adds additional help information to be displayed in addition to auto-generated help. This\ninformation is displayed **before** the auto-generated help information. This is often used\nfor header information.",5,null],[11,"version","","Sets a string of the version number to be displayed when displaying version or help\ninformation.",5,null],[11,"usage","","Sets a custom usage string to override the auto-generated usage string.",5,null],[11,"help","","Sets a custom help message and overrides the auto-generated one. This should only be used\nwhen the auto-generated message does not suffice.",5,null],[11,"help_short","","Sets the [`short`] for the auto-generated `help` argument.",5,null],[11,"version_short","","Sets the [`short`] for the auto-generated `version` argument.",5,null],[11,"template","","Sets the help template to be used, overriding the default format.",5,null],[11,"setting","","Enables a single command, or [`SubCommand`], level settings.",5,null],[11,"settings","","Enables multiple command, or [`SubCommand`], level settings",5,null],[11,"global_setting","","Enables a single setting that is propogated *down* through all child [`SubCommand`]s.",5,null],[11,"global_settings","","Enables multiple settings which are propogated *down* through all child [`SubCommand`]s.",5,null],[11,"unset_setting","","Disables a single command, or [`SubCommand`], level setting.",5,null],[11,"unset_settings","","Disables multiple command, or [`SubCommand`], level settings.",5,null],[11,"set_term_width","","Sets the terminal width at which to wrap help messages. Defaults to `120`. Using `0` will\nignore terminal widths and use source formatting.",5,null],[11,"arg","","Adds an [argument] to the list of valid possibilties.",5,null],[11,"args","","Adds multiple [arguments] to the list of valid possibilties",5,null],[11,"arg_from_usage","","A convenience method for adding a single [argument] from a usage type string. The string\nused follows the same rules and syntax as [`Arg::from_usage`]",5,null],[11,"args_from_usage","","Adds multiple [arguments] at once from a usage string, one per line. See\n[`Arg::from_usage`] for details on the syntax and rules supported.",5,null],[11,"alias","","Allows adding a [`SubCommand`] alias, which function as &quot;hidden&quot; subcommands that\nautomatically dispatch as if this subcommand was used. This is more efficient, and easier\nthan creating multiple hidden subcommands as one only needs to check for the existence of\nthis command, and not all variants.",5,null],[11,"aliases","","Allows adding [`SubCommand`] aliases, which function as &quot;hidden&quot; subcommands that\nautomatically dispatch as if this subcommand was used. This is more efficient, and easier\nthan creating multiple hidden subcommands as one only needs to check for the existence of\nthis command, and not all variants.",5,null],[11,"visible_alias","","Allows adding a [`SubCommand`] alias that functions exactly like those defined with\n[`App::alias`], except that they are visible inside the help message.",5,null],[11,"visible_aliases","","Allows adding multiple [`SubCommand`] aliases that functions exactly like those defined\nwith [`App::aliases`], except that they are visible inside the help message.",5,null],[11,"group","","Adds an [`ArgGroup`] to the application. [`ArgGroup`]s are a family of related arguments.\nBy placing them in a logical group, you can build easier requirement and exclusion rules.\nFor instance, you can make an entire [`ArgGroup`] required, meaning that one (and *only*\none) argument from that group must be present at runtime.",5,null],[11,"groups","","Adds multiple [`ArgGroup`]s to the [`App`] at once.",5,null],[11,"subcommand","","Adds a [`SubCommand`] to the list of valid possibilties. Subcommands are effectively\nsub-[`App`]s, because they can contain their own arguments, subcommands, version, usage,\netc. They also function just like [`App`]s, in that they get their own auto generated help,\nversion, and usage.",5,null],[11,"subcommands","","Adds multiple subcommands to the list of valid possibilties by iterating over an\n[`IntoIterator`] of [`SubCommand`]s",5,null],[11,"display_order","","Allows custom ordering of [`SubCommand`]s within the help message. Subcommands with a lower\nvalue will be displayed first in the help message. This is helpful when one would like to\nemphasise frequently used subcommands, or prioritize those towards the top of the list.\nDuplicate values **are** allowed. Subcommands with duplicate display orders will be\ndisplayed in alphabetical order.",5,null],[11,"print_help","","Prints the full help message to [`io::stdout()`] using a [`BufWriter`]",5,null],[11,"write_help","","Writes the full help message to the user to a [`io::Write`] object",5,null],[11,"write_version","","Writes the version message to the user to a [`io::Write`] object",5,null],[11,"gen_completions","","Generate a completions file for a specified shell at compile time.",5,null],[11,"gen_completions_to","","Generate a completions file for a specified shell at runtime.  Until `cargo install` can\ninstall extra files like a completion script, this may be used e.g. in a command that\noutputs the contents of the completion script, to be redirected into a file by the user.",5,null],[11,"get_matches","","Starts the parsing process, upon a failed parse an error will be displayed to the user and\nthe process will exit with the appropriate error code. By default this method gets all user\nprovided arguments from [`env::args_os`] in order to allow for invalid UTF-8 code points,\nwhich are legal on many platforms.",5,null],[11,"get_matches_safe","","Starts the parsing process. This method will return a [`clap::Result`] type instead of exiting\nthe process on failed parse. By default this method gets matches from [`env::args_os`]",5,null],[11,"get_matches_from","","Starts the parsing process. Like [`App::get_matches`] this method does not return a [`clap::Result`]\nand will automatically exit with an error message. This method, however, lets you specify\nwhat iterator to use when performing matches, such as a [`Vec`] of your making.",5,null],[11,"get_matches_from_safe","","Starts the parsing process. A combination of [`App::get_matches_from`], and\n[`App::get_matches_safe`]",5,null],[11,"get_matches_from_safe_borrow","","Starts the parsing process without consuming the [`App`] struct `self`. This is normally not\nthe desired functionality, instead prefer [`App::get_matches_from_safe`] which *does*\nconsume `self`.",5,null],[11,"clone","","",5,null],[11,"fmt","","",5,null],[11,"default","","",6,{"inputs":[],"output":{"name":"self"}}],[11,"with_name","","Creates a new instance of [`Arg`] using a unique string name. The name will be used to get\ninformation about whether or not the argument was used at runtime, get values, set\nrelationships with other args, etc..",6,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"from_usage","","Creates a new instance of [`Arg`] from a usage string. Allows creation of basic settings\nfor the [`Arg`]. The syntax is flexible, but there are some rules to follow.",6,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"short","","Sets the short version of the argument without the preceding `-`.",6,null],[11,"long","","Sets the long version of the argument without the preceding `--`.",6,null],[11,"help","","Sets the help text of the argument that will be displayed to the user when they print the\nusage/help information.",6,null],[11,"required","","Sets whether or not the argument is required by default. Required by default means it is\nrequired, when no other conflicting rules have been evaluated. Conflicting rules take\nprecedence over being required. **Default:** `false`",6,null],[11,"required_unless","","Sets an arg that override this arg&#39;s required setting. (i.e. this arg will be required\nunless this other argument is present).",6,null],[11,"required_unless_all","","Sets args that override this arg&#39;s required setting. (i.e. this arg will be required unless\nall these other arguments are present).",6,null],[11,"required_unless_one","","Sets args that override this arg&#39;s [required] setting. (i.e. this arg will be required\nunless *at least one of* these other arguments are present).",6,null],[11,"conflicts_with","","Sets a conflicting argument by name. I.e. when using this argument,\nthe following argument can&#39;t be present and vice versa.",6,null],[11,"conflicts_with_all","","The same as [`Arg::conflicts_with`] but allows specifying multiple two-way conlicts per\nargument.",6,null],[11,"overrides_with","","Sets a overridable argument by name. I.e. this argument and the following argument\nwill override each other in POSIX style (whichever argument was specified at runtime\n**last** &quot;wins&quot;)",6,null],[11,"overrides_with_all","","Sets multiple mutually overridable arguments by name. I.e. this argument and the following\nargument will override each other in POSIX style (whichever argument was specified at\nruntime **last** &quot;wins&quot;)",6,null],[11,"requires","","Sets an argument by name that is required when this one is present I.e. when\nusing this argument, the following argument *must* be present.",6,null],[11,"requires_all","","Sets multiple arguments by names that are required when this one is present I.e. when\nusing this argument, the following arguments *must* be present.",6,null],[11,"takes_value","","Specifies that the argument takes a value at run time.",6,null],[11,"index","","Specifies the index of a positional argument **starting at** 1.",6,null],[11,"multiple","","Specifies that the argument may appear more than once. For flags, this results\nin the number of occurrences of the flag being recorded. For example `-ddd` or `-d -d -d`\nwould count as three occurrences. For options there is a distinct difference in multiple\noccurrences vs multiple values.",6,null],[11,"global","","Specifies that an argument can be matched to all child [`SubCommand`]s.",6,null],[11,"empty_values","","Allows an argument to accept explicitly empty values. An empty value must be specified at\nthe command line with an explicit `&quot;&quot;`, or `&#39;&#39;`",6,null],[11,"hidden","","Hides an argument from help message output.",6,null],[11,"possible_values","","Specifies a list of possible values for this argument. At runtime, `clap` verifies that\nonly one of the specified values was used, or fails with an error message.",6,null],[11,"possible_value","","Specifies a possible value for this argument, one at a time. At runtime, `clap` verifies\nthat only one of the specified values was used, or fails with error message.",6,null],[11,"group","","Specifies the name of the [`ArgGroup`] the argument belongs to.",6,null],[11,"groups","","Specifies the names of multiple [`ArgGroup`]&#39;s the argument belongs to.",6,null],[11,"number_of_values","","Specifies how many values are required to satisfy this argument. For example, if you had a\n`-f &lt;file&gt;` argument where you wanted exactly 3 &#39;files&#39; you would set\n`.number_of_values(3)`, and this argument wouldn&#39;t be satisfied unless the user provided\n3 and only 3 values.",6,null],[11,"validator","","Allows one to perform a custom validation on the argument value. You provide a closure\nwhich accepts a [`String`] value, and return a [`Result`] where the [`Err(String)`] is a\nmessage displayed to the user.",6,null],[11,"max_values","","Specifies the *maximum* number of values are for this argument. For example, if you had a\n`-f &lt;file&gt;` argument where you wanted up to 3 &#39;files&#39; you would set `.max_values(3)`, and\nthis argument would be satisfied if the user provided, 1, 2, or 3 values.",6,null],[11,"min_values","","Specifies the *minimum* number of values for this argument. For example, if you had a\n`-f &lt;file&gt;` argument where you wanted at least 2 &#39;files&#39; you would set\n`.min_values(2)`, and this argument would be satisfied if the user provided, 2 or more\nvalues.",6,null],[11,"use_delimiter","","Specifies whether or not an argument should allow grouping of multiple values via a\ndelimiter. I.e. should `--option=val1,val2,val3` be parsed as three values (`val1`, `val2`,\nand `val3`) or as a single value (`val1,val2,val3`). Defaults to using `,` (comma) as the\nvalue delimiter for all arguments that accept values (options and positional arguments)",6,null],[11,"require_delimiter","","Specifies that *multiple values* may only be set using the delimiter. This means if an\nif an option is encountered, and no delimiter is found, it automatically assumed that no\nadditional values for that option follow. This is unlike the default, where it is generally\nassumed that more values will follow regardless of whether or not a delimiter is used.",6,null],[11,"value_delimiter","","Specifies the separator to use when values are clumped together, defaults to `,` (comma).",6,null],[11,"value_names","","Specify multiple names for values of option arguments. These names are cosmetic only, used\nfor help and usage strings only. The names are **not** used to access arguments. The values\nof the arguments are accessed in numeric order (i.e. if you specify two names `one` and\n`two` `one` will be the first matched value, `two` will be the second).",6,null],[11,"value_name","","Specifies the name for value of [option] or [positional] arguments inside of help\ndocumentation. This name is cosmetic only, the name is **not** used to access arguments.\nThis setting can be very helpful when describing the type of input the user should be\nusing, such as `FILE`, `INTERFACE`, etc. Although not required, it&#39;s somewhat convention to\nuse all capital letters for the value name.",6,null],[11,"default_value","","Specifies the value of the argument when *not* specified at runtime.",6,null],[11,"next_line_help","","When set to `true` the help string will be displayed on the line after the argument and\nindented once. This can be helpful for arguments with very long or complex help messages.\nThis can also be helpful for arguments with very long flag names, or many/long value names.",6,null],[11,"display_order","","Allows custom ordering of args within the help message. Args with a lower value will be\ndisplayed first in the help message. This is helpful when one would like to emphasise\nfrequently used args, or prioritize those towards the top of the list. Duplicate values\n**are** allowed. Args with duplicate display orders will be displayed in alphabetical\norder.",6,null],[11,"is_set","","Checks if one of the [`ArgSettings`] settings is set for the argument\n[`ArgSettings`]: ./enum.ArgSettings.html",6,null],[11,"set","","Sets one of the [`ArgSettings`] settings for the argument\n[`ArgSettings`]: ./enum.ArgSettings.html",6,null],[11,"unset","","Unsets one of the [`ArgSettings`] settings for the argument\n[`ArgSettings`]: ./enum.ArgSettings.html",6,null],[11,"from","","",6,{"inputs":[{"name":"arg"}],"output":{"name":"self"}}],[11,"clone","","",6,null],[11,"fmt","","",7,null],[11,"clone","","",7,null],[11,"default","","",7,{"inputs":[],"output":{"name":"self"}}],[11,"value_of","","Gets the value of a specific [option] or [positional] argument (i.e. an argument that takes\nan additional value at runtime). If the option wasn&#39;t present at runtime\nit returns `None`.",7,null],[11,"value_of_lossy","","Gets the lossy value of a specific argument. If the argument wasn&#39;t present at runtime\nit returns `None`. A lossy value is one which contains invalid UTF-8 code points, those\ninvalid points will be replaced with `\\u{FFFD}`",7,null],[11,"value_of_os","","Gets the OS version of a string value of a specific argument. If the option wasn&#39;t present\nat runtime it returns `None`. An OS value on Unix-like systems is any series of bytes,\nregardless of whether or not they contain valid UTF-8 code points. Since [`String`]s in\nRust are guaranteed to be valid UTF-8, a valid filename on a Unix system as an argument\nvalue may contain invalid UTF-8 code points.",7,null],[11,"values_of","","Gets a [`Values`] struct which implements [`Iterator`] for values of a specific argument\n(i.e. an argument that takes multiple values at runtime). If the option wasn&#39;t present at\nruntime it returns `None`",7,null],[11,"values_of_lossy","","Gets the lossy values of a specific argument. If the option wasn&#39;t present at runtime\nit returns `None`. A lossy value is one where if it contains invalid UTF-8 code points,\nthose invalid points will be replaced with `\\u{FFFD}`",7,null],[11,"values_of_os","","Gets a [`OsValues`] struct which is implements [`Iterator`] for [`OsString`] values of a\nspecific argument. If the option wasn&#39;t present at runtime it returns `None`. An OS value\non Unix-like systems is any series of bytes, regardless of whether or not they contain\nvalid UTF-8 code points. Since [`String`]s in Rust are guaranteed to be valid UTF-8, a valid\nfilename as an argument value on Linux (for example) may contain invalid UTF-8 code points.",7,null],[11,"is_present","","Returns `true` if an argument was present at runtime, otherwise `false`.",7,null],[11,"occurrences_of","","Returns the number of times an argument was used at runtime. If an argument isn&#39;t present\nit will return `0`.",7,null],[11,"subcommand_matches","","Because [`Subcommand`]s are essentially &quot;sub-[`App`]s&quot; they have their own [`ArgMatches`]\nas well. This method returns the [`ArgMatches`] for a particular subcommand or `None` if\nthe subcommand wasn&#39;t present at runtime.",7,null],[11,"subcommand_name","","Because [`Subcommand`]s are essentially &quot;sub-[`App`]s&quot; they have their own [`ArgMatches`]\nas well.But simply getting the sub-[`ArgMatches`] doesn&#39;t help much if we don&#39;t also know\nwhich subcommand was actually used. This method returns the name of the subcommand that was\nused at runtime, or `None` if one wasn&#39;t.",7,null],[11,"subcommand","","This brings together [`ArgMatches::subcommand_matches`] and [`ArgMatches::subcommand_name`]\nby returning a tuple with both pieces of information.",7,null],[11,"usage","","Returns a string slice of the usage statement for the [`App`] or [`SubCommand`]",7,null],[11,"clone","","",8,null],[11,"next","","",8,null],[11,"size_hint","","",8,null],[11,"next_back","","",8,null],[11,"clone","","",9,null],[11,"next","","",9,null],[11,"size_hint","","",9,null],[11,"next_back","","",9,null],[11,"fmt","","",10,null],[11,"clone","","",10,null],[11,"with_name","","Creates a new instance of a subcommand requiring a name. The name will be displayed\nto the user when they print version or help and usage information.",10,{"inputs":[{"name":"str"}],"output":{"name":"app"}}],[11,"default","","",11,{"inputs":[],"output":{"name":"arggroup"}}],[11,"with_name","","Creates a new instance of `ArgGroup` using a unique string name. The name will be used to\nget values from the group or refer to the group inside of conflict and requirement rules.",11,{"inputs":[{"name":"str"}],"output":{"name":"self"}}],[11,"arg","","Adds an [argument] to this group by name",11,null],[11,"args","","Adds multiple [arguments] to this group by name",11,null],[11,"multiple","","Allows more than one of the [&#39;Arg&#39;]s in this group to be used. (Default: `false`)",11,null],[11,"required","","Sets the group as required or not. A required group will be displayed in the usage string\nof the application in the format `&lt;arg|arg2|arg3&gt;`. A required `ArgGroup` simply states\nthat one argument from this group *must* be present at runtime (unless\nconflicting with another argument).",11,null],[11,"requires","","Sets the requirement rules of this group. This is not to be confused with a\n[required group]. Requirement rules function just like [argument requirement rules], you\ncan name other arguments or groups that must be present when any one of the arguments from\nthis group is used.",11,null],[11,"requires_all","","Sets the requirement rules of this group. This is not to be confused with a\n[required group]. Requirement rules function just like [argument requirement rules], you\ncan name other arguments or groups that must be present when one of the arguments from this\ngroup is used.",11,null],[11,"conflicts_with","","Sets the exclusion rules of this group. Exclusion (aka conflict) rules function just like\n[argument exclusion rules], you can name other arguments or groups that must *not* be\npresent when one of the arguments from this group are used.",11,null],[11,"conflicts_with_all","","Sets the exclusion rules of this group. Exclusion rules function just like\n[argument exclusion rules], you can name other arguments or groups that must *not* be\npresent when one of the arguments from this group are used.",11,null],[11,"fmt","","",11,null],[11,"from","","",11,{"inputs":[{"name":"arggroup"}],"output":{"name":"self"}}],[11,"clone","","",11,null],[11,"fmt","","",1,null],[11,"eq","","",1,null],[11,"clone","","",1,null],[11,"from_str","","",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",3,null],[11,"clone","","",3,null],[11,"eq","","",3,null],[11,"fmt","","",0,null],[11,"use_stderr","","Should the message be written to `stdout` or not",0,null],[11,"exit","","Prints the error to `stderr` and exits with a status of `1`",0,null],[11,"description","","",0,null],[11,"fmt","","",0,null],[11,"from","","",0,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"fmt","","",4,null],[11,"clone","","",4,null],[6,"Result","","Short hand for [`Result`] type\n[`Result`]: https://doc.rust-lang.org/std/result/enum.Result.html",null,null],[14,"value_t","","Convenience macro getting a typed value `T` where `T` implements [`std::str::FromStr`] from an\nargument value. This macro returns a `Result&lt;T,String&gt;` which allows you as the developer to\ndecide what you&#39;d like to do on a failed parse. There are two types of errors, parse failures\nand those where the argument wasn&#39;t present (such as a non-required argument). You can use\nit to get a single value, or a iterator as with the [`ArgMatches::values_of`]",null,null],[14,"value_t_or_exit","","Convenience macro getting a typed value `T` where `T` implements [`std::str::FromStr`] or\nexiting upon error, instead of returning a [`Result`] type.",null,null],[14,"values_t","","Convenience macro getting a typed value [`Vec&lt;T&gt;`] where `T` implements [`std::str::FromStr`]\nThis macro returns a [`clap::Result&lt;Vec&lt;T&gt;&gt;`] which allows you as the developer to decide\nwhat you&#39;d like to do on a failed parse.",null,null],[14,"values_t_or_exit","","Convenience macro getting a typed value [`Vec&lt;T&gt;`] where `T` implements [`std::str::FromStr`]\nor exiting upon error.",null,null],[14,"_clap_count_exprs","","Counts the number of comma-delimited expressions passed to it.  The result is a compile-time\nevaluable expression, suitable for use as a static array size, or the value of a `const`.",null,null],[14,"arg_enum","","Convenience macro to generate more complete enums with variants to be used as a type when\nparsing arguments. This enum also provides a `variants()` function which can be used to\nretrieve a `Vec&lt;&amp;&#39;static str&gt;` of the variant names, as well as implementing [`FromStr`] and\n[`Display`] automatically.",null,null],[14,"crate_version","","Allows you to pull the version from your Cargo.toml at compile time as\nMAJOR.MINOR.PATCH_PKGVERSION_PRE",null,null],[14,"crate_authors","","Allows you to pull the authors for the app from your Cargo.toml at\ncompile time as\n&quot;author1 lastname. &lt;author1@example.com&gt;&quot;,\n    &quot;author2 lastname. &lt;author2@example.com&gt;&quot;",null,null]],"paths":[[3,"Error"],[4,"ArgSettings"],[4,"AppSettings"],[4,"ErrorKind"],[4,"Shell"],[3,"App"],[3,"Arg"],[3,"ArgMatches"],[3,"Values"],[3,"OsValues"],[3,"SubCommand"],[3,"ArgGroup"]]};
searchIndex["tempdir"] = {"doc":"Temporary directories of files.","items":[[3,"TempDir","tempdir","A directory in the filesystem that is automatically deleted when\nit goes out of scope.",null,null],[11,"new","","Attempts to make a temporary directory inside of `env::temp_dir()` whose\nname will have the prefix, `prefix`. The directory and\neverything inside it will be automatically deleted once the\nreturned `TempDir` is destroyed.",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"new_in","","Attempts to make a temporary directory inside of `tmpdir`\nwhose name will have the prefix `prefix`. The directory and\neverything inside it will be automatically deleted once the\nreturned `TempDir` is destroyed.",0,{"inputs":[{"name":"p"},{"name":"str"}],"output":{"name":"result"}}],[11,"path","","Accesses the [`Path`] to the temporary directory.",0,null],[11,"into_path","","Unwraps the [`Path`] contained in the `TempDir` and\nreturns it. This destroys the `TempDir` without deleting the\ndirectory represented by the returned `Path`.",0,null],[11,"close","","Closes and removes the temporary directory, returing a `Result`.",0,null],[11,"as_ref","","",0,null],[11,"fmt","","",0,null],[11,"drop","","",0,null]],"paths":[[3,"TempDir"]]};
searchIndex["regex"] = {"doc":"This crate provides a native implementation of regular expressions that is\nheavily based on RE2 both in syntax and in implementation. Notably,\nbackreferences and arbitrary lookahead/lookbehind assertions are not\nprovided. In return, regular expression searching provided by this package\nhas excellent worst-case performance. The specific syntax supported is\ndocumented further down.","items":[[3,"RegexBuilder","regex","A configurable builder for a regular expression.",null,null],[3,"RegexSet","","Match multiple (possibly overlapping) regular expressions in a single scan.",null,null],[3,"SetMatches","","A set of matches returned by a regex set.",null,null],[3,"SetMatchesIntoIter","","An owned iterator over the set of matches from a regex set.",null,null],[3,"SetMatchesIter","","A borrowed iterator over the set of matches from a regex set.",null,null],[3,"Regex","","A compiled regular expression for matching Unicode strings.",null,null],[3,"Captures","","Captures represents a group of captured strings for a single match.",null,null],[3,"SubCaptures","","An iterator over capture groups for a particular match of a regular\nexpression.",null,null],[3,"SubCapturesPos","","An iterator over capture group positions for a particular match of a\nregular expression.",null,null],[3,"SubCapturesNamed","","An Iterator over named capture groups as a tuple with the group\nname and the value.",null,null],[3,"CaptureNames","","An iterator over the names of all possible captures.",null,null],[3,"FindCaptures","","An iterator that yields all non-overlapping capture groups matching a\nparticular regular expression.",null,null],[3,"FindMatches","","An iterator over all non-overlapping matches for a particular string.",null,null],[3,"NoExpand","","NoExpand indicates literal string replacement.",null,null],[12,"0","","",0,null],[3,"RegexSplits","","Yields all substrings delimited by a regular expression match.",null,null],[3,"RegexSplitsN","","Yields at most `N` substrings delimited by a regular expression match.",null,null],[4,"Error","","An error that occurred during parsing or compiling a regular expression.",null,null],[13,"Syntax","","A syntax error.",1,null],[13,"CompiledTooBig","","The compiled program exceeded the set size limit.\nThe argument is the size limit imposed.",1,null],[13,"InvalidSet","","**DEPRECATED:** Will be removed on next major version bump.",1,null],[5,"quote","","Escapes all regular expression meta characters in `text`.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[5,"is_match","","Tests if the given regular expression matches somewhere in the text given.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[0,"bytes","","Match regular expressions on arbitrary bytes.",null,null],[3,"RegexBuilder","regex::bytes","A configurable builder for a regular expression.",null,null],[3,"RegexSet","","Match multiple (possibly overlapping) regular expressions in a single scan.",null,null],[3,"SetMatches","","A set of matches returned by a regex set.",null,null],[3,"SetMatchesIntoIter","","An owned iterator over the set of matches from a regex set.",null,null],[3,"SetMatchesIter","","A borrowed iterator over the set of matches from a regex set.",null,null],[3,"Regex","","A compiled regular expression for matching arbitrary bytes.",null,null],[3,"FindMatches","","An iterator over all non-overlapping matches for a particular string.",null,null],[3,"FindCaptures","","An iterator that yields all non-overlapping capture groups matching a\nparticular regular expression.",null,null],[3,"Splits","","Yields all substrings delimited by a regular expression match.",null,null],[3,"SplitsN","","Yields at most `N` substrings delimited by a regular expression match.",null,null],[3,"CaptureNames","","An iterator over the names of all possible captures.",null,null],[3,"Captures","","Captures represents a group of captured byte strings for a single match.",null,null],[3,"SubCaptures","","An iterator over capture groups for a particular match of a regular\nexpression.",null,null],[3,"SubCapturesPos","","An iterator over capture group positions for a particular match of a\nregular expression.",null,null],[3,"SubCapturesNamed","","An Iterator over named capture groups as a tuple with the group name and\nthe value.",null,null],[3,"NoExpand","","NoExpand indicates literal byte string replacement.",null,null],[12,"0","","",2,null],[8,"Replacer","","Replacer describes types that can be used to replace matches in a byte\nstring.",null,null],[10,"replace_append","","Appends text to `dst` to replace the current match.",3,null],[11,"no_expansion","","Return a fixed unchanging replacement byte string.",3,null],[11,"fmt","regex","",1,null],[11,"description","","",1,null],[11,"cause","","",1,null],[11,"fmt","","",1,null],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"new","regex::bytes","Create a new regular expression builder with the given pattern.",4,{"inputs":[{"name":"str"}],"output":{"name":"regexbuilder"}}],[11,"compile","","Consume the builder and compile the regular expression.",4,null],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",4,null],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",4,null],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches\nanything when `s` is set and matches anything except for new line when\nit is not set (the default).",4,null],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",4,null],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",4,null],[11,"unicode","","Set the value for the Unicode (`u`) flag.",4,null],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",4,null],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",4,null],[11,"new","regex","Create a new regular expression builder with the given pattern.",5,{"inputs":[{"name":"str"}],"output":{"name":"regexbuilder"}}],[11,"compile","","Consume the builder and compile the regular expression.",5,null],[11,"case_insensitive","","Set the value for the case insensitive (`i`) flag.",5,null],[11,"multi_line","","Set the value for the multi-line matching (`m`) flag.",5,null],[11,"dot_matches_new_line","","Set the value for the any character (`s`) flag, where in `.` matches\nanything when `s` is set and matches anything except for new line when\nit is not set (the default).",5,null],[11,"swap_greed","","Set the value for the greedy swap (`U`) flag.",5,null],[11,"ignore_whitespace","","Set the value for the ignore whitespace (`x`) flag.",5,null],[11,"unicode","","Set the value for the Unicode (`u`) flag.",5,null],[11,"size_limit","","Set the approximate size limit of the compiled regular expression.",5,null],[11,"dfa_size_limit","","Set the approximate size of the cache used by the DFA.",5,null],[11,"no_expansion","regex::bytes","Return a fixed unchanging replacement byte string.",3,null],[11,"clone","","",6,null],[11,"fmt","","Shows the original regular expression.",6,null],[11,"fmt","","Shows the original regular expression.",6,null],[11,"from_str","","Attempts to parse a string into a regular expression",6,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Compiles a regular expression. Once compiled, it can be used repeatedly\nto search, split or replace text in a string.",6,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"with_size_limit","","Compiles a regular expression with the given size limit.",6,{"inputs":[{"name":"usize"},{"name":"str"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if the regex matches the string given.",6,null],[11,"find","","Returns the start and end byte range of the leftmost-first match in\n`text`. If no match exists, then `None` is returned.",6,null],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in\n`text`, returning the start and end byte indices with respect to\n`text`.",6,null],[11,"captures","","Returns the capture groups corresponding to the leftmost-first\nmatch in `text`. Capture group `0` always corresponds to the entire\nmatch. If no match is found, then `None` is returned.",6,null],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched\nin `text`. This is operationally the same as `find_iter`, except it\nyields information about submatches.",6,null],[11,"split","","Returns an iterator of substrings of `text` delimited by a match of the\nregular expression. Namely, each element of the iterator corresponds to\ntext that *isn&#39;t* matched by the regular expression.",6,null],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited\nby a match of the regular expression. (A `limit` of `0` will return no\nsubstrings.) Namely, each element of the iterator corresponds to text\nthat *isn&#39;t* matched by the regular expression. The remainder of the\nstring that is not split will be the last element in the iterator.",6,null],[11,"replace","","Replaces the leftmost-first match with the replacement provided. The\nreplacement can be a regular byte string (where `$N` and `$name` are\nexpanded to match capture groups) or a function that takes the matches&#39;\n`Captures` and returns the replaced byte string.",6,null],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the replacement\nprovided. This is the same as calling `replacen` with `limit` set to\n`0`.",6,null],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the\nreplacement provided. If `limit` is 0, then all non-overlapping matches\nare replaced.",6,null],[11,"shortest_match","","Returns the end location of a match in the text given.",6,null],[11,"as_str","","Returns the original string of this regex.",6,null],[11,"capture_names","","Returns an iterator over the capture names.",6,null],[11,"captures_len","","Returns the number of captures.",6,null],[11,"next","","",7,null],[11,"next","","",8,null],[11,"next","","",9,null],[11,"next","","",10,null],[11,"next","","",11,null],[11,"size_hint","","",11,null],[11,"pos","","Returns the start and end positions of the Nth capture group. Returns\n`None` if `i` is not a valid capture group or if the capture group did\nnot match anything. The positions returned are *always* byte indices\nwith respect to the original byte string matched.",12,null],[11,"at","","Returns the matched string for the capture group `i`.  If `i` isn&#39;t\na valid capture group or didn&#39;t match anything, then `None` is\nreturned.",12,null],[11,"name","","Returns the matched string for the capture group named `name`.  If\n`name` isn&#39;t a valid capture group or didn&#39;t match anything, then\n`None` is returned.",12,null],[11,"iter","","Creates an iterator of all the capture groups in order of appearance\nin the regular expression.",12,null],[11,"iter_pos","","Creates an iterator of all the capture group positions in order of\nappearance in the regular expression. Positions are byte indices\nin terms of the original string matched.",12,null],[11,"iter_named","","Creates an iterator of all named groups as an tuple with the group\nname and the value. The iterator returns these values in arbitrary\norder.",12,null],[11,"expand","","Expands all instances of `$name` in `text` to the corresponding capture\ngroup `name`, and writes them to the `dst` buffer given.",12,null],[11,"len","","Returns the number of captured groups.",12,null],[11,"is_empty","","Returns true if and only if there are no captured groups.",12,null],[11,"fmt","","",12,null],[11,"index","","",12,null],[11,"index","","",12,null],[11,"next","","",13,null],[11,"next","","",14,null],[11,"next","","",15,null],[11,"replace_append","","",2,null],[11,"no_expansion","","",2,null],[11,"clone","regex","",16,null],[11,"new","","Create a new regex set with the given regular expressions.",16,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if one of the regexes in this set matches\nthe text given.",16,null],[11,"matches","","Returns the set of regular expressions that match in the given text.",16,null],[11,"len","","Returns the total number of regular expressions in this set.",16,null],[11,"clone","","",17,null],[11,"fmt","","",17,null],[11,"matched_any","","Whether this set contains any matches.",17,null],[11,"matched","","Whether the regex at the given index matched.",17,null],[11,"len","","The total number of regexes in the set that created these matches.",17,null],[11,"iter","","Returns an iterator over indexes in the regex that matched.",17,null],[11,"into_iter","","",17,null],[11,"next","","",18,null],[11,"next_back","","",18,null],[11,"clone","","",19,null],[11,"next","","",19,null],[11,"next_back","","",19,null],[11,"fmt","","",16,null],[11,"clone","regex::bytes","",20,null],[11,"new","","Create a new regex set with the given regular expressions.",20,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if one of the regexes in this set matches\nthe text given.",20,null],[11,"matches","","Returns the set of regular expressions that match in the given text.",20,null],[11,"len","","Returns the total number of regular expressions in this set.",20,null],[11,"clone","","",21,null],[11,"fmt","","",21,null],[11,"matched_any","","Whether this set contains any matches.",21,null],[11,"matched","","Whether the regex at the given index matched.",21,null],[11,"len","","The total number of regexes in the set that created these matches.",21,null],[11,"iter","","Returns an iterator over indexes in the regex that matched.",21,null],[11,"into_iter","","",21,null],[11,"next","","",22,null],[11,"next_back","","",22,null],[11,"clone","","",23,null],[11,"next","","",23,null],[11,"next_back","","",23,null],[11,"fmt","","",20,null],[11,"clone","regex","",24,null],[11,"fmt","","Shows the original regular expression.",24,null],[11,"fmt","","Shows the original regular expression.",24,null],[11,"eq","","",24,null],[11,"from_str","","Attempts to parse a string into a regular expression",24,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Compiles a regular expression. Once compiled, it can be used repeatedly\nto search, split or replace text in a string.",24,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"with_size_limit","","Compiles a regular expression with the given size limit.",24,{"inputs":[{"name":"usize"},{"name":"str"}],"output":{"name":"result"}}],[11,"is_match","","Returns true if and only if the regex matches the string given.",24,null],[11,"find","","Returns the start and end byte range of the leftmost-first match in\n`text`. If no match exists, then `None` is returned.",24,null],[11,"find_iter","","Returns an iterator for each successive non-overlapping match in\n`text`, returning the start and end byte indices with respect to\n`text`.",24,null],[11,"captures","","Returns the capture groups corresponding to the leftmost-first\nmatch in `text`. Capture group `0` always corresponds to the entire\nmatch. If no match is found, then `None` is returned.",24,null],[11,"captures_iter","","Returns an iterator over all the non-overlapping capture groups matched\nin `text`. This is operationally the same as `find_iter`, except it\nyields information about submatches.",24,null],[11,"split","","Returns an iterator of substrings of `text` delimited by a match of the\nregular expression. Namely, each element of the iterator corresponds to\ntext that *isn&#39;t* matched by the regular expression.",24,null],[11,"splitn","","Returns an iterator of at most `limit` substrings of `text` delimited\nby a match of the regular expression. (A `limit` of `0` will return no\nsubstrings.) Namely, each element of the iterator corresponds to text\nthat *isn&#39;t* matched by the regular expression. The remainder of the\nstring that is not split will be the last element in the iterator.",24,null],[11,"replace","","Replaces the leftmost-first match with the replacement provided.\nThe replacement can be a regular string (where `$N` and `$name` are\nexpanded to match capture groups) or a function that takes the matches&#39;\n`Captures` and returns the replaced string.",24,null],[11,"replace_all","","Replaces all non-overlapping matches in `text` with the replacement\nprovided. This is the same as calling `replacen` with `limit` set to\n`0`.",24,null],[11,"replacen","","Replaces at most `limit` non-overlapping matches in `text` with the\nreplacement provided. If `limit` is 0, then all non-overlapping matches\nare replaced.",24,null],[11,"shortest_match","","Returns the end location of a match in the text given.",24,null],[11,"as_str","","Returns the original string of this regex.",24,null],[11,"capture_names","","Returns an iterator over the capture names.",24,null],[11,"captures_len","","Returns the number of captures.",24,null],[11,"next","","",25,null],[11,"size_hint","","",25,null],[11,"reg_replace","","",0,null],[11,"no_expand","","",0,null],[11,"next","","",26,null],[11,"next","","",27,null],[11,"pos","","Returns the start and end positions of the Nth capture group. Returns\n`None` if `i` is not a valid capture group or if the capture group did\nnot match anything. The positions returned are *always* byte indices\nwith respect to the original string matched.",28,null],[11,"at","","Returns the matched string for the capture group `i`.  If `i` isn&#39;t\na valid capture group or didn&#39;t match anything, then `None` is\nreturned.",28,null],[11,"name","","Returns the matched string for the capture group named `name`.  If\n`name` isn&#39;t a valid capture group or didn&#39;t match anything, then\n`None` is returned.",28,null],[11,"iter","","Creates an iterator of all the capture groups in order of appearance\nin the regular expression.",28,null],[11,"iter_pos","","Creates an iterator of all the capture group positions in order of\nappearance in the regular expression. Positions are byte indices\nin terms of the original string matched.",28,null],[11,"iter_named","","Creates an iterator of all named groups as an tuple with the group\nname and the value. The iterator returns these values in arbitrary\norder.",28,null],[11,"expand","","Expands all instances of `$name` in `text` to the corresponding capture\ngroup `name`.",28,null],[11,"len","","Returns the number of captured groups.",28,null],[11,"is_empty","","Returns true if and only if there are no captured groups.",28,null],[11,"fmt","","",28,null],[11,"index","","",28,null],[11,"index","","",28,null],[11,"next","","",29,null],[11,"next","","",30,null],[11,"next","","",31,null],[11,"next","","",32,null],[11,"next","","",33,null],[8,"Replacer","","Replacer describes types that can be used to replace matches in a string.",null,null],[10,"reg_replace","","Returns a possibly owned string that is used to replace the match\ncorresponding to the `caps` capture group.",34,null],[11,"no_expand","","Returns a possibly owned string that never needs expansion.",34,null],[11,"no_expand","","Returns a possibly owned string that never needs expansion.",34,null]],"paths":[[3,"NoExpand"],[4,"Error"],[3,"NoExpand"],[8,"Replacer"],[3,"RegexBuilder"],[3,"RegexBuilder"],[3,"Regex"],[3,"FindMatches"],[3,"FindCaptures"],[3,"Splits"],[3,"SplitsN"],[3,"CaptureNames"],[3,"Captures"],[3,"SubCaptures"],[3,"SubCapturesPos"],[3,"SubCapturesNamed"],[3,"RegexSet"],[3,"SetMatches"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[3,"RegexSet"],[3,"SetMatches"],[3,"SetMatchesIntoIter"],[3,"SetMatchesIter"],[3,"Regex"],[3,"CaptureNames"],[3,"RegexSplits"],[3,"RegexSplitsN"],[3,"Captures"],[3,"SubCaptures"],[3,"SubCapturesPos"],[3,"SubCapturesNamed"],[3,"FindCaptures"],[3,"FindMatches"],[8,"Replacer"]]};
searchIndex["rand"] = {"doc":"Utilities for random number generation","items":[[3,"Generator","rand","Iterator which will generate a stream of random items.",null,null],[3,"AsciiGenerator","","Iterator which will continuously generate random ascii characters.",null,null],[3,"XorShiftRng","","An Xorshift[1] random number\ngenerator.",null,null],[3,"Open01","","A wrapper for generating floating point numbers uniformly in the\nopen interval `(0,1)` (not including either endpoint).",null,null],[12,"0","","",0,null],[3,"Closed01","","A wrapper for generating floating point numbers uniformly in the\nclosed interval `[0,1]` (including both endpoints).",null,null],[12,"0","","",1,null],[3,"StdRng","","The standard RNG. This is designed to be efficient on the current\nplatform.",null,null],[3,"ThreadRng","","The thread-local RNG.",null,null],[5,"weak_rng","","Create a weak random number generator with a default algorithm and seed.",null,{"inputs":[],"output":{"name":"xorshiftrng"}}],[5,"thread_rng","","Retrieve the lazily-initialized thread-local random number\ngenerator, seeded by the system. Intended to be used in method\nchaining style, e.g. `thread_rng().gen::&lt;i32&gt;()`.",null,{"inputs":[],"output":{"name":"threadrng"}}],[5,"random","","Generates a random value using the thread-local random number generator.",null,{"inputs":[],"output":{"name":"t"}}],[5,"sample","","Randomly sample up to `amount` elements from an iterator.",null,{"inputs":[{"name":"r"},{"name":"i"},{"name":"usize"}],"output":{"name":"vec"}}],[0,"distributions","","Sampling from random distributions.",null,null],[3,"RandSample","rand::distributions","A wrapper for generating types that implement `Rand` via the\n`Sample` &amp; `IndependentSample` traits.",null,null],[3,"Weighted","","A value with a particular weight for use with `WeightedChoice`.",null,null],[12,"weight","","The numerical weight of this item",2,null],[12,"item","","The actual item which is being weighted",2,null],[3,"WeightedChoice","","A distribution that selects from a finite collection of weighted items.",null,null],[0,"range","","Generating numbers between two others.",null,null],[3,"Range","rand::distributions::range","Sample values uniformly between two bounds.",null,null],[8,"SampleRange","","The helper trait for types that have a sensible way to sample\nuniformly between two values. This should not be used directly,\nand is only to facilitate `Range`.",null,null],[10,"construct_range","","Construct the `Range` object that `sample_range`\nrequires. This should not ever be called directly, only via\n`Range::new`, which will check that `low &lt; high`, so this\nfunction doesn&#39;t have to repeat the check.",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"range"}}],[10,"sample_range","","Sample a value from the given `Range` with the given `Rng` as\na source of randomness.",3,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"self"}}],[11,"clone","","",4,null],[11,"new","","Create a new `Range` instance that samples uniformly from\n`[low, high)`. Panics if `low &gt;= high`.",4,{"inputs":[{"name":"x"},{"name":"x"}],"output":{"name":"range"}}],[11,"sample","","",4,null],[11,"ind_sample","","",4,null],[0,"gamma","rand::distributions","The Gamma and derived distributions.",null,null],[3,"Gamma","rand::distributions::gamma","The Gamma distribution `Gamma(shape, scale)` distribution.",null,null],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of\nfreedom.",null,null],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",null,null],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of\nfreedom.",null,null],[11,"clone","","",5,null],[11,"new","","Construct an object representing the `Gamma(shape, scale)`\ndistribution.",5,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"gamma"}}],[11,"sample","","",5,null],[11,"ind_sample","","",5,null],[11,"clone","","",6,null],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom\n`k`. Panics if `k &lt; 0`.",6,{"inputs":[{"name":"f64"}],"output":{"name":"chisquared"}}],[11,"sample","","",6,null],[11,"ind_sample","","",6,null],[11,"clone","","",7,null],[11,"new","","Create a new `FisherF` distribution, with the given\nparameter. Panics if either `m` or `n` are not positive.",7,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"fisherf"}}],[11,"sample","","",7,null],[11,"ind_sample","","",7,null],[11,"clone","","",8,null],[11,"new","","Create a new Student t distribution with `n` degrees of\nfreedom. Panics if `n &lt;= 0`.",8,{"inputs":[{"name":"f64"}],"output":{"name":"studentt"}}],[11,"sample","","",8,null],[11,"ind_sample","","",8,null],[0,"normal","rand::distributions","The normal and derived distributions.",null,null],[3,"StandardNormal","rand::distributions::normal","A wrapper around an `f64` to generate N(0, 1) random numbers\n(a.k.a.  a standard normal, or Gaussian).",null,null],[12,"0","","",9,null],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",null,null],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",null,null],[11,"clone","","",9,null],[11,"rand","","",9,{"inputs":[{"name":"r"}],"output":{"name":"standardnormal"}}],[11,"clone","","",10,null],[11,"new","","Construct a new `Normal` distribution with the given mean and\nstandard deviation.",10,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"normal"}}],[11,"sample","","",10,null],[11,"ind_sample","","",10,null],[11,"clone","","",11,null],[11,"new","","Construct a new `LogNormal` distribution with the given mean\nand standard deviation.",11,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"lognormal"}}],[11,"sample","","",11,null],[11,"ind_sample","","",11,null],[0,"exponential","rand::distributions","The exponential distribution.",null,null],[3,"Exp1","rand::distributions::exponential","A wrapper around an `f64` to generate Exp(1) random numbers.",null,null],[12,"0","","",12,null],[3,"Exp","","The exponential distribution `Exp(lambda)`.",null,null],[11,"clone","","",12,null],[11,"rand","","",12,{"inputs":[{"name":"r"}],"output":{"name":"exp1"}}],[11,"clone","","",13,null],[11,"new","","Construct a new `Exp` with the given shape parameter\n`lambda`. Panics if `lambda &lt;= 0`.",13,{"inputs":[{"name":"f64"}],"output":{"name":"exp"}}],[11,"sample","","",13,null],[11,"ind_sample","","",13,null],[8,"Sample","rand::distributions","Types that can be used to create a random instance of `Support`.",null,null],[10,"sample","","Generate a random value of `Support`, using `rng` as the\nsource of randomness.",14,null],[8,"IndependentSample","","`Sample`s that do not require keeping track of state.",null,null],[10,"ind_sample","","Generate a random value.",15,null],[11,"clone","","",16,null],[11,"sample","","",16,null],[11,"ind_sample","","",16,null],[11,"new","","",16,{"inputs":[],"output":{"name":"randsample"}}],[11,"clone","","",2,null],[11,"new","","Create a new `WeightedChoice`.",17,null],[11,"sample","","",17,null],[11,"ind_sample","","",17,null],[0,"isaac","rand","The ISAAC random number generator.",null,null],[3,"IsaacRng","rand::isaac","A random number generator that uses the ISAAC algorithm[1].",null,null],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit\nvariant of the ISAAC algorithm.",null,null],[11,"new_unseeded","","Create an ISAAC random number generator using the default\nfixed seed.",18,{"inputs":[],"output":{"name":"isaacrng"}}],[11,"clone","","",18,null],[11,"next_u32","","",18,null],[11,"reseed","","",18,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",18,null],[11,"rand","","",18,{"inputs":[{"name":"r"}],"output":{"name":"isaacrng"}}],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the\ndefault fixed seed.",19,{"inputs":[],"output":{"name":"isaac64rng"}}],[11,"clone","","",19,null],[11,"next_u32","","",19,null],[11,"next_u64","","",19,null],[11,"reseed","","",19,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",19,null],[11,"rand","","",19,{"inputs":[{"name":"r"}],"output":{"name":"isaac64rng"}}],[0,"chacha","rand","The ChaCha random number generator.",null,null],[3,"ChaChaRng","rand::chacha","A random number generator that uses the ChaCha20 algorithm [1].",null,null],[11,"clone","","",20,null],[11,"new_unseeded","","Create an ChaCha random number generator using the default\nfixed key of 8 zero words.",20,{"inputs":[],"output":{"name":"chacharng"}}],[11,"set_counter","","Sets the internal 128-bit ChaCha counter to\na user-provided value. This permits jumping\narbitrarily ahead (or backwards) in the pseudorandom stream.",20,null],[11,"next_u32","","",20,null],[11,"reseed","","",20,null],[11,"from_seed","","Create a ChaCha generator from a seed,\nobtained from a variable-length u32 array.\nOnly up to 8 words are used; if less than 8\nwords are used, the remaining are set to zero.",20,null],[11,"rand","","",20,{"inputs":[{"name":"r"}],"output":{"name":"chacharng"}}],[0,"reseeding","rand","A wrapper around another RNG that reseeds it after it\ngenerates a certain number of random bytes.",null,null],[3,"ReseedingRng","rand::reseeding","A wrapper around any RNG which reseeds the underlying RNG after it\nhas generated a certain number of random bytes.",null,null],[12,"reseeder","","Controls the behaviour when reseeding the RNG.",21,null],[3,"ReseedWithDefault","","Reseed an RNG using a `Default` instance. This reseeds by\nreplacing the RNG with the result of a `Default::default` call.",null,null],[8,"Reseeder","","Something that can be used to reseed an RNG via `ReseedingRng`.",null,null],[10,"reseed","","Reseed the given RNG.",22,null],[11,"new","","Create a new `ReseedingRng` with the given parameters.",21,{"inputs":[{"name":"r"},{"name":"u64"},{"name":"rsdr"}],"output":{"name":"reseedingrng"}}],[11,"reseed_if_necessary","","Reseed the internal RNG if the number of bytes that have been\ngenerated exceed the threshold.",21,null],[11,"next_u32","","",21,null],[11,"next_u64","","",21,null],[11,"fill_bytes","","",21,null],[11,"reseed","","",21,null],[11,"from_seed","","Create a new `ReseedingRng` from the given reseeder and\nseed. This uses a default value for `generation_threshold`.",21,null],[11,"clone","","",23,null],[11,"reseed","","",23,null],[11,"default","","",23,{"inputs":[],"output":{"name":"reseedwithdefault"}}],[11,"rand","rand","",0,{"inputs":[{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",1,{"inputs":[{"name":"r"}],"output":{"name":"closed01"}}],[11,"rand","","",0,{"inputs":[{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",1,{"inputs":[{"name":"r"}],"output":{"name":"closed01"}}],[0,"os","","Interfaces to the operating system provided random number\ngenerators.",null,null],[3,"OsRng","rand::os","A random number generator that retrieves randomness straight from\nthe operating system. Platform sources:",null,null],[11,"new","","Create a new `OsRng`.",24,{"inputs":[],"output":{"name":"result"}}],[11,"next_u32","","",24,null],[11,"next_u64","","",24,null],[11,"fill_bytes","","",24,null],[0,"read","rand","A wrapper around any Read to treat it as an RNG.",null,null],[3,"ReadRng","rand::read","An RNG that reads random bytes straight from a `Read`. This will\nwork best with an infinite reader, but this is not required.",null,null],[11,"new","","Create a new `ReadRng` from a `Read`.",25,{"inputs":[{"name":"r"}],"output":{"name":"readrng"}}],[11,"next_u32","","",25,null],[11,"next_u64","","",25,null],[11,"fill_bytes","","",25,null],[8,"Rand","rand","A type that can be randomly generated using an `Rng`.",null,null],[10,"rand","","Generates a random instance of this type using the specified source of\nrandomness.",26,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[8,"Rng","","A random number generator.",null,null],[10,"next_u32","","Return the next random u32.",27,null],[11,"next_u64","","Return the next random u64.",27,null],[11,"next_f32","","Return the next random f32 selected from the half-open\ninterval `[0, 1)`.",27,null],[11,"next_f64","","Return the next random f64 selected from the half-open\ninterval `[0, 1)`.",27,null],[11,"fill_bytes","","Fill `dest` with random data.",27,null],[11,"gen","","Return a random value of a `Rand` type.",27,null],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly\ngenerated items.",27,null],[11,"gen_range","","Generate a random value in the range [`low`, `high`).",27,null],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",27,null],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",27,null],[11,"choose","","Return a random element from `values`.",27,null],[11,"shuffle","","Shuffle a mutable slice in place.",27,null],[8,"SeedableRng","","A random number generator that can be explicitly seeded to produce\nthe same stream of randomness multiple times.",null,null],[10,"reseed","","Reseed an RNG with the given seed.",28,null],[10,"from_seed","","Create a new RNG with the given seed.",28,{"inputs":[{"name":"seed"}],"output":{"name":"self"}}],[11,"next","","",29,null],[11,"next","","",30,null],[11,"clone","","",31,null],[11,"new_unseeded","","Creates a new XorShiftRng instance which is not seeded.",31,{"inputs":[],"output":{"name":"xorshiftrng"}}],[11,"next_u32","","",31,null],[11,"reseed","","Reseed an XorShiftRng. This will panic if `seed` is entirely 0.",31,null],[11,"from_seed","","Create a new XorShiftRng. This will panic if `seed` is entirely 0.",31,null],[11,"rand","","",31,{"inputs":[{"name":"r"}],"output":{"name":"xorshiftrng"}}],[11,"clone","","",32,null],[11,"new","","Create a randomly seeded instance of `StdRng`.",32,{"inputs":[],"output":{"name":"result"}}],[11,"next_u32","","",32,null],[11,"next_u64","","",32,null],[11,"reseed","","",32,null],[11,"from_seed","","",32,null],[11,"clone","","",33,null],[11,"next_u32","","",33,null],[11,"next_u64","","",33,null],[11,"fill_bytes","","",33,null]],"paths":[[3,"Open01"],[3,"Closed01"],[3,"Weighted"],[8,"SampleRange"],[3,"Range"],[3,"Gamma"],[3,"ChiSquared"],[3,"FisherF"],[3,"StudentT"],[3,"StandardNormal"],[3,"Normal"],[3,"LogNormal"],[3,"Exp1"],[3,"Exp"],[8,"Sample"],[8,"IndependentSample"],[3,"RandSample"],[3,"WeightedChoice"],[3,"IsaacRng"],[3,"Isaac64Rng"],[3,"ChaChaRng"],[3,"ReseedingRng"],[8,"Reseeder"],[3,"ReseedWithDefault"],[3,"OsRng"],[3,"ReadRng"],[8,"Rand"],[8,"Rng"],[8,"SeedableRng"],[3,"Generator"],[3,"AsciiGenerator"],[3,"XorShiftRng"],[3,"StdRng"],[3,"ThreadRng"]]};
searchIndex["error_chain"] = {"doc":"A library for consistent and reliable error handling","items":[[3,"Backtrace","error_chain","Representation of an owned and self-contained backtrace.",null,null],[3,"ErrorChainIter","","",null,null],[12,"0","","",0,null],[5,"make_backtrace","","Returns a backtrace of the current call stack if `RUST_BACKTRACE`\nis set to anything but ``0``, and `None` otherwise.  This is used\nin the generated error implementations.",null,{"inputs":[],"output":{"name":"option"}}],[11,"next","","",0,null],[14,"quick_error","","",null,null],[14,"error_chain","","",null,null],[11,"new","","Captures a backtrace at the callsite of this function, returning an\nowned representation.",1,{"inputs":[],"output":{"name":"backtrace"}}],[11,"frames","","Returns the frames from when this backtrace was captured.",1,null],[11,"clone","","",1,null],[11,"fmt","","",1,null],[11,"default","","",1,{"inputs":[],"output":{"name":"backtrace"}}]],"paths":[[3,"ErrorChainIter"],[3,"Backtrace"]]};
searchIndex["clang_sys"] = {"doc":"Rust bindings for `libclang`.","items":[[3,"CXCodeComplete_Flags","clang_sys","",null,null],[3,"CXCompletionContext","","",null,null],[3,"CXDiagnosticDisplayOptions","","",null,null],[3,"CXGlobalOptFlags","","",null,null],[3,"CXIdxDeclInfoFlags","","",null,null],[3,"CXIndexOptFlags","","",null,null],[3,"CXNameRefFlags","","",null,null],[3,"CXObjCDeclQualifierKind","","",null,null],[3,"CXObjCPropertyAttrKind","","",null,null],[3,"CXReparse_Flags","","",null,null],[3,"CXSaveTranslationUnit_Flags","","",null,null],[3,"CXTranslationUnit_Flags","","",null,null],[3,"CXCompilationDatabase","","",null,null],[12,"0","","",0,null],[3,"CXCompileCommand","","",null,null],[12,"0","","",1,null],[3,"CXCompileCommands","","",null,null],[12,"0","","",2,null],[3,"CXCompletionString","","",null,null],[12,"0","","",3,null],[3,"CXCursorSet","","",null,null],[12,"0","","",4,null],[3,"CXDiagnostic","","",null,null],[12,"0","","",5,null],[3,"CXDiagnosticSet","","",null,null],[12,"0","","",6,null],[3,"CXFile","","",null,null],[12,"0","","",7,null],[3,"CXIdxClientASTFile","","",null,null],[12,"0","","",8,null],[3,"CXIdxClientContainer","","",null,null],[12,"0","","",9,null],[3,"CXIdxClientEntity","","",null,null],[12,"0","","",10,null],[3,"CXIdxClientFile","","",null,null],[12,"0","","",11,null],[3,"CXIndex","","",null,null],[12,"0","","",12,null],[3,"CXIndexAction","","",null,null],[12,"0","","",13,null],[3,"CXModule","","",null,null],[12,"0","","",14,null],[3,"CXRemapping","","",null,null],[12,"0","","",15,null],[3,"CXTranslationUnit","","",null,null],[12,"0","","",16,null],[3,"CXCodeCompleteResults","","",null,null],[12,"Results","","",17,null],[12,"NumResults","","",17,null],[3,"CXComment","","",null,null],[12,"ASTNode","","",18,null],[12,"TranslationUnit","","",18,null],[3,"CXCompletionResult","","",null,null],[12,"CursorKind","","",19,null],[12,"CompletionString","","",19,null],[3,"CXCursor","","",null,null],[12,"kind","","",20,null],[12,"xdata","","",20,null],[12,"data","","",20,null],[3,"CXCursorAndRangeVisitor","","",null,null],[12,"context","","",21,null],[12,"visit","","",21,null],[3,"CXFileUniqueID","","",null,null],[12,"data","","",22,null],[3,"CXIdxAttrInfo","","",null,null],[12,"kind","","",23,null],[12,"cursor","","",23,null],[12,"loc","","",23,null],[3,"CXIdxBaseClassInfo","","",null,null],[12,"base","","",24,null],[12,"cursor","","",24,null],[12,"loc","","",24,null],[3,"CXIdxCXXClassDeclInfo","","",null,null],[12,"declInfo","","",25,null],[12,"bases","","",25,null],[12,"numBases","","",25,null],[3,"CXIdxContainerInfo","","",null,null],[12,"cursor","","",26,null],[3,"CXIdxDeclInfo","","",null,null],[12,"entityInfo","","",27,null],[12,"cursor","","",27,null],[12,"loc","","",27,null],[12,"semanticContainer","","",27,null],[12,"lexicalContainer","","",27,null],[12,"isRedeclaration","","",27,null],[12,"isDefinition","","",27,null],[12,"isContainer","","",27,null],[12,"declAsContainer","","",27,null],[12,"isImplicit","","",27,null],[12,"attributes","","",27,null],[12,"numAttributes","","",27,null],[12,"flags","","",27,null],[3,"CXIdxEntityInfo","","",null,null],[12,"kind","","",28,null],[12,"templateKind","","",28,null],[12,"lang","","",28,null],[12,"name","","",28,null],[12,"USR","","",28,null],[12,"cursor","","",28,null],[12,"attributes","","",28,null],[12,"numAttributes","","",28,null],[3,"CXIdxEntityRefInfo","","",null,null],[12,"kind","","",29,null],[12,"cursor","","",29,null],[12,"loc","","",29,null],[12,"referencedEntity","","",29,null],[12,"parentEntity","","",29,null],[12,"container","","",29,null],[3,"CXIdxIBOutletCollectionAttrInfo","","",null,null],[12,"attrInfo","","",30,null],[12,"objcClass","","",30,null],[12,"classCursor","","",30,null],[12,"classLoc","","",30,null],[3,"CXIdxImportedASTFileInfo","","",null,null],[12,"file","","",31,null],[12,"module","","",31,null],[12,"loc","","",31,null],[12,"isImplicit","","",31,null],[3,"CXIdxIncludedFileInfo","","",null,null],[12,"hashLoc","","",32,null],[12,"filename","","",32,null],[12,"file","","",32,null],[12,"isImport","","",32,null],[12,"isAngled","","",32,null],[12,"isModuleImport","","",32,null],[3,"CXIdxLoc","","",null,null],[12,"ptr_data","","",33,null],[12,"int_data","","",33,null],[3,"CXIdxObjCCategoryDeclInfo","","",null,null],[12,"containerInfo","","",34,null],[12,"objcClass","","",34,null],[12,"classCursor","","",34,null],[12,"classLoc","","",34,null],[12,"protocols","","",34,null],[3,"CXIdxObjCContainerDeclInfo","","",null,null],[12,"declInfo","","",35,null],[12,"kind","","",35,null],[3,"CXIdxObjCInterfaceDeclInfo","","",null,null],[12,"containerInfo","","",36,null],[12,"superInfo","","",36,null],[12,"protocols","","",36,null],[3,"CXIdxObjCPropertyDeclInfo","","",null,null],[12,"declInfo","","",37,null],[12,"getter","","",37,null],[12,"setter","","",37,null],[3,"CXIdxObjCProtocolRefInfo","","",null,null],[12,"protocol","","",38,null],[12,"cursor","","",38,null],[12,"loc","","",38,null],[3,"CXIdxObjCProtocolRefListInfo","","",null,null],[12,"protocols","","",39,null],[12,"numProtocols","","",39,null],[3,"CXPlatformAvailability","","",null,null],[12,"Platform","","",40,null],[12,"Introduced","","",40,null],[12,"Deprecated","","",40,null],[12,"Obsoleted","","",40,null],[12,"Unavailable","","",40,null],[12,"Message","","",40,null],[3,"CXSourceLocation","","",null,null],[12,"ptr_data","","",41,null],[12,"int_data","","",41,null],[3,"CXSourceRange","","",null,null],[12,"ptr_data","","",42,null],[12,"begin_int_data","","",42,null],[12,"end_int_data","","",42,null],[3,"CXSourceRangeList","","",null,null],[12,"count","","",43,null],[12,"ranges","","",43,null],[3,"CXString","","",null,null],[12,"data","","",44,null],[12,"private_flags","","",44,null],[3,"CXTUResourceUsage","","",null,null],[12,"data","","",45,null],[12,"numEntries","","",45,null],[12,"entries","","",45,null],[3,"CXTUResourceUsageEntry","","",null,null],[12,"kind","","",46,null],[12,"amount","","",46,null],[3,"CXToken","","",null,null],[12,"int_data","","",47,null],[12,"ptr_data","","",47,null],[3,"CXType","","",null,null],[12,"kind","","",48,null],[12,"data","","",48,null],[3,"CXUnsavedFile","","",null,null],[12,"Filename","","",49,null],[12,"Contents","","",49,null],[12,"Length","","",49,null],[3,"CXVersion","","",null,null],[12,"Major","","",50,null],[12,"Minor","","",50,null],[12,"Subminor","","",50,null],[3,"IndexerCallbacks","","",null,null],[12,"abortQuery","","",51,null],[12,"diagnostic","","",51,null],[12,"enteredMainFile","","",51,null],[12,"ppIncludedFile","","",51,null],[12,"importedASTFile","","",51,null],[12,"startedTranslationUnit","","",51,null],[12,"indexDeclaration","","",51,null],[12,"indexEntityReference","","",51,null],[4,"CXAvailabilityKind","","",null,null],[13,"Available","","",52,null],[13,"Deprecated","","",52,null],[13,"NotAvailable","","",52,null],[13,"NotAccessible","","",52,null],[4,"CXCallingConv","","",null,null],[13,"Default","","",53,null],[13,"C","","",53,null],[13,"X86StdCall","","",53,null],[13,"X86FastCall","","",53,null],[13,"X86ThisCall","","",53,null],[13,"X86Pascal","","",53,null],[13,"AAPCS","","",53,null],[13,"AAPCS_VFP","","",53,null],[13,"IntelOclBicc","","",53,null],[13,"X86_64Win64","","",53,null],[13,"X86_64SysV","","",53,null],[13,"Invalid","","",53,null],[13,"Unexposed","","",53,null],[4,"CXChildVisitResult","","",null,null],[13,"Break","","",54,null],[13,"Continue","","",54,null],[13,"Recurse","","",54,null],[4,"CXCommentInlineCommandRenderKind","","",null,null],[13,"Normal","","",55,null],[13,"Bold","","",55,null],[13,"Monospaced","","",55,null],[13,"Emphasized","","",55,null],[4,"CXCommentKind","","",null,null],[13,"Null","","",56,null],[13,"Text","","",56,null],[13,"InlineCommand","","",56,null],[13,"HTMLStartTag","","",56,null],[13,"HTMLEndTag","","",56,null],[13,"Paragraph","","",56,null],[13,"BlockCommand","","",56,null],[13,"ParamCommand","","",56,null],[13,"TParamCommand","","",56,null],[13,"VerbatimBlockCommand","","",56,null],[13,"VerbatimBlockLine","","",56,null],[13,"VerbatimLine","","",56,null],[13,"FullComment","","",56,null],[4,"CXCommentParamPassDirection","","",null,null],[13,"In","","",57,null],[13,"Out","","",57,null],[13,"InOut","","",57,null],[4,"CXCompilationDatabase_Error","","",null,null],[13,"NoError","","",58,null],[13,"CanNotLoadDatabase","","",58,null],[4,"CXCompletionChunkKind","","",null,null],[13,"Optional","","",59,null],[13,"TypedText","","",59,null],[13,"Text","","",59,null],[13,"Placeholder","","",59,null],[13,"Informative","","",59,null],[13,"CurrentParameter","","",59,null],[13,"LeftParen","","",59,null],[13,"RightParen","","",59,null],[13,"LeftBracket","","",59,null],[13,"RightBracket","","",59,null],[13,"LeftBrace","","",59,null],[13,"RightBrace","","",59,null],[13,"LeftAngle","","",59,null],[13,"RightAngle","","",59,null],[13,"Comma","","",59,null],[13,"ResultType","","",59,null],[13,"Colon","","",59,null],[13,"SemiColon","","",59,null],[13,"Equal","","",59,null],[13,"HorizontalSpace","","",59,null],[13,"VerticalSpace","","",59,null],[4,"CXCursorKind","","",null,null],[13,"UnexposedDecl","","",60,null],[13,"StructDecl","","",60,null],[13,"UnionDecl","","",60,null],[13,"ClassDecl","","",60,null],[13,"EnumDecl","","",60,null],[13,"FieldDecl","","",60,null],[13,"EnumConstantDecl","","",60,null],[13,"FunctionDecl","","",60,null],[13,"VarDecl","","",60,null],[13,"ParmDecl","","",60,null],[13,"ObjCInterfaceDecl","","",60,null],[13,"ObjCCategoryDecl","","",60,null],[13,"ObjCProtocolDecl","","",60,null],[13,"ObjCPropertyDecl","","",60,null],[13,"ObjCIvarDecl","","",60,null],[13,"ObjCInstanceMethodDecl","","",60,null],[13,"ObjCClassMethodDecl","","",60,null],[13,"ObjCImplementationDecl","","",60,null],[13,"ObjCCategoryImplDecl","","",60,null],[13,"TypedefDecl","","",60,null],[13,"CXXMethod","","",60,null],[13,"Namespace","","",60,null],[13,"LinkageSpec","","",60,null],[13,"Constructor","","",60,null],[13,"Destructor","","",60,null],[13,"ConversionFunction","","",60,null],[13,"TemplateTypeParameter","","",60,null],[13,"NonTypeTemplateParameter","","",60,null],[13,"TemplateTemplateParameter","","",60,null],[13,"FunctionTemplate","","",60,null],[13,"ClassTemplate","","",60,null],[13,"ClassTemplatePartialSpecialization","","",60,null],[13,"NamespaceAlias","","",60,null],[13,"UsingDirective","","",60,null],[13,"UsingDeclaration","","",60,null],[13,"TypeAliasDecl","","",60,null],[13,"ObjCSynthesizeDecl","","",60,null],[13,"ObjCDynamicDecl","","",60,null],[13,"CXXAccessSpecifier","","",60,null],[13,"ObjCSuperClassRef","","",60,null],[13,"ObjCProtocolRef","","",60,null],[13,"ObjCClassRef","","",60,null],[13,"TypeRef","","",60,null],[13,"CXXBaseSpecifier","","",60,null],[13,"TemplateRef","","",60,null],[13,"NamespaceRef","","",60,null],[13,"MemberRef","","",60,null],[13,"LabelRef","","",60,null],[13,"OverloadedDeclRef","","",60,null],[13,"VariableRef","","",60,null],[13,"InvalidFile","","",60,null],[13,"NoDeclFound","","",60,null],[13,"NotImplemented","","",60,null],[13,"InvalidCode","","",60,null],[13,"UnexposedExpr","","",60,null],[13,"DeclRefExpr","","",60,null],[13,"MemberRefExpr","","",60,null],[13,"CallExpr","","",60,null],[13,"ObjCMessageExpr","","",60,null],[13,"BlockExpr","","",60,null],[13,"IntegerLiteral","","",60,null],[13,"FloatingLiteral","","",60,null],[13,"ImaginaryLiteral","","",60,null],[13,"StringLiteral","","",60,null],[13,"CharacterLiteral","","",60,null],[13,"ParenExpr","","",60,null],[13,"UnaryOperator","","",60,null],[13,"ArraySubscriptExpr","","",60,null],[13,"BinaryOperator","","",60,null],[13,"CompoundAssignOperator","","",60,null],[13,"ConditionalOperator","","",60,null],[13,"CStyleCastExpr","","",60,null],[13,"CompoundLiteralExpr","","",60,null],[13,"InitListExpr","","",60,null],[13,"AddrLabelExpr","","",60,null],[13,"StmtExpr","","",60,null],[13,"GenericSelectionExpr","","",60,null],[13,"GNUNullExpr","","",60,null],[13,"CXXStaticCastExpr","","",60,null],[13,"CXXDynamicCastExpr","","",60,null],[13,"CXXReinterpretCastExpr","","",60,null],[13,"CXXConstCastExpr","","",60,null],[13,"CXXFunctionalCastExpr","","",60,null],[13,"CXXTypeidExpr","","",60,null],[13,"CXXBoolLiteralExpr","","",60,null],[13,"CXXNullPtrLiteralExpr","","",60,null],[13,"CXXThisExpr","","",60,null],[13,"CXXThrowExpr","","",60,null],[13,"CXXNewExpr","","",60,null],[13,"CXXDeleteExpr","","",60,null],[13,"UnaryExpr","","",60,null],[13,"ObjCStringLiteral","","",60,null],[13,"ObjCEncodeExpr","","",60,null],[13,"ObjCSelectorExpr","","",60,null],[13,"ObjCProtocolExpr","","",60,null],[13,"ObjCBridgedCastExpr","","",60,null],[13,"PackExpansionExpr","","",60,null],[13,"SizeOfPackExpr","","",60,null],[13,"LambdaExpr","","",60,null],[13,"ObjCBoolLiteralExpr","","",60,null],[13,"ObjCSelfExpr","","",60,null],[13,"UnexposedStmt","","",60,null],[13,"LabelStmt","","",60,null],[13,"CompoundStmt","","",60,null],[13,"CaseStmt","","",60,null],[13,"DefaultStmt","","",60,null],[13,"IfStmt","","",60,null],[13,"SwitchStmt","","",60,null],[13,"WhileStmt","","",60,null],[13,"DoStmt","","",60,null],[13,"ForStmt","","",60,null],[13,"GotoStmt","","",60,null],[13,"IndirectGotoStmt","","",60,null],[13,"ContinueStmt","","",60,null],[13,"BreakStmt","","",60,null],[13,"ReturnStmt","","",60,null],[13,"AsmStmt","","Duplicate of `GccAsmStmt`.",60,null],[13,"ObjCAtTryStmt","","",60,null],[13,"ObjCAtCatchStmt","","",60,null],[13,"ObjCAtFinallyStmt","","",60,null],[13,"ObjCAtThrowStmt","","",60,null],[13,"ObjCAtSynchronizedStmt","","",60,null],[13,"ObjCAutoreleasePoolStmt","","",60,null],[13,"ObjCForCollectionStmt","","",60,null],[13,"CXXCatchStmt","","",60,null],[13,"CXXTryStmt","","",60,null],[13,"CXXForRangeStmt","","",60,null],[13,"SEHTryStmt","","",60,null],[13,"SEHExceptStmt","","",60,null],[13,"SEHFinallyStmt","","",60,null],[13,"MSAsmStmt","","",60,null],[13,"NullStmt","","",60,null],[13,"DeclStmt","","",60,null],[13,"OMPParallelDirective","","",60,null],[13,"OMPSimdDirective","","",60,null],[13,"OMPForDirective","","",60,null],[13,"OMPSectionsDirective","","",60,null],[13,"OMPSectionDirective","","",60,null],[13,"OMPSingleDirective","","",60,null],[13,"OMPParallelForDirective","","",60,null],[13,"OMPParallelSectionsDirective","","",60,null],[13,"OMPTaskDirective","","",60,null],[13,"OMPMasterDirective","","",60,null],[13,"OMPCriticalDirective","","",60,null],[13,"OMPTaskyieldDirective","","",60,null],[13,"OMPBarrierDirective","","",60,null],[13,"OMPTaskwaitDirective","","",60,null],[13,"OMPFlushDirective","","",60,null],[13,"SEHLeaveStmt","","",60,null],[13,"TranslationUnit","","",60,null],[13,"UnexposedAttr","","",60,null],[13,"IBActionAttr","","",60,null],[13,"IBOutletAttr","","",60,null],[13,"IBOutletCollectionAttr","","",60,null],[13,"CXXFinalAttr","","",60,null],[13,"CXXOverrideAttr","","",60,null],[13,"AnnotateAttr","","",60,null],[13,"AsmLabelAttr","","",60,null],[13,"PackedAttr","","",60,null],[13,"PureAttr","","",60,null],[13,"ConstAttr","","",60,null],[13,"NoDuplicateAttr","","",60,null],[13,"CUDAConstantAttr","","",60,null],[13,"CUDADeviceAttr","","",60,null],[13,"CUDAGlobalAttr","","",60,null],[13,"CUDAHostAttr","","",60,null],[13,"PreprocessingDirective","","",60,null],[13,"MacroDefinition","","",60,null],[13,"MacroExpansion","","Duplicate of `MacroInstantiation`.",60,null],[13,"InclusionDirective","","",60,null],[13,"ModuleImportDecl","","",60,null],[4,"CXDiagnosticSeverity","","",null,null],[13,"Ignored","","",61,null],[13,"Note","","",61,null],[13,"Warning","","",61,null],[13,"Error","","",61,null],[13,"Fatal","","",61,null],[4,"CXErrorCode","","",null,null],[13,"Success","","",62,null],[13,"Failure","","",62,null],[13,"Crashed","","",62,null],[13,"InvalidArguments","","",62,null],[13,"ASTReadError","","",62,null],[4,"CXIdxAttrKind","","",null,null],[13,"Unexposed","","",63,null],[13,"IBAction","","",63,null],[13,"IBOutlet","","",63,null],[13,"IBOutletCollection","","",63,null],[4,"CXIdxEntityCXXTemplateKind","","",null,null],[13,"NonTemplate","","",64,null],[13,"Template","","",64,null],[13,"TemplatePartialSpecialization","","",64,null],[13,"TemplateSpecialization","","",64,null],[4,"CXIdxEntityKind","","",null,null],[13,"Unexposed","","",65,null],[13,"Typedef","","",65,null],[13,"Function","","",65,null],[13,"Variable","","",65,null],[13,"Field","","",65,null],[13,"EnumConstant","","",65,null],[13,"ObjCClass","","",65,null],[13,"ObjCProtocol","","",65,null],[13,"ObjCCategory","","",65,null],[13,"ObjCInstanceMethod","","",65,null],[13,"ObjCClassMethod","","",65,null],[13,"ObjCProperty","","",65,null],[13,"ObjCIvar","","",65,null],[13,"Enum","","",65,null],[13,"Struct","","",65,null],[13,"Union","","",65,null],[13,"CXXClass","","",65,null],[13,"CXXNamespace","","",65,null],[13,"CXXNamespaceAlias","","",65,null],[13,"CXXStaticVariable","","",65,null],[13,"CXXStaticMethod","","",65,null],[13,"CXXInstanceMethod","","",65,null],[13,"CXXConstructor","","",65,null],[13,"CXXDestructor","","",65,null],[13,"CXXConversionFunction","","",65,null],[13,"CXXTypeAlias","","",65,null],[13,"CXXInterface","","",65,null],[4,"CXIdxEntityLanguage","","",null,null],[13,"None","","",66,null],[13,"C","","",66,null],[13,"ObjC","","",66,null],[13,"CXX","","",66,null],[4,"CXIdxEntityRefKind","","",null,null],[13,"Direct","","",67,null],[13,"Implicit","","",67,null],[4,"CXIdxObjCContainerKind","","",null,null],[13,"ForwardRef","","",68,null],[13,"Interface","","",68,null],[13,"Implementation","","",68,null],[4,"CXLanguageKind","","",null,null],[13,"Invalid","","",69,null],[13,"C","","",69,null],[13,"ObjC","","",69,null],[13,"CPlusPlus","","",69,null],[4,"CXLinkageKind","","",null,null],[13,"Invalid","","",70,null],[13,"NoLinkage","","",70,null],[13,"Internal","","",70,null],[13,"UniqueExternal","","",70,null],[13,"External","","",70,null],[4,"CXLoadDiag_Error","","",null,null],[13,"None","","",71,null],[13,"Unknown","","",71,null],[13,"CannotLoad","","",71,null],[13,"InvalidFile","","",71,null],[4,"CXRefQualifierKind","","",null,null],[13,"None","","",72,null],[13,"LValue","","",72,null],[13,"RValue","","",72,null],[4,"CXResult","","",null,null],[13,"Success","","",73,null],[13,"Invalid","","",73,null],[13,"VisitBreak","","",73,null],[4,"CXSaveError","","",null,null],[13,"None","","",74,null],[13,"Unknown","","",74,null],[13,"TranslationErrors","","",74,null],[13,"InvalidTU","","",74,null],[4,"CXTUResourceUsageKind","","",null,null],[13,"AST","","",75,null],[13,"Identifiers","","",75,null],[13,"Selectors","","",75,null],[13,"GlobalCompletionResults","","",75,null],[13,"SourceManagerContentCache","","",75,null],[13,"AST_SideTables","","",75,null],[13,"SourceManager_Membuffer_Malloc","","",75,null],[13,"SourceManager_Membuffer_MMap","","",75,null],[13,"ExternalASTSource_Membuffer_Malloc","","",75,null],[13,"ExternalASTSource_Membuffer_MMap","","",75,null],[13,"Preprocessor","","",75,null],[13,"PreprocessingRecord","","",75,null],[13,"SourceManager_DataStructures","","",75,null],[13,"Preprocessor_HeaderSearch","","",75,null],[4,"CXTokenKind","","",null,null],[13,"Punctuation","","",76,null],[13,"Keyword","","",76,null],[13,"Identifier","","",76,null],[13,"Literal","","",76,null],[13,"Comment","","",76,null],[4,"CXTypeKind","","",null,null],[13,"Invalid","","",77,null],[13,"Unexposed","","",77,null],[13,"Void","","",77,null],[13,"Bool","","",77,null],[13,"Char_U","","",77,null],[13,"UChar","","",77,null],[13,"Char16","","",77,null],[13,"Char32","","",77,null],[13,"UShort","","",77,null],[13,"UInt","","",77,null],[13,"ULong","","",77,null],[13,"ULongLong","","",77,null],[13,"UInt128","","",77,null],[13,"Char_S","","",77,null],[13,"SChar","","",77,null],[13,"WChar","","",77,null],[13,"Short","","",77,null],[13,"Int","","",77,null],[13,"Long","","",77,null],[13,"LongLong","","",77,null],[13,"Int128","","",77,null],[13,"Float","","",77,null],[13,"Double","","",77,null],[13,"LongDouble","","",77,null],[13,"NullPtr","","",77,null],[13,"Overload","","",77,null],[13,"Dependent","","",77,null],[13,"ObjCId","","",77,null],[13,"ObjCClass","","",77,null],[13,"ObjCSel","","",77,null],[13,"Complex","","",77,null],[13,"Pointer","","",77,null],[13,"BlockPointer","","",77,null],[13,"LValueReference","","",77,null],[13,"RValueReference","","",77,null],[13,"Record","","",77,null],[13,"Enum","","",77,null],[13,"Typedef","","",77,null],[13,"ObjCInterface","","",77,null],[13,"ObjCObjectPointer","","",77,null],[13,"FunctionNoProto","","",77,null],[13,"FunctionProto","","",77,null],[13,"ConstantArray","","",77,null],[13,"Vector","","",77,null],[13,"IncompleteArray","","",77,null],[13,"VariableArray","","",77,null],[13,"DependentSizedArray","","",77,null],[13,"MemberPointer","","",77,null],[4,"CXTypeLayoutError","","",null,null],[13,"Invalid","","",78,null],[13,"Incomplete","","",78,null],[13,"Dependent","","",78,null],[13,"NotConstantSize","","",78,null],[13,"InvalidFieldName","","",78,null],[4,"CXVisitorResult","","",null,null],[13,"Break","","",79,null],[13,"Continue","","",79,null],[4,"CX_CXXAccessSpecifier","","",null,null],[13,"CXXInvalidAccessSpecifier","","",80,null],[13,"CXXPublic","","",80,null],[13,"CXXProtected","","",80,null],[13,"CXXPrivate","","",80,null],[5,"clang_CXCursorSet_contains","","",null,null],[5,"clang_CXCursorSet_insert","","",null,null],[5,"clang_CXIndex_getGlobalOptions","","",null,null],[5,"clang_CXIndex_setGlobalOptions","","",null,null],[5,"clang_CXXMethod_isConst","","",null,null],[5,"clang_CXXMethod_isPureVirtual","","",null,null],[5,"clang_CXXMethod_isStatic","","",null,null],[5,"clang_CXXMethod_isVirtual","","",null,null],[5,"clang_CompilationDatabase_dispose","","",null,null],[5,"clang_CompilationDatabase_fromDirectory","","",null,null],[5,"clang_CompilationDatabase_getAllCompileCommands","","",null,null],[5,"clang_CompilationDatabase_getCompileCommands","","",null,null],[5,"clang_CompileCommand_getArg","","",null,null],[5,"clang_CompileCommand_getDirectory","","",null,null],[5,"clang_CompileCommand_getNumArgs","","",null,null],[5,"clang_CompileCommands_dispose","","",null,null],[5,"clang_CompileCommands_getCommand","","",null,null],[5,"clang_CompileCommands_getSize","","",null,null],[5,"clang_Cursor_getArgument","","",null,null],[5,"clang_Cursor_getBriefCommentText","","",null,null],[5,"clang_Cursor_getCommentRange","","",null,null],[5,"clang_Cursor_getModule","","",null,null],[5,"clang_Cursor_getNumArguments","","",null,null],[5,"clang_Cursor_getObjCDeclQualifiers","","",null,null],[5,"clang_Cursor_getObjCPropertyAttributes","","",null,null],[5,"clang_Cursor_getObjCSelectorIndex","","",null,null],[5,"clang_Cursor_getRawCommentText","","",null,null],[5,"clang_Cursor_getReceiverType","","",null,null],[5,"clang_Cursor_getSpellingNameRange","","",null,null],[5,"clang_Cursor_getTranslationUnit","","",null,null],[5,"clang_Cursor_isBitField","","",null,null],[5,"clang_Cursor_isDynamicCall","","",null,null],[5,"clang_Cursor_isNull","","",null,null],[5,"clang_Cursor_isObjCOptional","","",null,null],[5,"clang_Cursor_isVariadic","","",null,null],[5,"clang_IndexAction_create","","",null,null],[5,"clang_IndexAction_dispose","","",null,null],[5,"clang_Location_isFromMainFile","","",null,null],[5,"clang_Location_isInSystemHeader","","",null,null],[5,"clang_Module_getASTFile","","",null,null],[5,"clang_Module_getFullName","","",null,null],[5,"clang_Module_getName","","",null,null],[5,"clang_Module_getNumTopLevelHeaders","","",null,null],[5,"clang_Module_getParent","","",null,null],[5,"clang_Module_getTopLevelHeader","","",null,null],[5,"clang_Module_isSystem","","",null,null],[5,"clang_Range_isNull","","",null,null],[5,"clang_Type_getAlignOf","","",null,null],[5,"clang_Type_getCXXRefQualifier","","",null,null],[5,"clang_Type_getClassType","","",null,null],[5,"clang_Type_getNumTemplateArguments","","",null,null],[5,"clang_Type_getOffsetOf","","",null,null],[5,"clang_Type_getSizeOf","","",null,null],[5,"clang_Type_getTemplateArgumentAsType","","",null,null],[5,"clang_annotateTokens","","",null,null],[5,"clang_codeCompleteAt","","",null,null],[5,"clang_codeCompleteGetContainerKind","","",null,null],[5,"clang_codeCompleteGetContainerUSR","","",null,null],[5,"clang_codeCompleteGetContexts","","",null,null],[5,"clang_codeCompleteGetDiagnostic","","",null,null],[5,"clang_codeCompleteGetNumDiagnostics","","",null,null],[5,"clang_codeCompleteGetObjCSelector","","",null,null],[5,"clang_constructUSR_ObjCCategory","","",null,null],[5,"clang_constructUSR_ObjCClass","","",null,null],[5,"clang_constructUSR_ObjCIvar","","",null,null],[5,"clang_constructUSR_ObjCMethod","","",null,null],[5,"clang_constructUSR_ObjCProperty","","",null,null],[5,"clang_constructUSR_ObjCProtocol","","",null,null],[5,"clang_createCXCursorSet","","",null,null],[5,"clang_createIndex","","",null,null],[5,"clang_createTranslationUnit","","",null,null],[5,"clang_createTranslationUnit2","","",null,null],[5,"clang_createTranslationUnitFromSourceFile","","",null,null],[5,"clang_defaultCodeCompleteOptions","","",null,null],[5,"clang_defaultDiagnosticDisplayOptions","","",null,null],[5,"clang_defaultEditingTranslationUnitOptions","","",null,null],[5,"clang_defaultReparseOptions","","",null,null],[5,"clang_defaultSaveOptions","","",null,null],[5,"clang_disposeCXCursorSet","","",null,null],[5,"clang_disposeCXPlatformAvailability","","",null,null],[5,"clang_disposeCXTUResourceUsage","","",null,null],[5,"clang_disposeCodeCompleteResults","","",null,null],[5,"clang_disposeDiagnostic","","",null,null],[5,"clang_disposeDiagnosticSet","","",null,null],[5,"clang_disposeIndex","","",null,null],[5,"clang_disposeOverriddenCursors","","",null,null],[5,"clang_disposeSourceRangeList","","",null,null],[5,"clang_disposeString","","",null,null],[5,"clang_disposeTokens","","",null,null],[5,"clang_disposeTranslationUnit","","",null,null],[5,"clang_enableStackTraces","","",null,null],[5,"clang_equalCursors","","",null,null],[5,"clang_equalLocations","","",null,null],[5,"clang_equalRanges","","",null,null],[5,"clang_equalTypes","","",null,null],[5,"clang_executeOnThread","","",null,null],[5,"clang_findIncludesInFile","","",null,null],[5,"clang_findReferencesInFile","","",null,null],[5,"clang_formatDiagnostic","","",null,null],[5,"clang_getArgType","","",null,null],[5,"clang_getArrayElementType","","",null,null],[5,"clang_getArraySize","","",null,null],[5,"clang_getCString","","",null,null],[5,"clang_getCXTUResourceUsage","","",null,null],[5,"clang_getCXXAccessSpecifier","","",null,null],[5,"clang_getCanonicalCursor","","",null,null],[5,"clang_getCanonicalType","","",null,null],[5,"clang_getChildDiagnostics","","",null,null],[5,"clang_getClangVersion","","",null,null],[5,"clang_getCompletionAnnotation","","",null,null],[5,"clang_getCompletionAvailability","","",null,null],[5,"clang_getCompletionBriefComment","","",null,null],[5,"clang_getCompletionChunkCompletionString","","",null,null],[5,"clang_getCompletionChunkKind","","",null,null],[5,"clang_getCompletionChunkText","","",null,null],[5,"clang_getCompletionNumAnnotations","","",null,null],[5,"clang_getCompletionParent","","",null,null],[5,"clang_getCompletionPriority","","",null,null],[5,"clang_getCursor","","",null,null],[5,"clang_getCursorAvailability","","",null,null],[5,"clang_getCursorCompletionString","","",null,null],[5,"clang_getCursorDefinition","","",null,null],[5,"clang_getCursorDisplayName","","",null,null],[5,"clang_getCursorExtent","","",null,null],[5,"clang_getCursorKind","","",null,null],[5,"clang_getCursorKindSpelling","","",null,null],[5,"clang_getCursorLanguage","","",null,null],[5,"clang_getCursorLexicalParent","","",null,null],[5,"clang_getCursorLinkage","","",null,null],[5,"clang_getCursorLocation","","",null,null],[5,"clang_getCursorPlatformAvailability","","",null,null],[5,"clang_getCursorReferenceNameRange","","",null,null],[5,"clang_getCursorReferenced","","",null,null],[5,"clang_getCursorResultType","","",null,null],[5,"clang_getCursorSemanticParent","","",null,null],[5,"clang_getCursorSpelling","","",null,null],[5,"clang_getCursorType","","",null,null],[5,"clang_getCursorUSR","","",null,null],[5,"clang_getDeclObjCTypeEncoding","","",null,null],[5,"clang_getDefinitionSpellingAndExtent","","",null,null],[5,"clang_getDiagnostic","","",null,null],[5,"clang_getDiagnosticCategory","","",null,null],[5,"clang_getDiagnosticCategoryName","","",null,null],[5,"clang_getDiagnosticCategoryText","","",null,null],[5,"clang_getDiagnosticFixIt","","",null,null],[5,"clang_getDiagnosticInSet","","",null,null],[5,"clang_getDiagnosticLocation","","",null,null],[5,"clang_getDiagnosticNumFixIts","","",null,null],[5,"clang_getDiagnosticNumRanges","","",null,null],[5,"clang_getDiagnosticOption","","",null,null],[5,"clang_getDiagnosticRange","","",null,null],[5,"clang_getDiagnosticSetFromTU","","",null,null],[5,"clang_getDiagnosticSeverity","","",null,null],[5,"clang_getDiagnosticSpelling","","",null,null],[5,"clang_getElementType","","",null,null],[5,"clang_getEnumConstantDeclUnsignedValue","","",null,null],[5,"clang_getEnumConstantDeclValue","","",null,null],[5,"clang_getEnumDeclIntegerType","","",null,null],[5,"clang_getExpansionLocation","","",null,null],[5,"clang_getFieldDeclBitWidth","","",null,null],[5,"clang_getFile","","",null,null],[5,"clang_getFileLocation","","",null,null],[5,"clang_getFileName","","",null,null],[5,"clang_getFileTime","","",null,null],[5,"clang_getFileUniqueID","","",null,null],[5,"clang_getFunctionTypeCallingConv","","",null,null],[5,"clang_getIBOutletCollectionType","","",null,null],[5,"clang_getIncludedFile","","",null,null],[5,"clang_getInclusions","","",null,null],[5,"clang_getInstantiationLocation","","",null,null],[5,"clang_getLocation","","",null,null],[5,"clang_getLocationForOffset","","",null,null],[5,"clang_getModuleForFile","","",null,null],[5,"clang_getNullCursor","","",null,null],[5,"clang_getNullLocation","","",null,null],[5,"clang_getNullRange","","",null,null],[5,"clang_getNumArgTypes","","",null,null],[5,"clang_getNumCompletionChunks","","",null,null],[5,"clang_getNumDiagnostics","","",null,null],[5,"clang_getNumDiagnosticsInSet","","",null,null],[5,"clang_getNumElements","","",null,null],[5,"clang_getNumOverloadedDecls","","",null,null],[5,"clang_getOverloadedDecl","","",null,null],[5,"clang_getOverriddenCursors","","",null,null],[5,"clang_getPointeeType","","",null,null],[5,"clang_getPresumedLocation","","",null,null],[5,"clang_getRange","","",null,null],[5,"clang_getRangeEnd","","",null,null],[5,"clang_getRangeStart","","",null,null],[5,"clang_getRemappings","","",null,null],[5,"clang_getRemappingsFromFileList","","",null,null],[5,"clang_getResultType","","",null,null],[5,"clang_getSkippedRanges","","",null,null],[5,"clang_getSpecializedCursorTemplate","","",null,null],[5,"clang_getSpellingLocation","","",null,null],[5,"clang_getTUResourceUsageName","","",null,null],[5,"clang_getTemplateCursorKind","","",null,null],[5,"clang_getTokenExtent","","",null,null],[5,"clang_getTokenKind","","",null,null],[5,"clang_getTokenLocation","","",null,null],[5,"clang_getTokenSpelling","","",null,null],[5,"clang_getTranslationUnitCursor","","",null,null],[5,"clang_getTranslationUnitSpelling","","",null,null],[5,"clang_getTypeDeclaration","","",null,null],[5,"clang_getTypeKindSpelling","","",null,null],[5,"clang_getTypeSpelling","","",null,null],[5,"clang_getTypedefDeclUnderlyingType","","",null,null],[5,"clang_hashCursor","","",null,null],[5,"clang_indexLoc_getCXSourceLocation","","",null,null],[5,"clang_indexLoc_getFileLocation","","",null,null],[5,"clang_indexSourceFile","","",null,null],[5,"clang_indexTranslationUnit","","",null,null],[5,"clang_index_getCXXClassDeclInfo","","",null,null],[5,"clang_index_getClientContainer","","",null,null],[5,"clang_index_getClientEntity","","",null,null],[5,"clang_index_getIBOutletCollectionAttrInfo","","",null,null],[5,"clang_index_getObjCCategoryDeclInfo","","",null,null],[5,"clang_index_getObjCContainerDeclInfo","","",null,null],[5,"clang_index_getObjCInterfaceDeclInfo","","",null,null],[5,"clang_index_getObjCPropertyDeclInfo","","",null,null],[5,"clang_index_getObjCProtocolRefListInfo","","",null,null],[5,"clang_index_isEntityObjCContainerKind","","",null,null],[5,"clang_index_setClientContainer","","",null,null],[5,"clang_index_setClientEntity","","",null,null],[5,"clang_isAttribute","","",null,null],[5,"clang_isConstQualifiedType","","",null,null],[5,"clang_isCursorDefinition","","",null,null],[5,"clang_isDeclaration","","",null,null],[5,"clang_isExpression","","",null,null],[5,"clang_isFileMultipleIncludeGuarded","","",null,null],[5,"clang_isFunctionTypeVariadic","","",null,null],[5,"clang_isInvalid","","",null,null],[5,"clang_isPODType","","",null,null],[5,"clang_isPreprocessing","","",null,null],[5,"clang_isReference","","",null,null],[5,"clang_isRestrictQualifiedType","","",null,null],[5,"clang_isStatement","","",null,null],[5,"clang_isTranslationUnit","","",null,null],[5,"clang_isUnexposed","","",null,null],[5,"clang_isVirtualBase","","",null,null],[5,"clang_isVolatileQualifiedType","","",null,null],[5,"clang_loadDiagnostics","","",null,null],[5,"clang_parseTranslationUnit","","",null,null],[5,"clang_parseTranslationUnit2","","",null,null],[5,"clang_remap_dispose","","",null,null],[5,"clang_remap_getFilenames","","",null,null],[5,"clang_remap_getNumFiles","","",null,null],[5,"clang_reparseTranslationUnit","","",null,null],[5,"clang_saveTranslationUnit","","",null,null],[5,"clang_sortCodeCompletionResults","","",null,null],[5,"clang_toggleCrashRecovery","","",null,null],[5,"clang_tokenize","","",null,null],[5,"clang_visitChildren","","",null,null],[5,"clang_BlockCommandComment_getArgText","","",null,null],[5,"clang_BlockCommandComment_getCommandName","","",null,null],[5,"clang_BlockCommandComment_getNumArgs","","",null,null],[5,"clang_BlockCommandComment_getParagraph","","",null,null],[5,"clang_Comment_getChild","","",null,null],[5,"clang_Comment_getKind","","",null,null],[5,"clang_Comment_getNumChildren","","",null,null],[5,"clang_Comment_isWhitespace","","",null,null],[5,"clang_Cursor_getParsedComment","","",null,null],[5,"clang_FullComment_getAsHTML","","",null,null],[5,"clang_FullComment_getAsXML","","",null,null],[5,"clang_HTMLStartTagComment_isSelfClosing","","",null,null],[5,"clang_HTMLStartTag_getAttrName","","",null,null],[5,"clang_HTMLStartTag_getAttrValue","","",null,null],[5,"clang_HTMLStartTag_getNumAttrs","","",null,null],[5,"clang_HTMLTagComment_getAsString","","",null,null],[5,"clang_HTMLTagComment_getTagName","","",null,null],[5,"clang_InlineCommandComment_getArgText","","",null,null],[5,"clang_InlineCommandComment_getCommandName","","",null,null],[5,"clang_InlineCommandComment_getNumArgs","","",null,null],[5,"clang_InlineCommandComment_getRenderKind","","",null,null],[5,"clang_InlineContentComment_hasTrailingNewline","","",null,null],[5,"clang_ParamCommandComment_getDirection","","",null,null],[5,"clang_ParamCommandComment_getParamIndex","","",null,null],[5,"clang_ParamCommandComment_getParamName","","",null,null],[5,"clang_ParamCommandComment_isDirectionExplicit","","",null,null],[5,"clang_ParamCommandComment_isParamIndexValid","","",null,null],[5,"clang_TParamCommandComment_getDepth","","",null,null],[5,"clang_TParamCommandComment_getIndex","","",null,null],[5,"clang_TParamCommandComment_getParamName","","",null,null],[5,"clang_TParamCommandComment_isParamPositionValid","","",null,null],[5,"clang_TextComment_getText","","",null,null],[5,"clang_VerbatimBlockLineComment_getText","","",null,null],[5,"clang_VerbatimLineComment_getText","","",null,null],[0,"support","","Provides helper functionality.",null,null],[3,"Clang","clang_sys::support","A `clang` executable.",null,null],[12,"path","","The path to this `clang` executable.",81,null],[12,"version","","The version of this `clang` executable if it could be parsed.",81,null],[12,"c_search_paths","","The directories searched by this `clang` executable for C headers.",81,null],[12,"cpp_search_paths","","The directories searched by this `clang` executable for C++ headers.",81,null],[11,"clone","","",81,null],[11,"fmt","","",81,null],[11,"find","","Returns a `clang` executable if one can be found.",81,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[6,"CXClientData","clang_sys","",null,null],[6,"CXCursorVisitor","","",null,null],[6,"CXInclusionVisitor","","",null,null],[17,"CXCodeComplete_IncludeMacros","","",null,null],[17,"CXCodeComplete_IncludeCodePatterns","","",null,null],[17,"CXCodeComplete_IncludeBriefComments","","",null,null],[17,"CXCompletionContext_Unexposed","","",null,null],[17,"CXCompletionContext_AnyType","","",null,null],[17,"CXCompletionContext_AnyValue","","",null,null],[17,"CXCompletionContext_ObjCObjectValue","","",null,null],[17,"CXCompletionContext_ObjCSelectorValue","","",null,null],[17,"CXCompletionContext_CXXClassTypeValue","","",null,null],[17,"CXCompletionContext_DotMemberAccess","","",null,null],[17,"CXCompletionContext_ArrowMemberAccess","","",null,null],[17,"CXCompletionContext_ObjCPropertyAccess","","",null,null],[17,"CXCompletionContext_EnumTag","","",null,null],[17,"CXCompletionContext_UnionTag","","",null,null],[17,"CXCompletionContext_StructTag","","",null,null],[17,"CXCompletionContext_ClassTag","","",null,null],[17,"CXCompletionContext_Namespace","","",null,null],[17,"CXCompletionContext_NestedNameSpecifier","","",null,null],[17,"CXCompletionContext_ObjCInterface","","",null,null],[17,"CXCompletionContext_ObjCProtocol","","",null,null],[17,"CXCompletionContext_ObjCCategory","","",null,null],[17,"CXCompletionContext_ObjCInstanceMessage","","",null,null],[17,"CXCompletionContext_ObjCClassMessage","","",null,null],[17,"CXCompletionContext_ObjCSelectorName","","",null,null],[17,"CXCompletionContext_MacroName","","",null,null],[17,"CXCompletionContext_NaturalLanguage","","",null,null],[17,"CXCompletionContext_Unknown","","",null,null],[17,"CXDiagnostic_DisplaySourceLocation","","",null,null],[17,"CXDiagnostic_DisplayColumn","","",null,null],[17,"CXDiagnostic_DisplaySourceRanges","","",null,null],[17,"CXDiagnostic_DisplayOption","","",null,null],[17,"CXDiagnostic_DisplayCategoryId","","",null,null],[17,"CXDiagnostic_DisplayCategoryName","","",null,null],[17,"CXGlobalOpt_None","","",null,null],[17,"CXGlobalOpt_ThreadBackgroundPriorityForIndexing","","",null,null],[17,"CXGlobalOpt_ThreadBackgroundPriorityForEditing","","",null,null],[17,"CXGlobalOpt_ThreadBackgroundPriorityForAll","","",null,null],[17,"CXIdxDeclFlag_Skipped","","",null,null],[17,"CXIndexOptNone","","",null,null],[17,"CXIndexOptSuppressRedundantRefs","","",null,null],[17,"CXIndexOptIndexFunctionLocalSymbols","","",null,null],[17,"CXIndexOptIndexImplicitTemplateInstantiations","","",null,null],[17,"CXIndexOptSuppressWarnings","","",null,null],[17,"CXIndexOptSkipParsedBodiesInSession","","",null,null],[17,"CXNameRange_WantQualifier","","",null,null],[17,"CXNameRange_WantTemplateArgs","","",null,null],[17,"CXNameRange_WantSinglePiece","","",null,null],[17,"CXObjCDeclQualifier_None","","",null,null],[17,"CXObjCDeclQualifier_In","","",null,null],[17,"CXObjCDeclQualifier_Inout","","",null,null],[17,"CXObjCDeclQualifier_Out","","",null,null],[17,"CXObjCDeclQualifier_Bycopy","","",null,null],[17,"CXObjCDeclQualifier_Byref","","",null,null],[17,"CXObjCDeclQualifier_Oneway","","",null,null],[17,"CXObjCPropertyAttr_noattr","","",null,null],[17,"CXObjCPropertyAttr_readonly","","",null,null],[17,"CXObjCPropertyAttr_getter","","",null,null],[17,"CXObjCPropertyAttr_assign","","",null,null],[17,"CXObjCPropertyAttr_readwrite","","",null,null],[17,"CXObjCPropertyAttr_retain","","",null,null],[17,"CXObjCPropertyAttr_copy","","",null,null],[17,"CXObjCPropertyAttr_nonatomic","","",null,null],[17,"CXObjCPropertyAttr_setter","","",null,null],[17,"CXObjCPropertyAttr_atomic","","",null,null],[17,"CXObjCPropertyAttr_weak","","",null,null],[17,"CXObjCPropertyAttr_strong","","",null,null],[17,"CXObjCPropertyAttr_unsafe_unretained","","",null,null],[17,"CXReparse_None","","",null,null],[17,"CXSaveTranslationUnit_None","","",null,null],[17,"CXTranslationUnit_None","","",null,null],[17,"CXTranslationUnit_DetailedPreprocessingRecord","","",null,null],[17,"CXTranslationUnit_Incomplete","","",null,null],[17,"CXTranslationUnit_PrecompiledPreamble","","",null,null],[17,"CXTranslationUnit_CacheCompletionResults","","",null,null],[17,"CXTranslationUnit_ForSerialization","","",null,null],[17,"CXTranslationUnit_CXXChainedPCH","","",null,null],[17,"CXTranslationUnit_SkipFunctionBodies","","",null,null],[17,"CXTranslationUnit_IncludeBriefCommentsInCodeCompletion","","",null,null],[11,"clone","","",52,null],[11,"fmt","","",52,null],[11,"eq","","",52,null],[11,"partial_cmp","","",52,null],[11,"cmp","","",52,null],[11,"hash","","",52,null],[11,"clone","","",53,null],[11,"fmt","","",53,null],[11,"eq","","",53,null],[11,"partial_cmp","","",53,null],[11,"cmp","","",53,null],[11,"hash","","",53,null],[11,"clone","","",54,null],[11,"fmt","","",54,null],[11,"eq","","",54,null],[11,"partial_cmp","","",54,null],[11,"cmp","","",54,null],[11,"hash","","",54,null],[11,"clone","","",55,null],[11,"fmt","","",55,null],[11,"eq","","",55,null],[11,"partial_cmp","","",55,null],[11,"cmp","","",55,null],[11,"hash","","",55,null],[11,"clone","","",56,null],[11,"fmt","","",56,null],[11,"eq","","",56,null],[11,"partial_cmp","","",56,null],[11,"cmp","","",56,null],[11,"hash","","",56,null],[11,"clone","","",57,null],[11,"fmt","","",57,null],[11,"eq","","",57,null],[11,"partial_cmp","","",57,null],[11,"cmp","","",57,null],[11,"hash","","",57,null],[11,"clone","","",58,null],[11,"fmt","","",58,null],[11,"eq","","",58,null],[11,"partial_cmp","","",58,null],[11,"cmp","","",58,null],[11,"hash","","",58,null],[11,"clone","","",59,null],[11,"fmt","","",59,null],[11,"eq","","",59,null],[11,"partial_cmp","","",59,null],[11,"cmp","","",59,null],[11,"hash","","",59,null],[11,"clone","","",60,null],[11,"fmt","","",60,null],[11,"eq","","",60,null],[11,"partial_cmp","","",60,null],[11,"cmp","","",60,null],[11,"hash","","",60,null],[11,"clone","","",61,null],[11,"fmt","","",61,null],[11,"eq","","",61,null],[11,"partial_cmp","","",61,null],[11,"cmp","","",61,null],[11,"hash","","",61,null],[11,"clone","","",62,null],[11,"fmt","","",62,null],[11,"eq","","",62,null],[11,"partial_cmp","","",62,null],[11,"cmp","","",62,null],[11,"hash","","",62,null],[11,"clone","","",63,null],[11,"fmt","","",63,null],[11,"eq","","",63,null],[11,"partial_cmp","","",63,null],[11,"cmp","","",63,null],[11,"hash","","",63,null],[11,"clone","","",64,null],[11,"fmt","","",64,null],[11,"eq","","",64,null],[11,"partial_cmp","","",64,null],[11,"cmp","","",64,null],[11,"hash","","",64,null],[11,"clone","","",65,null],[11,"fmt","","",65,null],[11,"eq","","",65,null],[11,"partial_cmp","","",65,null],[11,"cmp","","",65,null],[11,"hash","","",65,null],[11,"clone","","",66,null],[11,"fmt","","",66,null],[11,"eq","","",66,null],[11,"partial_cmp","","",66,null],[11,"cmp","","",66,null],[11,"hash","","",66,null],[11,"clone","","",67,null],[11,"fmt","","",67,null],[11,"eq","","",67,null],[11,"partial_cmp","","",67,null],[11,"cmp","","",67,null],[11,"hash","","",67,null],[11,"clone","","",68,null],[11,"fmt","","",68,null],[11,"eq","","",68,null],[11,"partial_cmp","","",68,null],[11,"cmp","","",68,null],[11,"hash","","",68,null],[11,"clone","","",69,null],[11,"fmt","","",69,null],[11,"eq","","",69,null],[11,"partial_cmp","","",69,null],[11,"cmp","","",69,null],[11,"hash","","",69,null],[11,"clone","","",70,null],[11,"fmt","","",70,null],[11,"eq","","",70,null],[11,"partial_cmp","","",70,null],[11,"cmp","","",70,null],[11,"hash","","",70,null],[11,"clone","","",71,null],[11,"fmt","","",71,null],[11,"eq","","",71,null],[11,"partial_cmp","","",71,null],[11,"cmp","","",71,null],[11,"hash","","",71,null],[11,"clone","","",72,null],[11,"fmt","","",72,null],[11,"eq","","",72,null],[11,"partial_cmp","","",72,null],[11,"cmp","","",72,null],[11,"hash","","",72,null],[11,"clone","","",73,null],[11,"fmt","","",73,null],[11,"eq","","",73,null],[11,"partial_cmp","","",73,null],[11,"cmp","","",73,null],[11,"hash","","",73,null],[11,"clone","","",74,null],[11,"fmt","","",74,null],[11,"eq","","",74,null],[11,"partial_cmp","","",74,null],[11,"cmp","","",74,null],[11,"hash","","",74,null],[11,"clone","","",75,null],[11,"fmt","","",75,null],[11,"eq","","",75,null],[11,"partial_cmp","","",75,null],[11,"cmp","","",75,null],[11,"hash","","",75,null],[11,"clone","","",76,null],[11,"fmt","","",76,null],[11,"eq","","",76,null],[11,"partial_cmp","","",76,null],[11,"cmp","","",76,null],[11,"hash","","",76,null],[11,"clone","","",77,null],[11,"fmt","","",77,null],[11,"eq","","",77,null],[11,"partial_cmp","","",77,null],[11,"cmp","","",77,null],[11,"hash","","",77,null],[11,"clone","","",78,null],[11,"fmt","","",78,null],[11,"eq","","",78,null],[11,"partial_cmp","","",78,null],[11,"cmp","","",78,null],[11,"hash","","",78,null],[11,"from_raw","","Converts the supplied C value into the `CXTypeLayoutError` value with the same discriminant,\nif such a value exists.",78,{"inputs":[{"name":"c_longlong"}],"output":{"name":"option"}}],[11,"clone","","",79,null],[11,"fmt","","",79,null],[11,"eq","","",79,null],[11,"partial_cmp","","",79,null],[11,"cmp","","",79,null],[11,"hash","","",79,null],[11,"clone","","",80,null],[11,"fmt","","",80,null],[11,"eq","","",80,null],[11,"partial_cmp","","",80,null],[11,"cmp","","",80,null],[11,"hash","","",80,null],[11,"eq","","",82,null],[11,"ne","","",82,null],[11,"clone","","",82,null],[11,"partial_cmp","","",82,null],[11,"lt","","",82,null],[11,"le","","",82,null],[11,"gt","","",82,null],[11,"ge","","",82,null],[11,"cmp","","",82,null],[11,"hash","","",82,null],[11,"fmt","","",82,null],[11,"empty","","Returns an empty set of flags.",82,{"inputs":[],"output":{"name":"cxcodecomplete_flags"}}],[11,"all","","Returns the set containing all flags.",82,{"inputs":[],"output":{"name":"cxcodecomplete_flags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",82,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",82,{"inputs":[{"name":"c_uint"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",82,{"inputs":[{"name":"c_uint"}],"output":{"name":"cxcodecomplete_flags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",82,null],[11,"is_all","","Returns `true` if all flags are currently set.",82,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",82,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",82,null],[11,"insert","","Inserts the specified flags in-place.",82,null],[11,"remove","","Removes the specified flags in-place.",82,null],[11,"toggle","","Toggles the specified flags in-place.",82,null],[11,"bitor","","Returns the union of the two sets of flags.",82,null],[11,"bitor_assign","","Adds the set of flags.",82,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",82,null],[11,"bitxor_assign","","Toggles the set of flags.",82,null],[11,"bitand","","Returns the intersection between the two sets of flags.",82,null],[11,"bitand_assign","","Disables all flags disabled in the set.",82,null],[11,"sub","","Returns the set difference of the two sets of flags.",82,null],[11,"sub_assign","","Disables all flags enabled in the set.",82,null],[11,"not","","Returns the complement of this set of flags.",82,null],[11,"extend","","",82,null],[11,"from_iter","","",82,{"inputs":[{"name":"t"}],"output":{"name":"cxcodecomplete_flags"}}],[11,"eq","","",83,null],[11,"ne","","",83,null],[11,"clone","","",83,null],[11,"partial_cmp","","",83,null],[11,"lt","","",83,null],[11,"le","","",83,null],[11,"gt","","",83,null],[11,"ge","","",83,null],[11,"cmp","","",83,null],[11,"hash","","",83,null],[11,"fmt","","",83,null],[11,"empty","","Returns an empty set of flags.",83,{"inputs":[],"output":{"name":"cxcompletioncontext"}}],[11,"all","","Returns the set containing all flags.",83,{"inputs":[],"output":{"name":"cxcompletioncontext"}}],[11,"bits","","Returns the raw value of the flags currently stored.",83,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",83,{"inputs":[{"name":"c_uint"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",83,{"inputs":[{"name":"c_uint"}],"output":{"name":"cxcompletioncontext"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",83,null],[11,"is_all","","Returns `true` if all flags are currently set.",83,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",83,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",83,null],[11,"insert","","Inserts the specified flags in-place.",83,null],[11,"remove","","Removes the specified flags in-place.",83,null],[11,"toggle","","Toggles the specified flags in-place.",83,null],[11,"bitor","","Returns the union of the two sets of flags.",83,null],[11,"bitor_assign","","Adds the set of flags.",83,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",83,null],[11,"bitxor_assign","","Toggles the set of flags.",83,null],[11,"bitand","","Returns the intersection between the two sets of flags.",83,null],[11,"bitand_assign","","Disables all flags disabled in the set.",83,null],[11,"sub","","Returns the set difference of the two sets of flags.",83,null],[11,"sub_assign","","Disables all flags enabled in the set.",83,null],[11,"not","","Returns the complement of this set of flags.",83,null],[11,"extend","","",83,null],[11,"from_iter","","",83,{"inputs":[{"name":"t"}],"output":{"name":"cxcompletioncontext"}}],[11,"eq","","",84,null],[11,"ne","","",84,null],[11,"clone","","",84,null],[11,"partial_cmp","","",84,null],[11,"lt","","",84,null],[11,"le","","",84,null],[11,"gt","","",84,null],[11,"ge","","",84,null],[11,"cmp","","",84,null],[11,"hash","","",84,null],[11,"fmt","","",84,null],[11,"empty","","Returns an empty set of flags.",84,{"inputs":[],"output":{"name":"cxdiagnosticdisplayoptions"}}],[11,"all","","Returns the set containing all flags.",84,{"inputs":[],"output":{"name":"cxdiagnosticdisplayoptions"}}],[11,"bits","","Returns the raw value of the flags currently stored.",84,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",84,{"inputs":[{"name":"c_uint"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",84,{"inputs":[{"name":"c_uint"}],"output":{"name":"cxdiagnosticdisplayoptions"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",84,null],[11,"is_all","","Returns `true` if all flags are currently set.",84,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",84,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",84,null],[11,"insert","","Inserts the specified flags in-place.",84,null],[11,"remove","","Removes the specified flags in-place.",84,null],[11,"toggle","","Toggles the specified flags in-place.",84,null],[11,"bitor","","Returns the union of the two sets of flags.",84,null],[11,"bitor_assign","","Adds the set of flags.",84,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",84,null],[11,"bitxor_assign","","Toggles the set of flags.",84,null],[11,"bitand","","Returns the intersection between the two sets of flags.",84,null],[11,"bitand_assign","","Disables all flags disabled in the set.",84,null],[11,"sub","","Returns the set difference of the two sets of flags.",84,null],[11,"sub_assign","","Disables all flags enabled in the set.",84,null],[11,"not","","Returns the complement of this set of flags.",84,null],[11,"extend","","",84,null],[11,"from_iter","","",84,{"inputs":[{"name":"t"}],"output":{"name":"cxdiagnosticdisplayoptions"}}],[11,"eq","","",85,null],[11,"ne","","",85,null],[11,"clone","","",85,null],[11,"partial_cmp","","",85,null],[11,"lt","","",85,null],[11,"le","","",85,null],[11,"gt","","",85,null],[11,"ge","","",85,null],[11,"cmp","","",85,null],[11,"hash","","",85,null],[11,"fmt","","",85,null],[11,"empty","","Returns an empty set of flags.",85,{"inputs":[],"output":{"name":"cxglobaloptflags"}}],[11,"all","","Returns the set containing all flags.",85,{"inputs":[],"output":{"name":"cxglobaloptflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",85,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",85,{"inputs":[{"name":"c_uint"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",85,{"inputs":[{"name":"c_uint"}],"output":{"name":"cxglobaloptflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",85,null],[11,"is_all","","Returns `true` if all flags are currently set.",85,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",85,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",85,null],[11,"insert","","Inserts the specified flags in-place.",85,null],[11,"remove","","Removes the specified flags in-place.",85,null],[11,"toggle","","Toggles the specified flags in-place.",85,null],[11,"bitor","","Returns the union of the two sets of flags.",85,null],[11,"bitor_assign","","Adds the set of flags.",85,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",85,null],[11,"bitxor_assign","","Toggles the set of flags.",85,null],[11,"bitand","","Returns the intersection between the two sets of flags.",85,null],[11,"bitand_assign","","Disables all flags disabled in the set.",85,null],[11,"sub","","Returns the set difference of the two sets of flags.",85,null],[11,"sub_assign","","Disables all flags enabled in the set.",85,null],[11,"not","","Returns the complement of this set of flags.",85,null],[11,"extend","","",85,null],[11,"from_iter","","",85,{"inputs":[{"name":"t"}],"output":{"name":"cxglobaloptflags"}}],[11,"eq","","",86,null],[11,"ne","","",86,null],[11,"clone","","",86,null],[11,"partial_cmp","","",86,null],[11,"lt","","",86,null],[11,"le","","",86,null],[11,"gt","","",86,null],[11,"ge","","",86,null],[11,"cmp","","",86,null],[11,"hash","","",86,null],[11,"fmt","","",86,null],[11,"empty","","Returns an empty set of flags.",86,{"inputs":[],"output":{"name":"cxidxdeclinfoflags"}}],[11,"all","","Returns the set containing all flags.",86,{"inputs":[],"output":{"name":"cxidxdeclinfoflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",86,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",86,{"inputs":[{"name":"c_uint"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",86,{"inputs":[{"name":"c_uint"}],"output":{"name":"cxidxdeclinfoflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",86,null],[11,"is_all","","Returns `true` if all flags are currently set.",86,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",86,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",86,null],[11,"insert","","Inserts the specified flags in-place.",86,null],[11,"remove","","Removes the specified flags in-place.",86,null],[11,"toggle","","Toggles the specified flags in-place.",86,null],[11,"bitor","","Returns the union of the two sets of flags.",86,null],[11,"bitor_assign","","Adds the set of flags.",86,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",86,null],[11,"bitxor_assign","","Toggles the set of flags.",86,null],[11,"bitand","","Returns the intersection between the two sets of flags.",86,null],[11,"bitand_assign","","Disables all flags disabled in the set.",86,null],[11,"sub","","Returns the set difference of the two sets of flags.",86,null],[11,"sub_assign","","Disables all flags enabled in the set.",86,null],[11,"not","","Returns the complement of this set of flags.",86,null],[11,"extend","","",86,null],[11,"from_iter","","",86,{"inputs":[{"name":"t"}],"output":{"name":"cxidxdeclinfoflags"}}],[11,"eq","","",87,null],[11,"ne","","",87,null],[11,"clone","","",87,null],[11,"partial_cmp","","",87,null],[11,"lt","","",87,null],[11,"le","","",87,null],[11,"gt","","",87,null],[11,"ge","","",87,null],[11,"cmp","","",87,null],[11,"hash","","",87,null],[11,"fmt","","",87,null],[11,"empty","","Returns an empty set of flags.",87,{"inputs":[],"output":{"name":"cxindexoptflags"}}],[11,"all","","Returns the set containing all flags.",87,{"inputs":[],"output":{"name":"cxindexoptflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",87,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",87,{"inputs":[{"name":"c_uint"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",87,{"inputs":[{"name":"c_uint"}],"output":{"name":"cxindexoptflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",87,null],[11,"is_all","","Returns `true` if all flags are currently set.",87,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",87,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",87,null],[11,"insert","","Inserts the specified flags in-place.",87,null],[11,"remove","","Removes the specified flags in-place.",87,null],[11,"toggle","","Toggles the specified flags in-place.",87,null],[11,"bitor","","Returns the union of the two sets of flags.",87,null],[11,"bitor_assign","","Adds the set of flags.",87,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",87,null],[11,"bitxor_assign","","Toggles the set of flags.",87,null],[11,"bitand","","Returns the intersection between the two sets of flags.",87,null],[11,"bitand_assign","","Disables all flags disabled in the set.",87,null],[11,"sub","","Returns the set difference of the two sets of flags.",87,null],[11,"sub_assign","","Disables all flags enabled in the set.",87,null],[11,"not","","Returns the complement of this set of flags.",87,null],[11,"extend","","",87,null],[11,"from_iter","","",87,{"inputs":[{"name":"t"}],"output":{"name":"cxindexoptflags"}}],[11,"eq","","",88,null],[11,"ne","","",88,null],[11,"clone","","",88,null],[11,"partial_cmp","","",88,null],[11,"lt","","",88,null],[11,"le","","",88,null],[11,"gt","","",88,null],[11,"ge","","",88,null],[11,"cmp","","",88,null],[11,"hash","","",88,null],[11,"fmt","","",88,null],[11,"empty","","Returns an empty set of flags.",88,{"inputs":[],"output":{"name":"cxnamerefflags"}}],[11,"all","","Returns the set containing all flags.",88,{"inputs":[],"output":{"name":"cxnamerefflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",88,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",88,{"inputs":[{"name":"c_uint"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",88,{"inputs":[{"name":"c_uint"}],"output":{"name":"cxnamerefflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",88,null],[11,"is_all","","Returns `true` if all flags are currently set.",88,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",88,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",88,null],[11,"insert","","Inserts the specified flags in-place.",88,null],[11,"remove","","Removes the specified flags in-place.",88,null],[11,"toggle","","Toggles the specified flags in-place.",88,null],[11,"bitor","","Returns the union of the two sets of flags.",88,null],[11,"bitor_assign","","Adds the set of flags.",88,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",88,null],[11,"bitxor_assign","","Toggles the set of flags.",88,null],[11,"bitand","","Returns the intersection between the two sets of flags.",88,null],[11,"bitand_assign","","Disables all flags disabled in the set.",88,null],[11,"sub","","Returns the set difference of the two sets of flags.",88,null],[11,"sub_assign","","Disables all flags enabled in the set.",88,null],[11,"not","","Returns the complement of this set of flags.",88,null],[11,"extend","","",88,null],[11,"from_iter","","",88,{"inputs":[{"name":"t"}],"output":{"name":"cxnamerefflags"}}],[11,"eq","","",89,null],[11,"ne","","",89,null],[11,"clone","","",89,null],[11,"partial_cmp","","",89,null],[11,"lt","","",89,null],[11,"le","","",89,null],[11,"gt","","",89,null],[11,"ge","","",89,null],[11,"cmp","","",89,null],[11,"hash","","",89,null],[11,"fmt","","",89,null],[11,"empty","","Returns an empty set of flags.",89,{"inputs":[],"output":{"name":"cxobjcdeclqualifierkind"}}],[11,"all","","Returns the set containing all flags.",89,{"inputs":[],"output":{"name":"cxobjcdeclqualifierkind"}}],[11,"bits","","Returns the raw value of the flags currently stored.",89,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",89,{"inputs":[{"name":"c_uint"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",89,{"inputs":[{"name":"c_uint"}],"output":{"name":"cxobjcdeclqualifierkind"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",89,null],[11,"is_all","","Returns `true` if all flags are currently set.",89,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",89,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",89,null],[11,"insert","","Inserts the specified flags in-place.",89,null],[11,"remove","","Removes the specified flags in-place.",89,null],[11,"toggle","","Toggles the specified flags in-place.",89,null],[11,"bitor","","Returns the union of the two sets of flags.",89,null],[11,"bitor_assign","","Adds the set of flags.",89,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",89,null],[11,"bitxor_assign","","Toggles the set of flags.",89,null],[11,"bitand","","Returns the intersection between the two sets of flags.",89,null],[11,"bitand_assign","","Disables all flags disabled in the set.",89,null],[11,"sub","","Returns the set difference of the two sets of flags.",89,null],[11,"sub_assign","","Disables all flags enabled in the set.",89,null],[11,"not","","Returns the complement of this set of flags.",89,null],[11,"extend","","",89,null],[11,"from_iter","","",89,{"inputs":[{"name":"t"}],"output":{"name":"cxobjcdeclqualifierkind"}}],[11,"eq","","",90,null],[11,"ne","","",90,null],[11,"clone","","",90,null],[11,"partial_cmp","","",90,null],[11,"lt","","",90,null],[11,"le","","",90,null],[11,"gt","","",90,null],[11,"ge","","",90,null],[11,"cmp","","",90,null],[11,"hash","","",90,null],[11,"fmt","","",90,null],[11,"empty","","Returns an empty set of flags.",90,{"inputs":[],"output":{"name":"cxobjcpropertyattrkind"}}],[11,"all","","Returns the set containing all flags.",90,{"inputs":[],"output":{"name":"cxobjcpropertyattrkind"}}],[11,"bits","","Returns the raw value of the flags currently stored.",90,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",90,{"inputs":[{"name":"c_uint"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",90,{"inputs":[{"name":"c_uint"}],"output":{"name":"cxobjcpropertyattrkind"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",90,null],[11,"is_all","","Returns `true` if all flags are currently set.",90,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",90,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",90,null],[11,"insert","","Inserts the specified flags in-place.",90,null],[11,"remove","","Removes the specified flags in-place.",90,null],[11,"toggle","","Toggles the specified flags in-place.",90,null],[11,"bitor","","Returns the union of the two sets of flags.",90,null],[11,"bitor_assign","","Adds the set of flags.",90,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",90,null],[11,"bitxor_assign","","Toggles the set of flags.",90,null],[11,"bitand","","Returns the intersection between the two sets of flags.",90,null],[11,"bitand_assign","","Disables all flags disabled in the set.",90,null],[11,"sub","","Returns the set difference of the two sets of flags.",90,null],[11,"sub_assign","","Disables all flags enabled in the set.",90,null],[11,"not","","Returns the complement of this set of flags.",90,null],[11,"extend","","",90,null],[11,"from_iter","","",90,{"inputs":[{"name":"t"}],"output":{"name":"cxobjcpropertyattrkind"}}],[11,"eq","","",91,null],[11,"ne","","",91,null],[11,"clone","","",91,null],[11,"partial_cmp","","",91,null],[11,"lt","","",91,null],[11,"le","","",91,null],[11,"gt","","",91,null],[11,"ge","","",91,null],[11,"cmp","","",91,null],[11,"hash","","",91,null],[11,"fmt","","",91,null],[11,"empty","","Returns an empty set of flags.",91,{"inputs":[],"output":{"name":"cxreparse_flags"}}],[11,"all","","Returns the set containing all flags.",91,{"inputs":[],"output":{"name":"cxreparse_flags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",91,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",91,{"inputs":[{"name":"c_uint"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",91,{"inputs":[{"name":"c_uint"}],"output":{"name":"cxreparse_flags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",91,null],[11,"is_all","","Returns `true` if all flags are currently set.",91,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",91,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",91,null],[11,"insert","","Inserts the specified flags in-place.",91,null],[11,"remove","","Removes the specified flags in-place.",91,null],[11,"toggle","","Toggles the specified flags in-place.",91,null],[11,"bitor","","Returns the union of the two sets of flags.",91,null],[11,"bitor_assign","","Adds the set of flags.",91,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",91,null],[11,"bitxor_assign","","Toggles the set of flags.",91,null],[11,"bitand","","Returns the intersection between the two sets of flags.",91,null],[11,"bitand_assign","","Disables all flags disabled in the set.",91,null],[11,"sub","","Returns the set difference of the two sets of flags.",91,null],[11,"sub_assign","","Disables all flags enabled in the set.",91,null],[11,"not","","Returns the complement of this set of flags.",91,null],[11,"extend","","",91,null],[11,"from_iter","","",91,{"inputs":[{"name":"t"}],"output":{"name":"cxreparse_flags"}}],[11,"eq","","",92,null],[11,"ne","","",92,null],[11,"clone","","",92,null],[11,"partial_cmp","","",92,null],[11,"lt","","",92,null],[11,"le","","",92,null],[11,"gt","","",92,null],[11,"ge","","",92,null],[11,"cmp","","",92,null],[11,"hash","","",92,null],[11,"fmt","","",92,null],[11,"empty","","Returns an empty set of flags.",92,{"inputs":[],"output":{"name":"cxsavetranslationunit_flags"}}],[11,"all","","Returns the set containing all flags.",92,{"inputs":[],"output":{"name":"cxsavetranslationunit_flags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",92,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",92,{"inputs":[{"name":"c_uint"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",92,{"inputs":[{"name":"c_uint"}],"output":{"name":"cxsavetranslationunit_flags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",92,null],[11,"is_all","","Returns `true` if all flags are currently set.",92,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",92,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",92,null],[11,"insert","","Inserts the specified flags in-place.",92,null],[11,"remove","","Removes the specified flags in-place.",92,null],[11,"toggle","","Toggles the specified flags in-place.",92,null],[11,"bitor","","Returns the union of the two sets of flags.",92,null],[11,"bitor_assign","","Adds the set of flags.",92,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",92,null],[11,"bitxor_assign","","Toggles the set of flags.",92,null],[11,"bitand","","Returns the intersection between the two sets of flags.",92,null],[11,"bitand_assign","","Disables all flags disabled in the set.",92,null],[11,"sub","","Returns the set difference of the two sets of flags.",92,null],[11,"sub_assign","","Disables all flags enabled in the set.",92,null],[11,"not","","Returns the complement of this set of flags.",92,null],[11,"extend","","",92,null],[11,"from_iter","","",92,{"inputs":[{"name":"t"}],"output":{"name":"cxsavetranslationunit_flags"}}],[11,"eq","","",93,null],[11,"ne","","",93,null],[11,"clone","","",93,null],[11,"partial_cmp","","",93,null],[11,"lt","","",93,null],[11,"le","","",93,null],[11,"gt","","",93,null],[11,"ge","","",93,null],[11,"cmp","","",93,null],[11,"hash","","",93,null],[11,"fmt","","",93,null],[11,"empty","","Returns an empty set of flags.",93,{"inputs":[],"output":{"name":"cxtranslationunit_flags"}}],[11,"all","","Returns the set containing all flags.",93,{"inputs":[],"output":{"name":"cxtranslationunit_flags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",93,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",93,{"inputs":[{"name":"c_uint"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",93,{"inputs":[{"name":"c_uint"}],"output":{"name":"cxtranslationunit_flags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",93,null],[11,"is_all","","Returns `true` if all flags are currently set.",93,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",93,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",93,null],[11,"insert","","Inserts the specified flags in-place.",93,null],[11,"remove","","Removes the specified flags in-place.",93,null],[11,"toggle","","Toggles the specified flags in-place.",93,null],[11,"bitor","","Returns the union of the two sets of flags.",93,null],[11,"bitor_assign","","Adds the set of flags.",93,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",93,null],[11,"bitxor_assign","","Toggles the set of flags.",93,null],[11,"bitand","","Returns the intersection between the two sets of flags.",93,null],[11,"bitand_assign","","Disables all flags disabled in the set.",93,null],[11,"sub","","Returns the set difference of the two sets of flags.",93,null],[11,"sub_assign","","Disables all flags enabled in the set.",93,null],[11,"not","","Returns the complement of this set of flags.",93,null],[11,"extend","","",93,null],[11,"from_iter","","",93,{"inputs":[{"name":"t"}],"output":{"name":"cxtranslationunit_flags"}}],[11,"clone","","",0,null],[11,"fmt","","",0,null],[11,"default","","",0,{"inputs":[],"output":{"name":"cxcompilationdatabase"}}],[11,"deref","","",0,null],[11,"clone","","",1,null],[11,"fmt","","",1,null],[11,"default","","",1,{"inputs":[],"output":{"name":"cxcompilecommand"}}],[11,"deref","","",1,null],[11,"clone","","",2,null],[11,"fmt","","",2,null],[11,"default","","",2,{"inputs":[],"output":{"name":"cxcompilecommands"}}],[11,"deref","","",2,null],[11,"clone","","",3,null],[11,"fmt","","",3,null],[11,"default","","",3,{"inputs":[],"output":{"name":"cxcompletionstring"}}],[11,"deref","","",3,null],[11,"clone","","",4,null],[11,"fmt","","",4,null],[11,"default","","",4,{"inputs":[],"output":{"name":"cxcursorset"}}],[11,"deref","","",4,null],[11,"clone","","",5,null],[11,"fmt","","",5,null],[11,"default","","",5,{"inputs":[],"output":{"name":"cxdiagnostic"}}],[11,"deref","","",5,null],[11,"clone","","",6,null],[11,"fmt","","",6,null],[11,"default","","",6,{"inputs":[],"output":{"name":"cxdiagnosticset"}}],[11,"deref","","",6,null],[11,"clone","","",7,null],[11,"fmt","","",7,null],[11,"default","","",7,{"inputs":[],"output":{"name":"cxfile"}}],[11,"deref","","",7,null],[11,"clone","","",8,null],[11,"fmt","","",8,null],[11,"default","","",8,{"inputs":[],"output":{"name":"cxidxclientastfile"}}],[11,"deref","","",8,null],[11,"clone","","",9,null],[11,"fmt","","",9,null],[11,"default","","",9,{"inputs":[],"output":{"name":"cxidxclientcontainer"}}],[11,"deref","","",9,null],[11,"clone","","",10,null],[11,"fmt","","",10,null],[11,"default","","",10,{"inputs":[],"output":{"name":"cxidxcliententity"}}],[11,"deref","","",10,null],[11,"clone","","",11,null],[11,"fmt","","",11,null],[11,"default","","",11,{"inputs":[],"output":{"name":"cxidxclientfile"}}],[11,"deref","","",11,null],[11,"clone","","",12,null],[11,"fmt","","",12,null],[11,"default","","",12,{"inputs":[],"output":{"name":"cxindex"}}],[11,"deref","","",12,null],[11,"clone","","",13,null],[11,"fmt","","",13,null],[11,"default","","",13,{"inputs":[],"output":{"name":"cxindexaction"}}],[11,"deref","","",13,null],[11,"clone","","",14,null],[11,"fmt","","",14,null],[11,"default","","",14,{"inputs":[],"output":{"name":"cxmodule"}}],[11,"deref","","",14,null],[11,"clone","","",15,null],[11,"fmt","","",15,null],[11,"default","","",15,{"inputs":[],"output":{"name":"cxremapping"}}],[11,"deref","","",15,null],[11,"clone","","",16,null],[11,"fmt","","",16,null],[11,"default","","",16,{"inputs":[],"output":{"name":"cxtranslationunit"}}],[11,"deref","","",16,null],[11,"clone","","",17,null],[11,"fmt","","",17,null],[11,"default","","",17,{"inputs":[],"output":{"name":"cxcodecompleteresults"}}],[11,"clone","","",18,null],[11,"fmt","","",18,null],[11,"default","","",18,{"inputs":[],"output":{"name":"cxcomment"}}],[11,"clone","","",19,null],[11,"fmt","","",19,null],[11,"default","","",19,{"inputs":[],"output":{"name":"cxcompletionresult"}}],[11,"clone","","",20,null],[11,"fmt","","",20,null],[11,"default","","",20,{"inputs":[],"output":{"name":"cxcursor"}}],[11,"clone","","",21,null],[11,"fmt","","",21,null],[11,"default","","",21,{"inputs":[],"output":{"name":"cxcursorandrangevisitor"}}],[11,"clone","","",22,null],[11,"fmt","","",22,null],[11,"default","","",22,{"inputs":[],"output":{"name":"cxfileuniqueid"}}],[11,"clone","","",23,null],[11,"fmt","","",23,null],[11,"default","","",23,{"inputs":[],"output":{"name":"cxidxattrinfo"}}],[11,"clone","","",24,null],[11,"fmt","","",24,null],[11,"default","","",24,{"inputs":[],"output":{"name":"cxidxbaseclassinfo"}}],[11,"clone","","",25,null],[11,"fmt","","",25,null],[11,"default","","",25,{"inputs":[],"output":{"name":"cxidxcxxclassdeclinfo"}}],[11,"clone","","",26,null],[11,"fmt","","",26,null],[11,"default","","",26,{"inputs":[],"output":{"name":"cxidxcontainerinfo"}}],[11,"clone","","",27,null],[11,"fmt","","",27,null],[11,"default","","",27,{"inputs":[],"output":{"name":"cxidxdeclinfo"}}],[11,"clone","","",28,null],[11,"fmt","","",28,null],[11,"default","","",28,{"inputs":[],"output":{"name":"cxidxentityinfo"}}],[11,"clone","","",29,null],[11,"fmt","","",29,null],[11,"default","","",29,{"inputs":[],"output":{"name":"cxidxentityrefinfo"}}],[11,"clone","","",30,null],[11,"fmt","","",30,null],[11,"default","","",30,{"inputs":[],"output":{"name":"cxidxiboutletcollectionattrinfo"}}],[11,"clone","","",31,null],[11,"fmt","","",31,null],[11,"default","","",31,{"inputs":[],"output":{"name":"cxidximportedastfileinfo"}}],[11,"clone","","",32,null],[11,"fmt","","",32,null],[11,"default","","",32,{"inputs":[],"output":{"name":"cxidxincludedfileinfo"}}],[11,"clone","","",33,null],[11,"fmt","","",33,null],[11,"default","","",33,{"inputs":[],"output":{"name":"cxidxloc"}}],[11,"clone","","",34,null],[11,"fmt","","",34,null],[11,"default","","",34,{"inputs":[],"output":{"name":"cxidxobjccategorydeclinfo"}}],[11,"clone","","",35,null],[11,"fmt","","",35,null],[11,"default","","",35,{"inputs":[],"output":{"name":"cxidxobjccontainerdeclinfo"}}],[11,"clone","","",36,null],[11,"fmt","","",36,null],[11,"default","","",36,{"inputs":[],"output":{"name":"cxidxobjcinterfacedeclinfo"}}],[11,"clone","","",37,null],[11,"fmt","","",37,null],[11,"default","","",37,{"inputs":[],"output":{"name":"cxidxobjcpropertydeclinfo"}}],[11,"clone","","",38,null],[11,"fmt","","",38,null],[11,"default","","",38,{"inputs":[],"output":{"name":"cxidxobjcprotocolrefinfo"}}],[11,"clone","","",39,null],[11,"fmt","","",39,null],[11,"default","","",39,{"inputs":[],"output":{"name":"cxidxobjcprotocolreflistinfo"}}],[11,"clone","","",40,null],[11,"fmt","","",40,null],[11,"default","","",40,{"inputs":[],"output":{"name":"cxplatformavailability"}}],[11,"clone","","",41,null],[11,"fmt","","",41,null],[11,"default","","",41,{"inputs":[],"output":{"name":"cxsourcelocation"}}],[11,"clone","","",42,null],[11,"fmt","","",42,null],[11,"default","","",42,{"inputs":[],"output":{"name":"cxsourcerange"}}],[11,"clone","","",43,null],[11,"fmt","","",43,null],[11,"default","","",43,{"inputs":[],"output":{"name":"cxsourcerangelist"}}],[11,"clone","","",44,null],[11,"fmt","","",44,null],[11,"default","","",44,{"inputs":[],"output":{"name":"cxstring"}}],[11,"clone","","",45,null],[11,"fmt","","",45,null],[11,"default","","",45,{"inputs":[],"output":{"name":"cxturesourceusage"}}],[11,"clone","","",46,null],[11,"fmt","","",46,null],[11,"default","","",46,{"inputs":[],"output":{"name":"cxturesourceusageentry"}}],[11,"clone","","",47,null],[11,"fmt","","",47,null],[11,"default","","",47,{"inputs":[],"output":{"name":"cxtoken"}}],[11,"clone","","",48,null],[11,"fmt","","",48,null],[11,"default","","",48,{"inputs":[],"output":{"name":"cxtype"}}],[11,"clone","","",49,null],[11,"fmt","","",49,null],[11,"default","","",49,{"inputs":[],"output":{"name":"cxunsavedfile"}}],[11,"clone","","",50,null],[11,"fmt","","",50,null],[11,"default","","",50,{"inputs":[],"output":{"name":"cxversion"}}],[11,"clone","","",51,null],[11,"fmt","","",51,null],[11,"default","","",51,{"inputs":[],"output":{"name":"indexercallbacks"}}]],"paths":[[3,"CXCompilationDatabase"],[3,"CXCompileCommand"],[3,"CXCompileCommands"],[3,"CXCompletionString"],[3,"CXCursorSet"],[3,"CXDiagnostic"],[3,"CXDiagnosticSet"],[3,"CXFile"],[3,"CXIdxClientASTFile"],[3,"CXIdxClientContainer"],[3,"CXIdxClientEntity"],[3,"CXIdxClientFile"],[3,"CXIndex"],[3,"CXIndexAction"],[3,"CXModule"],[3,"CXRemapping"],[3,"CXTranslationUnit"],[3,"CXCodeCompleteResults"],[3,"CXComment"],[3,"CXCompletionResult"],[3,"CXCursor"],[3,"CXCursorAndRangeVisitor"],[3,"CXFileUniqueID"],[3,"CXIdxAttrInfo"],[3,"CXIdxBaseClassInfo"],[3,"CXIdxCXXClassDeclInfo"],[3,"CXIdxContainerInfo"],[3,"CXIdxDeclInfo"],[3,"CXIdxEntityInfo"],[3,"CXIdxEntityRefInfo"],[3,"CXIdxIBOutletCollectionAttrInfo"],[3,"CXIdxImportedASTFileInfo"],[3,"CXIdxIncludedFileInfo"],[3,"CXIdxLoc"],[3,"CXIdxObjCCategoryDeclInfo"],[3,"CXIdxObjCContainerDeclInfo"],[3,"CXIdxObjCInterfaceDeclInfo"],[3,"CXIdxObjCPropertyDeclInfo"],[3,"CXIdxObjCProtocolRefInfo"],[3,"CXIdxObjCProtocolRefListInfo"],[3,"CXPlatformAvailability"],[3,"CXSourceLocation"],[3,"CXSourceRange"],[3,"CXSourceRangeList"],[3,"CXString"],[3,"CXTUResourceUsage"],[3,"CXTUResourceUsageEntry"],[3,"CXToken"],[3,"CXType"],[3,"CXUnsavedFile"],[3,"CXVersion"],[3,"IndexerCallbacks"],[4,"CXAvailabilityKind"],[4,"CXCallingConv"],[4,"CXChildVisitResult"],[4,"CXCommentInlineCommandRenderKind"],[4,"CXCommentKind"],[4,"CXCommentParamPassDirection"],[4,"CXCompilationDatabase_Error"],[4,"CXCompletionChunkKind"],[4,"CXCursorKind"],[4,"CXDiagnosticSeverity"],[4,"CXErrorCode"],[4,"CXIdxAttrKind"],[4,"CXIdxEntityCXXTemplateKind"],[4,"CXIdxEntityKind"],[4,"CXIdxEntityLanguage"],[4,"CXIdxEntityRefKind"],[4,"CXIdxObjCContainerKind"],[4,"CXLanguageKind"],[4,"CXLinkageKind"],[4,"CXLoadDiag_Error"],[4,"CXRefQualifierKind"],[4,"CXResult"],[4,"CXSaveError"],[4,"CXTUResourceUsageKind"],[4,"CXTokenKind"],[4,"CXTypeKind"],[4,"CXTypeLayoutError"],[4,"CXVisitorResult"],[4,"CX_CXXAccessSpecifier"],[3,"Clang"],[3,"CXCodeComplete_Flags"],[3,"CXCompletionContext"],[3,"CXDiagnosticDisplayOptions"],[3,"CXGlobalOptFlags"],[3,"CXIdxDeclInfoFlags"],[3,"CXIndexOptFlags"],[3,"CXNameRefFlags"],[3,"CXObjCDeclQualifierKind"],[3,"CXObjCPropertyAttrKind"],[3,"CXReparse_Flags"],[3,"CXSaveTranslationUnit_Flags"],[3,"CXTranslationUnit_Flags"]]};
searchIndex["tendril"] = {"doc":"","items":[[3,"Tendril","tendril","Compact string type for zero-copy parsing.",null,null],[3,"SendTendril","","A simple wrapper to make `Tendril` `Send`.",null,null],[3,"Atomic","","A marker of an atomic (and hence concurrent) tendril.",null,null],[3,"NonAtomic","","A marker of a non-atomic tendril.",null,null],[4,"SubtendrilError","","Errors that can occur when slicing a `Tendril`.",null,null],[13,"OutOfBounds","","",0,null],[13,"ValidationFailed","","",0,null],[0,"fmt","","Marker types for formats.",null,null],[3,"Bytes","tendril::fmt","Marker type for uninterpreted bytes.",null,null],[3,"ASCII","","Marker type for ASCII text.",null,null],[3,"UTF8","","Marker type for UTF-8 text.",null,null],[3,"WTF8","","Marker type for WTF-8 text.",null,null],[3,"Latin1","","Marker type for the single-byte encoding of the first 256 Unicode codepoints.",null,null],[0,"imp","","Implementation details.",null,null],[3,"Fixup","tendril::fmt::imp","Describes how to fix up encodings when concatenating.",null,null],[12,"drop_left","","",1,null],[12,"drop_right","","",1,null],[12,"insert_len","","",1,null],[12,"insert_bytes","","",1,null],[3,"SingleByteCharIndices","","",null,null],[11,"default","","",1,{"inputs":[],"output":{"name":"fixup"}}],[11,"next","","",2,null],[11,"new","","",2,null],[8,"Format","tendril::fmt","Trait for format marker types.",null,null],[10,"validate","","Check whether the buffer is valid for this format.",3,null],[11,"validate_prefix","","Check whether the buffer is valid for this format.",3,null],[11,"validate_suffix","","Check whether the buffer is valid for this format.",3,null],[11,"validate_subseq","","Check whether the buffer is valid for this format.",3,null],[11,"fixup","","Compute any fixup needed when concatenating buffers.",3,null],[8,"SubsetOf","","Indicates that one format is a subset of another.",null,null],[11,"revalidate_subset","","Validate the *other* direction of conversion; check if\nthis buffer from the superset format conforms to the\nsubset format.",4,null],[8,"SliceFormat","","Indicates a format which corresponds to a Rust slice type,\nrepresenting exactly the same invariants.",null,null],[16,"Slice","","",5,null],[8,"CharFormat","","Indicates a format which contains characters from Unicode\n(all of it, or some proper subset).",null,null],[16,"Iter","","Iterator for characters and their byte indices.",6,null],[10,"char_indices","","Iterate over the characters of the string and their byte\nindices.",6,null],[10,"encode_char","","Encode the character as bytes and pass them to a continuation.",6,{"inputs":[{"name":"char"},{"name":"f"}],"output":{"name":"result"}}],[8,"Slice","","Indicates a Rust slice type that is represented in memory as bytes.",null,null],[10,"as_bytes","","Access the raw bytes of the slice.",7,null],[10,"from_bytes","","Convert a byte slice to this kind of slice.",7,null],[10,"from_mut_bytes","","Convert a byte slice to this kind of slice.",7,null],[11,"clone","","",8,null],[11,"default","","",8,{"inputs":[],"output":{"name":"bytes"}}],[11,"fmt","","",8,null],[11,"validate","","",8,null],[11,"clone","","",9,null],[11,"default","","",9,{"inputs":[],"output":{"name":"ascii"}}],[11,"fmt","","",9,null],[11,"validate","","",9,null],[11,"validate_prefix","","",9,null],[11,"validate_suffix","","",9,null],[11,"validate_subseq","","",9,null],[11,"char_indices","","",9,null],[11,"encode_char","","",9,{"inputs":[{"name":"char"},{"name":"f"}],"output":{"name":"result"}}],[11,"clone","","",10,null],[11,"default","","",10,{"inputs":[],"output":{"name":"utf8"}}],[11,"fmt","","",10,null],[11,"validate","","",10,null],[11,"validate_prefix","","",10,null],[11,"validate_suffix","","",10,null],[11,"validate_subseq","","",10,null],[11,"char_indices","","",10,null],[11,"encode_char","","",10,{"inputs":[{"name":"char"},{"name":"f"}],"output":{"name":"result"}}],[11,"clone","","",11,null],[11,"default","","",11,{"inputs":[],"output":{"name":"wtf8"}}],[11,"fmt","","",11,null],[11,"validate","","",11,null],[11,"validate_prefix","","",11,null],[11,"validate_suffix","","",11,null],[11,"validate_subseq","","",11,null],[11,"fixup","","",11,null],[11,"clone","","",12,null],[11,"default","","",12,{"inputs":[],"output":{"name":"latin1"}}],[11,"fmt","","",12,null],[11,"validate","","",12,null],[11,"validate_prefix","","",12,null],[11,"validate_suffix","","",12,null],[11,"validate_subseq","","",12,null],[11,"char_indices","","",12,null],[11,"encode_char","","",12,{"inputs":[{"name":"char"},{"name":"f"}],"output":{"name":"result"}}],[0,"stream","tendril","Streams of tendrils.",null,null],[3,"Utf8LossyDecoder","tendril::stream","A `TendrilSink` adaptor that takes bytes, decodes them as UTF-8,\nlossily replace ill-formed byte sequences with U+FFFD replacement characters,\nand emits Unicode (`StrTendril`).",null,null],[12,"inner_sink","","",13,null],[3,"LossyDecoder","","A `TendrilSink` adaptor that takes bytes, decodes them as the given character encoding,\nlossily replace ill-formed byte sequences with U+FFFD replacement characters,\nand emits Unicode (`StrTendril`).",null,null],[8,"TendrilSink","","Trait for types that can process a tendril.",null,null],[10,"process","","Process this tendril.",14,null],[10,"error","","Indicates that an error has occurred.",14,null],[16,"Output","","What the overall result of processing is.",14,null],[10,"finish","","Indicates the end of the stream.",14,null],[11,"one","","Process one tendril and finish.",14,null],[11,"from_iter","","Consume an iterator of tendrils, processing each item, then finish.",14,null],[11,"read_from","","Read from the given stream of bytes until exhaustion and process incrementally,\nthen finish. Return `Err` at the first I/O error.",14,null],[11,"from_file","","Read from the file at the given path and process incrementally,\nthen finish. Return `Err` at the first I/O error.",14,null],[11,"new","","Create a new incremental UTF-8 decoder.",13,{"inputs":[{"name":"sink"}],"output":{"name":"self"}}],[11,"process","","",13,null],[11,"error","","",13,null],[11,"finish","","",13,null],[11,"new","","Create a new incremental decoder.",15,{"inputs":[{"name":"encodingref"},{"name":"sink"}],"output":{"name":"lossydecoder"}}],[11,"utf8","","Create a new incremental decoder for the UTF-8 encoding.",15,{"inputs":[{"name":"sink"}],"output":{"name":"lossydecoder"}}],[11,"inner_sink","","Give a reference to the inner sink.",15,null],[11,"inner_sink_mut","","Give a mutable reference to the inner sink.",15,null],[11,"process","","",15,null],[11,"error","","",15,null],[11,"finish","","",15,null],[0,"encoding","tendril","Re-export the rust-encoding crate.",null,null],[11,"new","","",16,{"inputs":[],"output":{"name":"self"}}],[11,"increment","","",16,null],[11,"decrement","","",16,null],[11,"fence_acquire","","",16,{"inputs":[],"output":null}],[11,"new","","",17,{"inputs":[],"output":{"name":"self"}}],[11,"increment","","",17,null],[11,"decrement","","",17,null],[11,"fence_acquire","","",17,{"inputs":[],"output":null}],[11,"clone","","",0,null],[11,"hash","","",0,null],[11,"fmt","","",0,null],[11,"eq","","",0,null],[11,"clone","","",18,null],[11,"drop","","",18,null],[11,"extend","","",18,null],[11,"from_iter","","",18,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"extend","","",18,null],[11,"from_iter","","",18,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"extend","","",18,null],[11,"from_iter","","",18,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"extend","","",18,null],[11,"from_iter","","",18,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"extend","","",18,null],[11,"from_iter","","",18,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"extend","","",18,null],[11,"from_iter","","",18,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"deref","","",18,null],[11,"deref_mut","","",18,null],[11,"borrow","","",18,null],[11,"eq","","",18,null],[11,"ne","","",18,null],[11,"partial_cmp","","",18,null],[11,"cmp","","",18,null],[11,"default","","",18,{"inputs":[],"output":{"name":"tendril"}}],[11,"fmt","","",18,null],[11,"hash","","",18,null],[11,"new","","Create a new, empty `Tendril` in any format.",18,{"inputs":[],"output":{"name":"tendril"}}],[11,"with_capacity","","Create a new, empty `Tendril` with a specified capacity.",18,{"inputs":[{"name":"u32"}],"output":{"name":"tendril"}}],[11,"reserve","","Reserve space for additional bytes.",18,null],[11,"len32","","Get the length of the `Tendril`.",18,null],[11,"is_shared","","Is the backing buffer shared?",18,null],[11,"is_shared_with","","Is the backing buffer shared with this other `Tendril`?",18,null],[11,"clear","","Truncate to length 0 without discarding any owned storage.",18,null],[11,"try_from_byte_slice","","Build a `Tendril` by copying a byte slice, if it conforms to the format.",18,null],[11,"as_bytes","","View as uninterpreted bytes.",18,null],[11,"into_bytes","","Convert into uninterpreted bytes.",18,null],[11,"into_send","","Convert `self` into a type which is `Send`.",18,null],[11,"as_superset","","View as a superset format, for free.",18,null],[11,"into_superset","","Convert into a superset format, for free.",18,null],[11,"try_as_subset","","View as a subset format, if the `Tendril` conforms to that subset.",18,null],[11,"try_into_subset","","Convert into a subset format, if the `Tendril` conforms to that subset.",18,null],[11,"try_reinterpret_view","","View as another format, if the bytes of the `Tendril` are valid for\nthat format.",18,null],[11,"try_reinterpret","","Convert into another format, if the `Tendril` conforms to that format.",18,null],[11,"try_push_bytes","","Push some bytes onto the end of the `Tendril`, if they conform to the\nformat.",18,null],[11,"push_tendril","","Push another `Tendril` onto the end of this one.",18,null],[11,"try_subtendril","","Attempt to slice this `Tendril` as a new `Tendril`.",18,null],[11,"subtendril","","Slice this `Tendril` as a new `Tendril`.",18,null],[11,"try_pop_front","","Try to drop `n` bytes from the front.",18,null],[11,"pop_front","","Drop `n` bytes from the front.",18,null],[11,"try_pop_back","","Drop `n` bytes from the back.",18,null],[11,"pop_back","","Drop `n` bytes from the back.",18,null],[11,"reinterpret_view_without_validating","","View as another format, without validating.",18,null],[11,"reinterpret_without_validating","","Convert into another format, without validating.",18,null],[11,"from_byte_slice_without_validating","","Build a `Tendril` by copying a byte slice, without validating.",18,null],[11,"push_bytes_without_validating","","Push some bytes onto the end of the `Tendril`, without validating.",18,null],[11,"unsafe_subtendril","","Slice this `Tendril` as a new `Tendril`.",18,null],[11,"unsafe_pop_front","","Drop `n` bytes from the front.",18,null],[11,"unsafe_pop_back","","Drop `n` bytes from the back.",18,null],[11,"from_slice","","Build a `Tendril` by copying a slice.",18,{"inputs":[{"name":"slice"}],"output":{"name":"tendril"}}],[11,"push_slice","","Push a slice onto the end of the `Tendril`.",18,null],[11,"from","","",19,{"inputs":[{"name":"tendril"}],"output":{"name":"sendtendril"}}],[11,"from","","",18,{"inputs":[{"name":"sendtendril"}],"output":{"name":"tendril"}}],[11,"pop_front_char","","Remove and return the first character, if any.",18,null],[11,"pop_front_char_run","","Remove and return a run of characters at the front of the `Tendril`\nwhich are classified the same according to the function `classify`.",18,null],[11,"try_push_char","","Push a character, if it can be represented in this format.",18,null],[11,"write","","",18,null],[11,"write_all","","",18,null],[11,"flush","","",18,null],[11,"write_byte","","",18,null],[11,"write_bytes","","",18,null],[11,"writer_hint","","",18,null],[11,"decode","","Decode from some character encoding into UTF-8.",18,null],[11,"push_uninitialized","","Push &quot;uninitialized bytes&quot; onto the end.",18,null],[11,"fmt","","",18,null],[11,"from_str","","",18,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"write_str","","",18,null],[11,"write_char","","",18,null],[11,"write_str","","",18,null],[11,"writer_hint","","",18,null],[11,"encode","","Encode from UTF-8 into some other character encoding.",18,null],[11,"push_char","","Push a character onto the end.",18,null],[11,"from_char","","Create a `Tendril` from a single character.",18,{"inputs":[{"name":"char"}],"output":{"name":"tendril"}}],[11,"format","","Helper for the `format_tendril!` macro.",18,{"inputs":[{"name":"arguments"}],"output":{"name":"tendril"}}],[11,"from","","",18,{"inputs":[{"name":"slice"}],"output":{"name":"tendril"}}],[11,"from","","",18,{"inputs":[{"name":"string"}],"output":{"name":"tendril"}}],[11,"as_ref","","",18,null],[6,"ByteTendril","","`Tendril` for storing binary data.",null,null],[6,"StrTendril","","`Tendril` for storing native Rust strings.",null,null],[8,"SliceExt","","`Tendril`-related methods for Rust slices.",null,null],[11,"to_tendril","","Make a `Tendril` from this slice.",20,null],[8,"ReadExt","","Extension trait for `io::Read`.",null,null],[10,"read_to_tendril","","",21,null],[8,"Atomicity","","The multithreadedness of a tendril.",null,null],[14,"format_tendril","","Create a `StrTendril` through string formatting.",null,null],[11,"to_tendril","","Make a `Tendril` from this slice.",20,null]],"paths":[[4,"SubtendrilError"],[3,"Fixup"],[3,"SingleByteCharIndices"],[8,"Format"],[8,"SubsetOf"],[8,"SliceFormat"],[8,"CharFormat"],[8,"Slice"],[3,"Bytes"],[3,"ASCII"],[3,"UTF8"],[3,"WTF8"],[3,"Latin1"],[3,"Utf8LossyDecoder"],[8,"TendrilSink"],[3,"LossyDecoder"],[3,"NonAtomic"],[3,"Atomic"],[3,"Tendril"],[3,"SendTendril"],[8,"SliceExt"],[8,"ReadExt"]]};
searchIndex["backtrace"] = {"doc":"A library for acquiring a backtrace at runtime","items":[[3,"SymbolName","backtrace","A wrapper around a symbol name to provide ergonomic accessors to the\ndemangled name, the raw bytes, the raw string, etc.",null,null],[3,"Backtrace","","Representation of an owned and self-contained backtrace.",null,null],[3,"BacktraceFrame","","Captured version of a frame in a backtrace.",null,null],[3,"BacktraceSymbol","","Captured version of a symbol in a backtrace.",null,null],[5,"trace","","Inspects the current call-stack, passing all active frames into the closure\nprovided to calculate a stack trace.",null,{"inputs":[{"name":"f"}],"output":null}],[5,"resolve","","Resolve an address to a symbol, passing the symbol to the specified\nclosure.",null,null],[11,"new","","Creates a new symbol name from the raw underlying bytes.",0,null],[11,"as_str","","Returns the raw symbol name as `&amp;str` if the symbols is valid utf-8.",0,null],[11,"as_bytes","","Returns the raw symbol name as a list of bytes",0,null],[11,"fmt","","",0,null],[11,"fmt","","",0,null],[11,"clone","","",1,null],[11,"clone","","",2,null],[11,"clone","","",3,null],[11,"new","","Captures a backtrace at the callsite of this function, returning an\nowned representation.",1,{"inputs":[],"output":{"name":"backtrace"}}],[11,"frames","","Returns the frames from when this backtrace was captured.",1,null],[11,"ip","","",2,null],[11,"symbol_address","","",2,null],[11,"symbols","","Returns the list of symbols that this frame corresponds to.",2,null],[11,"name","","",3,null],[11,"addr","","",3,null],[11,"filename","","",3,null],[11,"lineno","","",3,null],[11,"fmt","","",1,null],[11,"default","","",1,{"inputs":[],"output":{"name":"backtrace"}}],[8,"Frame","","A trait representing one frame of a backtrace, yielded to the `trace`\nfunction of this crate.",null,null],[10,"ip","","Returns the current instruction pointer of this frame.",4,null],[10,"symbol_address","","Returns the starting symbol address of the frame of this function.",4,null],[8,"Symbol","","A trait representing the resolution of a symbol in a file.",null,null],[11,"name","","Returns the name of this function.",5,null],[11,"addr","","Returns the starting address of this function.",5,null],[11,"filename","","Returns the file name where this function was defined.",5,null],[11,"lineno","","Returns the line number for where this symbol is currently executing.",5,null],[11,"fmt","","",4,null],[11,"name","","Returns the name of this function.",5,null],[11,"addr","","Returns the starting address of this function.",5,null],[11,"filename","","Returns the file name where this function was defined.",5,null],[11,"lineno","","Returns the line number for where this symbol is currently executing.",5,null],[11,"fmt","","",5,null]],"paths":[[3,"SymbolName"],[3,"Backtrace"],[3,"BacktraceFrame"],[3,"BacktraceSymbol"],[8,"Frame"],[8,"Symbol"]]};
searchIndex["time"] = {"doc":"Simple time handling.","items":[[3,"Duration","time","ISO 8601 time duration with nanosecond precision.\nThis also allows for the negative duration; see individual methods for details.",null,null],[3,"OutOfRangeError","","Represents error when converting `Duration` to/from a standard library\nimplementation",null,null],[3,"Timespec","","A record specifying a time value in seconds and nanoseconds, where\nnanoseconds represent the offset from the given second.",null,null],[12,"sec","","",0,null],[12,"nsec","","",0,null],[3,"PreciseTime","","An opaque structure representing a moment in time.",null,null],[3,"SteadyTime","","A structure representing a moment in time.",null,null],[3,"Tm","","Holds a calendar date and time broken down into its components (year, month,\nday, and so on), also called a broken-down time value.",null,null],[12,"tm_sec","","Seconds after the minute - [0, 60]",1,null],[12,"tm_min","","Minutes after the hour - [0, 59]",1,null],[12,"tm_hour","","Hours after midnight - [0, 23]",1,null],[12,"tm_mday","","Day of the month - [1, 31]",1,null],[12,"tm_mon","","Months since January - [0, 11]",1,null],[12,"tm_year","","Years since 1900",1,null],[12,"tm_wday","","Days since Sunday - [0, 6]. 0 = Sunday, 1 = Monday, ..., 6 = Saturday.",1,null],[12,"tm_yday","","Days since January 1 - [0, 365]",1,null],[12,"tm_isdst","","Daylight Saving Time flag.",1,null],[12,"tm_utcoff","","Identifies the time zone that was used to compute this broken-down time\nvalue, including any adjustment for Daylight Saving Time. This is the\nnumber of seconds east of UTC. For example, for U.S. Pacific Daylight\nTime, the value is -7*60*60 = -25200.",1,null],[12,"tm_nsec","","Nanoseconds after the second - [0, 10&lt;sup&gt;9&lt;/sup&gt; - 1]",1,null],[3,"TmFmt","","A wrapper around a `Tm` and format string that implements Display.",null,null],[4,"ParseError","","",null,null],[13,"InvalidSecond","","",2,null],[13,"InvalidMinute","","",2,null],[13,"InvalidHour","","",2,null],[13,"InvalidDay","","",2,null],[13,"InvalidMonth","","",2,null],[13,"InvalidYear","","",2,null],[13,"InvalidDayOfWeek","","",2,null],[13,"InvalidDayOfMonth","","",2,null],[13,"InvalidDayOfYear","","",2,null],[13,"InvalidZoneOffset","","",2,null],[13,"InvalidTime","","",2,null],[13,"InvalidSecondsSinceEpoch","","",2,null],[13,"MissingFormatConverter","","",2,null],[13,"InvalidFormatSpecifier","","",2,null],[13,"UnexpectedCharacter","","",2,null],[5,"strptime","","Parses the time from the string according to the format string.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[5,"get_time","","Returns the current time as a `timespec` containing the seconds and\nnanoseconds since 1970-01-01T00:00:00Z.",null,{"inputs":[],"output":{"name":"timespec"}}],[5,"precise_time_ns","","Returns the current value of a high-resolution performance counter\nin nanoseconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"u64"}}],[5,"precise_time_s","","Returns the current value of a high-resolution performance counter\nin seconds since an unspecified epoch.",null,{"inputs":[],"output":{"name":"f64"}}],[5,"tzset","","",null,{"inputs":[],"output":null}],[5,"empty_tm","","",null,{"inputs":[],"output":{"name":"tm"}}],[5,"at_utc","","Returns the specified time in UTC",null,{"inputs":[{"name":"timespec"}],"output":{"name":"tm"}}],[5,"now_utc","","Returns the current time in UTC",null,{"inputs":[],"output":{"name":"tm"}}],[5,"at","","Returns the specified time in the local timezone",null,{"inputs":[{"name":"timespec"}],"output":{"name":"tm"}}],[5,"now","","Returns the current time in the local timezone",null,{"inputs":[],"output":{"name":"tm"}}],[5,"strftime","","Formats the time according to the format string.",null,{"inputs":[{"name":"str"},{"name":"tm"}],"output":{"name":"result"}}],[11,"fmt","","",3,null],[11,"clone","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"partial_cmp","","",4,null],[11,"lt","","",4,null],[11,"le","","",4,null],[11,"gt","","",4,null],[11,"ge","","",4,null],[11,"cmp","","",4,null],[11,"fmt","","",4,null],[11,"weeks","","Makes a new `Duration` with given number of weeks.\nEquivalent to `Duration::seconds(weeks * 7 * 24 * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"days","","Makes a new `Duration` with given number of days.\nEquivalent to `Duration::seconds(days * 24 * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"hours","","Makes a new `Duration` with given number of hours.\nEquivalent to `Duration::seconds(hours * 60 * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"minutes","","Makes a new `Duration` with given number of minutes.\nEquivalent to `Duration::seconds(minutes * 60)` with overflow checks.\nPanics when the duration is out of bounds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"seconds","","Makes a new `Duration` with given number of seconds.\nPanics when the duration is more than `i64::MAX` milliseconds\nor less than `i64::MIN` milliseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"milliseconds","","Makes a new `Duration` with given number of milliseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"microseconds","","Makes a new `Duration` with given number of microseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"nanoseconds","","Makes a new `Duration` with given number of nanoseconds.",4,{"inputs":[{"name":"i64"}],"output":{"name":"duration"}}],[11,"span","","Runs a closure, returning the duration of time it took to run the\nclosure.",4,{"inputs":[{"name":"f"}],"output":{"name":"duration"}}],[11,"num_weeks","","Returns the total number of whole weeks in the duration.",4,null],[11,"num_days","","Returns the total number of whole days in the duration.",4,null],[11,"num_hours","","Returns the total number of whole hours in the duration.",4,null],[11,"num_minutes","","Returns the total number of whole minutes in the duration.",4,null],[11,"num_seconds","","Returns the total number of whole seconds in the duration.",4,null],[11,"num_milliseconds","","Returns the total number of whole milliseconds in the duration,",4,null],[11,"num_microseconds","","Returns the total number of whole microseconds in the duration,\nor `None` on overflow (exceeding 2^63 microseconds in either direction).",4,null],[11,"num_nanoseconds","","Returns the total number of whole nanoseconds in the duration,\nor `None` on overflow (exceeding 2^63 nanoseconds in either direction).",4,null],[11,"checked_add","","Add two durations, returning `None` if overflow occurred.",4,null],[11,"checked_sub","","Subtract two durations, returning `None` if overflow occurred.",4,null],[11,"min_value","","The minimum possible `Duration`: `i64::MIN` milliseconds.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"max_value","","The maximum possible `Duration`: `i64::MAX` milliseconds.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"zero","","A duration where the stored seconds and nanoseconds are equal to zero.",4,{"inputs":[],"output":{"name":"duration"}}],[11,"is_zero","","Returns `true` if the duration equals `Duration::zero()`.",4,null],[11,"from_std","","Creates a `time::Duration` object from `std::time::Duration`",4,{"inputs":[{"name":"stdduration"}],"output":{"name":"result"}}],[11,"to_std","","Creates a `std::time::Duration` object from `time::Duration`",4,null],[11,"neg","","",4,null],[11,"add","","",4,null],[11,"sub","","",4,null],[11,"mul","","",4,null],[11,"div","","",4,null],[11,"fmt","","",4,null],[11,"fmt","","",5,null],[11,"clone","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"fmt","","",5,null],[11,"description","","",5,null],[11,"clone","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"partial_cmp","","",0,null],[11,"lt","","",0,null],[11,"le","","",0,null],[11,"gt","","",0,null],[11,"ge","","",0,null],[11,"cmp","","",0,null],[11,"fmt","","",0,null],[11,"hash","","",0,null],[11,"new","","",0,{"inputs":[{"name":"i64"},{"name":"i32"}],"output":{"name":"timespec"}}],[11,"add","","",0,null],[11,"sub","","",0,null],[11,"sub","","",0,null],[11,"clone","","",6,null],[11,"now","","Returns a `PreciseTime` representing the current moment in time.",6,{"inputs":[],"output":{"name":"precisetime"}}],[11,"to","","Returns a `Duration` representing the span of time from the value of\n`self` to the value of `later`.",6,null],[11,"clone","","",7,null],[11,"partial_cmp","","",7,null],[11,"lt","","",7,null],[11,"le","","",7,null],[11,"gt","","",7,null],[11,"ge","","",7,null],[11,"cmp","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"fmt","","",7,null],[11,"now","","Returns a `SteadyTime` representing the current moment in time.",7,{"inputs":[],"output":{"name":"steadytime"}}],[11,"fmt","","",7,null],[11,"sub","","",7,null],[11,"sub","","",7,null],[11,"add","","",7,null],[11,"clone","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"fmt","","",1,null],[11,"hash","","",1,null],[11,"add","","The resulting Tm is in UTC.",1,null],[11,"sub","","The resulting Tm is in UTC.",1,null],[11,"sub","","",1,null],[11,"partial_cmp","","",1,null],[11,"cmp","","",1,null],[11,"to_timespec","","Convert time to the seconds from January 1, 1970",1,null],[11,"to_local","","Convert time to the local timezone",1,null],[11,"to_utc","","Convert time to the UTC",1,null],[11,"ctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO\nC, in the local timezone.",1,null],[11,"asctime","","Returns a TmFmt that outputs according to the `asctime` format in ISO\nC.",1,null],[11,"strftime","","Formats the time according to the format string.",1,null],[11,"rfc822","","Returns a TmFmt that outputs according to RFC 822.",1,null],[11,"rfc822z","","Returns a TmFmt that outputs according to RFC 822 with Zulu time.",1,null],[11,"rfc3339","","Returns a TmFmt that outputs according to RFC 3339. RFC 3339 is\ncompatible with ISO 8601.",1,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"fmt","","",2,null],[11,"clone","","",2,null],[11,"fmt","","",2,null],[11,"description","","",2,null],[11,"fmt","","",3,null]],"paths":[[3,"Timespec"],[3,"Tm"],[4,"ParseError"],[3,"TmFmt"],[3,"Duration"],[3,"OutOfRangeError"],[3,"PreciseTime"],[3,"SteadyTime"]]};
searchIndex["aho_corasick"] = {"doc":"An implementation of the\n[Aho-Corasick string search algorithm](https://en.wikipedia.org/wiki/Aho%E2%80%93Corasick_string_matching_algorithm).","items":[[3,"Match","aho_corasick","Records a match in the search text.",null,null],[12,"pati","","The pattern index.",0,null],[12,"start","","The starting byte offset of the match in the search text.",0,null],[12,"end","","The ending byte offset of the match in the search text.",0,null],[3,"Matches","","An iterator of non-overlapping matches for in-memory text.",null,null],[3,"MatchesOverlapping","","An iterator of overlapping matches for in-memory text.",null,null],[3,"StreamMatches","","An iterator of non-overlapping matches for streaming text.",null,null],[3,"StreamMatchesOverlapping","","An iterator of overlapping matches for streaming text.",null,null],[3,"FullAcAutomaton","","A complete Aho-Corasick automaton.",null,null],[3,"AcAutomaton","","An Aho-Corasick finite automaton.",null,null],[3,"Dense","","State transitions that can be stored either sparsely or densely.",null,null],[3,"Sparse","","State transitions that are always sparse.",null,null],[11,"clone","","",0,null],[11,"fmt","","",0,null],[11,"hash","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"fmt","","",1,null],[11,"next","","",1,null],[11,"fmt","","",2,null],[11,"next","","",2,null],[11,"fmt","","",3,null],[11,"next","","",3,null],[11,"fmt","","",4,null],[11,"next","","",4,null],[11,"clone","","",5,null],[11,"new","","Build a new expanded Aho-Corasick automaton from an existing\nAho-Corasick automaton.",5,{"inputs":[{"name":"acautomaton"}],"output":{"name":"fullacautomaton"}}],[11,"next_state","","",5,null],[11,"get_match","","",5,null],[11,"has_match","","",5,null],[11,"start_bytes","","",5,null],[11,"patterns","","",5,null],[11,"pattern","","",5,null],[11,"fmt","","",5,null],[6,"StateIdx","","The integer type used for the state index.",null,null],[8,"Automaton","","An abstraction over automatons and their corresponding iterators.\nThe type parameter `P` is the type of the pattern that was used to\nconstruct this Automaton.",null,null],[10,"next_state","","Return the next state given the current state and next character.",6,null],[10,"has_match","","Return true if and only if the given state and current pattern index\nindicate a match.",6,null],[10,"get_match","","Build a match given the current state, pattern index and input index.",6,null],[10,"start_bytes","","Return the set of bytes that have transitions in the root state.",6,null],[10,"patterns","","Returns all of the patterns matched by this automaton.",6,null],[10,"pattern","","Returns the pattern indexed at `i`.",6,null],[11,"len","","Return the number of patterns in the automaton.",6,null],[11,"is_empty","","Returns true if the automaton has no patterns.",6,null],[11,"find","","Returns an iterator of non-overlapping matches in `s`.",6,null],[11,"find_overlapping","","Returns an iterator of overlapping matches in `s`.",6,null],[11,"stream_find","","Returns an iterator of non-overlapping matches in the given reader.",6,null],[11,"stream_find_overlapping","","Returns an iterator of overlapping matches in the given reader.",6,null],[8,"Transitions","","An abstraction over state transition strategies.",null,null],[10,"new","","Return a new state at the given depth.",7,{"inputs":[{"name":"u32"}],"output":{"name":"self"}}],[10,"goto","","Return the next state index given the next character.",7,null],[10,"set_goto","","Set the next state index for the character given.",7,null],[10,"heap_bytes","","The memory use in bytes (on the heap) of this set of transitions.",7,null],[11,"clone","","",8,null],[11,"new","","Create a new automaton from an iterator of patterns.",8,{"inputs":[{"name":"i"}],"output":{"name":"acautomaton"}}],[11,"with_transitions","","Create a new automaton from an iterator of patterns.",8,{"inputs":[{"name":"i"}],"output":{"name":"acautomaton"}}],[11,"into_full","","Build out the entire automaton into a single matrix.",8,null],[11,"next_state","","",8,null],[11,"get_match","","",8,null],[11,"has_match","","",8,null],[11,"start_bytes","","",8,null],[11,"patterns","","",8,null],[11,"pattern","","",8,null],[11,"clone","","",9,null],[11,"fmt","","",9,null],[11,"new","","",9,{"inputs":[{"name":"u32"}],"output":{"name":"dense"}}],[11,"goto","","",9,null],[11,"set_goto","","",9,null],[11,"heap_bytes","","",9,null],[11,"clone","","",10,null],[11,"fmt","","",10,null],[11,"new","","",10,{"inputs":[{"name":"u32"}],"output":{"name":"sparse"}}],[11,"goto","","",10,null],[11,"set_goto","","",10,null],[11,"heap_bytes","","",10,null],[11,"from_iter","","Create an automaton from an iterator of strings.",8,{"inputs":[{"name":"t"}],"output":{"name":"acautomaton"}}],[11,"fmt","","",8,null],[11,"len","","Return the number of patterns in the automaton.",6,null],[11,"is_empty","","Returns true if the automaton has no patterns.",6,null],[11,"find","","Returns an iterator of non-overlapping matches in `s`.",6,null],[11,"find_overlapping","","Returns an iterator of overlapping matches in `s`.",6,null],[11,"stream_find","","Returns an iterator of non-overlapping matches in the given reader.",6,null],[11,"stream_find_overlapping","","Returns an iterator of overlapping matches in the given reader.",6,null]],"paths":[[3,"Match"],[3,"Matches"],[3,"StreamMatches"],[3,"MatchesOverlapping"],[3,"StreamMatchesOverlapping"],[3,"FullAcAutomaton"],[8,"Automaton"],[8,"Transitions"],[3,"AcAutomaton"],[3,"Dense"],[3,"Sparse"]]};
searchIndex["thread_local"] = {"doc":"Per-object thread-local storage","items":[[3,"ThreadLocal","thread_local","Thread-local variable wrapper",null,null],[3,"IterMut","","Mutable iterator over the contents of a `ThreadLocal`.",null,null],[3,"IntoIter","","An iterator that moves out of a `ThreadLocal`.",null,null],[3,"CachedThreadLocal","","Wrapper around `ThreadLocal` which adds a fast path for a single thread.",null,null],[6,"CachedIterMut","","Mutable iterator over the contents of a `CachedThreadLocal`.",null,null],[6,"CachedIntoIter","","An iterator that moves out of a `CachedThreadLocal`.",null,null],[11,"default","","",0,{"inputs":[],"output":{"name":"threadlocal"}}],[11,"drop","","",0,null],[11,"new","","Creates a new empty `ThreadLocal`.",0,{"inputs":[],"output":{"name":"threadlocal"}}],[11,"get","","Returns the element for the current thread, if it exists.",0,null],[11,"get_or","","Returns the element for the current thread, or creates it if it doesn&#39;t\nexist.",0,null],[11,"get_or_try","","Returns the element for the current thread, or creates it if it doesn&#39;t\nexist. If `create` fails, that error is returned and no element is\nadded.",0,null],[11,"iter_mut","","Returns a mutable iterator over the local values of all threads.",0,null],[11,"clear","","Removes all thread-specific values from the `ThreadLocal`, effectively\nreseting it to its original state.",0,null],[11,"into_iter","","",0,null],[11,"get_default","","Returns the element for the current thread, or creates a default one if\nit doesn&#39;t exist.",0,null],[11,"fmt","","",0,null],[11,"next","","",1,null],[11,"size_hint","","",1,null],[11,"next","","",2,null],[11,"size_hint","","",2,null],[11,"default","","",3,{"inputs":[],"output":{"name":"cachedthreadlocal"}}],[11,"new","","Creates a new empty `CachedThreadLocal`.",3,{"inputs":[],"output":{"name":"cachedthreadlocal"}}],[11,"get","","Returns the element for the current thread, if it exists.",3,null],[11,"get_or","","Returns the element for the current thread, or creates it if it doesn&#39;t\nexist.",3,null],[11,"get_or_try","","Returns the element for the current thread, or creates it if it doesn&#39;t\nexist. If `create` fails, that error is returned and no element is\nadded.",3,null],[11,"iter_mut","","Returns a mutable iterator over the local values of all threads.",3,null],[11,"clear","","Removes all thread-specific values from the `ThreadLocal`, effectively\nreseting it to its original state.",3,null],[11,"into_iter","","",3,null],[11,"get_default","","Returns the element for the current thread, or creates a default one if\nit doesn&#39;t exist.",3,null],[11,"fmt","","",3,null]],"paths":[[3,"ThreadLocal"],[3,"IterMut"],[3,"IntoIter"],[3,"CachedThreadLocal"]]};
searchIndex["syntex_errors"] = {"doc":"","items":[[3,"CodeSuggestion","syntex_errors","",null,null],[12,"msp","","",0,null],[12,"substitutes","","",0,null],[3,"FatalError","","Used as a return value to signify a fatal error occurred. (It is also\nused as the argument to panic at the moment, but that will eventually\nnot be true.)",null,null],[3,"ExplicitBug","","Signifies that the compiler died with an explicit call to `.bug`\nor `.span_bug` rather than a failed assertion, etc.",null,null],[3,"DiagnosticBuilder","","Used for emitting structured error messages and other diagnostic information.",null,null],[12,"level","","",1,null],[12,"message","","",1,null],[12,"code","","",1,null],[12,"span","","",1,null],[12,"children","","",1,null],[3,"SubDiagnostic","","For example a note attached to an error.",null,null],[12,"level","","",2,null],[12,"message","","",2,null],[12,"span","","",2,null],[12,"render_span","","",2,null],[3,"Handler","","A handler deals with errors; certain errors\n(fatal, bug, unimpl) may cause immediate exit,\nothers log errors for later reporting.",null,null],[12,"can_emit_warnings","","",3,null],[4,"RenderSpan","","",null,null],[13,"FullSpan","","A FullSpan renders with both with an initial line for the\nmessage, prefixed by file:linenum, followed by a summary of\nthe source code covered by the span.",4,null],[13,"Suggestion","","A suggestion renders with both with an initial line for the\nmessage, prefixed by file:linenum, followed by a summary\nof hypothetical source code, where each `String` is spliced\ninto the lines in place of the code covered by each span.",4,null],[4,"Level","","",null,null],[13,"Bug","","",5,null],[13,"Fatal","","",5,null],[13,"PhaseFatal","","",5,null],[13,"Error","","",5,null],[13,"Warning","","",5,null],[13,"Note","","",5,null],[13,"Help","","",5,null],[13,"Cancelled","","",5,null],[5,"expect","","",null,{"inputs":[{"name":"handler"},{"name":"option"},{"name":"m"}],"output":{"name":"t"}}],[0,"emitter","","",null,null],[3,"EmitterWriter","syntex_errors::emitter","",null,null],[3,"BufferedWriter","","Buffered writer gives us a way on Unix to buffer up an entire error message before we output\nit.  This helps to prevent interleaving of multiple error messages when multiple compiler\nprocesses error simultaneously",null,null],[4,"ColorConfig","","",null,null],[13,"Auto","","",6,null],[13,"Always","","",6,null],[13,"Never","","",6,null],[4,"Destination","","",null,null],[13,"Terminal","","",7,null],[13,"BufferedTerminal","","",7,null],[13,"Raw","","",7,null],[6,"BufferedStderr","","",null,null],[17,"MAX_HIGHLIGHT_LINES","","maximum number of lines we will print for each error; arbitrary.",null,null],[8,"Emitter","","Emitter trait for emitting errors.",null,null],[10,"emit","","Emit a structured diagnostic.",8,null],[11,"emit","","",9,null],[11,"clone","","",6,null],[11,"fmt","","",6,null],[11,"eq","","",6,null],[11,"stderr","","",9,{"inputs":[{"name":"colorconfig"},{"name":"option"}],"output":{"name":"emitterwriter"}}],[11,"new","","",9,{"inputs":[{"name":"box"},{"name":"option"}],"output":{"name":"emitterwriter"}}],[11,"write","","",10,null],[11,"flush","","",10,null],[11,"write","","",7,null],[11,"flush","","",7,null],[0,"snippet","syntex_errors","",null,null],[3,"SnippetData","syntex_errors::snippet","",null,null],[3,"FileInfo","","",null,null],[3,"Line","","",null,null],[12,"line_index","","",11,null],[12,"annotations","","",11,null],[3,"Annotation","","",null,null],[12,"start_col","","Start column, 0-based indexing -- counting *characters*, not\nutf-8 bytes. Note that it is important that this field goes\nfirst, so that when we sort, we sort orderings by start\ncolumn.",12,null],[12,"end_col","","End column within the line (exclusive)",12,null],[12,"is_primary","","Is this annotation derived from primary span",12,null],[12,"is_minimized","","Is this a large span minimized down to a smaller span",12,null],[12,"label","","Optional label to display adjacent to the annotation.",12,null],[3,"StyledString","","",null,null],[12,"text","","",13,null],[12,"style","","",13,null],[4,"Style","","",null,null],[13,"HeaderMsg","","",14,null],[13,"FileNameStyle","","",14,null],[13,"LineAndColumn","","",14,null],[13,"LineNumber","","",14,null],[13,"Quotation","","",14,null],[13,"UnderlinePrimary","","",14,null],[13,"UnderlineSecondary","","",14,null],[13,"LabelPrimary","","",14,null],[13,"LabelSecondary","","",14,null],[13,"OldSchoolNoteText","","",14,null],[13,"OldSchoolNote","","",14,null],[13,"NoStyle","","",14,null],[13,"ErrorCode","","",14,null],[13,"Level","","",14,null],[11,"clone","","",15,null],[11,"clone","","",16,null],[11,"clone","","",11,null],[11,"fmt","","",11,null],[11,"partial_cmp","","",11,null],[11,"lt","","",11,null],[11,"le","","",11,null],[11,"gt","","",11,null],[11,"ge","","",11,null],[11,"cmp","","",11,null],[11,"eq","","",11,null],[11,"ne","","",11,null],[11,"clone","","",12,null],[11,"fmt","","",12,null],[11,"partial_cmp","","",12,null],[11,"lt","","",12,null],[11,"le","","",12,null],[11,"gt","","",12,null],[11,"ge","","",12,null],[11,"cmp","","",12,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"fmt","","",13,null],[11,"clone","","",14,null],[11,"fmt","","",14,null],[11,"eq","","",14,null],[11,"ne","","",14,null],[0,"registry","syntex_errors","",null,null],[3,"Registry","syntex_errors::registry","",null,null],[11,"clone","","",17,null],[11,"new","","",17,null],[11,"find_description","","",17,null],[0,"styled_buffer","syntex_errors","",null,null],[3,"StyledBuffer","syntex_errors::styled_buffer","",null,null],[11,"fmt","","",18,null],[11,"new","","",18,{"inputs":[],"output":{"name":"styledbuffer"}}],[11,"copy_tabs","","",18,null],[11,"render","","",18,null],[11,"putc","","",18,null],[11,"puts","","",18,null],[11,"set_style","","",18,null],[11,"prepend","","",18,null],[11,"append","","",18,null],[11,"num_lines","","",18,null],[8,"CodeMapper","syntex_errors","",null,null],[10,"lookup_char_pos","","",19,null],[10,"span_to_lines","","",19,null],[10,"span_to_string","","",19,null],[10,"span_to_filename","","",19,null],[10,"macro_backtrace","","",19,null],[11,"clone","","",4,null],[11,"clone","","",0,null],[11,"splice_lines","","Returns the assembled code suggestion.",0,null],[11,"clone","","",20,null],[11,"fmt","","",20,null],[11,"fmt","","",20,null],[11,"description","","",20,null],[11,"clone","","",21,null],[11,"fmt","","",21,null],[11,"fmt","","",21,null],[11,"description","","",21,null],[11,"clone","","",1,null],[11,"clone","","",2,null],[11,"emit","","Emit the diagnostic.",1,null],[11,"cancel","","Cancel the diagnostic (a structured diagnostic must either be emitted or\ncancelled or it will panic when dropped).\nBEWARE: if this DiagnosticBuilder is an error, then creating it will\nbump the error count on the Handler and cancelling it won&#39;t undo that.\nIf you want to decrement the error count you should use `Handler::cancel`.",1,null],[11,"cancelled","","",1,null],[11,"is_fatal","","",1,null],[11,"span_label","","Add a span/label to be included in the resulting snippet.\nThis is pushed onto the `MultiSpan` that was created when the\ndiagnostic was first built. If you don&#39;t call this function at\nall, and you just supplied a `Span` to create the diagnostic,\nthen the snippet will just include that `Span`, which is\ncalled the primary span.",1,null],[11,"note_expected_found","","",1,null],[11,"note","","",1,null],[11,"span_note","","",1,null],[11,"warn","","",1,null],[11,"span_warn","","",1,null],[11,"help","","",1,null],[11,"span_help","","",1,null],[11,"span_suggestion","","Prints out a message with a suggested edit of the code.",1,null],[11,"set_span","","",1,null],[11,"code","","",1,null],[11,"message","","",1,null],[11,"level","","",1,null],[11,"fmt","","",1,null],[11,"drop","","",1,null],[11,"with_tty_emitter","","",3,{"inputs":[{"name":"colorconfig"},{"name":"bool"},{"name":"bool"},{"name":"option"}],"output":{"name":"handler"}}],[11,"with_emitter","","",3,{"inputs":[{"name":"bool"},{"name":"bool"},{"name":"box"}],"output":{"name":"handler"}}],[11,"set_continue_after_error","","",3,null],[11,"struct_dummy","","",3,null],[11,"struct_span_warn","","",3,null],[11,"struct_span_warn_with_code","","",3,null],[11,"struct_warn","","",3,null],[11,"struct_span_err","","",3,null],[11,"struct_span_err_with_code","","",3,null],[11,"struct_err","","",3,null],[11,"struct_span_fatal","","",3,null],[11,"struct_span_fatal_with_code","","",3,null],[11,"struct_fatal","","",3,null],[11,"cancel","","",3,null],[11,"span_fatal","","",3,null],[11,"span_fatal_with_code","","",3,null],[11,"span_err","","",3,null],[11,"mut_span_err","","",3,null],[11,"span_err_with_code","","",3,null],[11,"span_warn","","",3,null],[11,"span_warn_with_code","","",3,null],[11,"span_bug","","",3,null],[11,"delay_span_bug","","",3,null],[11,"span_bug_no_panic","","",3,null],[11,"span_note_without_error","","",3,null],[11,"span_unimpl","","",3,null],[11,"fatal","","",3,null],[11,"err","","",3,null],[11,"warn","","",3,null],[11,"note_without_error","","",3,null],[11,"bug","","",3,null],[11,"unimpl","","",3,null],[11,"bump_err_count","","",3,null],[11,"err_count","","",3,null],[11,"has_errors","","",3,null],[11,"abort_if_errors","","",3,null],[11,"emit","","",3,null],[11,"emit_with_code","","",3,null],[11,"eq","","",5,null],[11,"clone","","",5,null],[11,"fmt","","",5,null],[11,"fmt","","",5,null],[11,"color","","",5,null],[11,"to_str","","",5,null]],"paths":[[3,"CodeSuggestion"],[3,"DiagnosticBuilder"],[3,"SubDiagnostic"],[3,"Handler"],[4,"RenderSpan"],[4,"Level"],[4,"ColorConfig"],[4,"Destination"],[8,"Emitter"],[3,"EmitterWriter"],[3,"BufferedWriter"],[3,"Line"],[3,"Annotation"],[3,"StyledString"],[4,"Style"],[3,"SnippetData"],[3,"FileInfo"],[3,"Registry"],[3,"StyledBuffer"],[8,"CodeMapper"],[3,"FatalError"],[3,"ExplicitBug"]]};
searchIndex["thread_id"] = {"doc":"Thread-ID: get a unique ID for the current thread.","items":[[5,"get","thread_id","Returns a number that is unique to the calling thread.",null,{"inputs":[],"output":{"name":"usize"}}]],"paths":[]};
searchIndex["backtrace_sys"] = {"doc":"","items":[[4,"backtrace_state","backtrace_sys","",null,null],[5,"backtrace_create_state","","",null,null],[5,"backtrace_syminfo","","",null,null],[5,"backtrace_pcinfo","","",null,null],[6,"backtrace_syminfo_callback","","",null,null],[6,"backtrace_full_callback","","",null,null],[6,"backtrace_error_callback","","",null,null]],"paths":[]};
searchIndex["memchr"] = {"doc":"This crate defines two functions, `memchr` and `memrchr`, which expose a safe interface\nto the corresponding functions in `libc`.","items":[[5,"memchr","memchr","A safe interface to `memchr`.",null,null],[5,"memrchr","","A safe interface to `memrchr`.",null,null],[5,"memchr2","","Like `memchr`, but searches for two bytes instead of one.",null,null],[5,"memchr3","","Like `memchr`, but searches for three bytes instead of one.",null,null]],"paths":[]};
searchIndex["encoding"] = {"doc":"# Encoding 0.2.33","items":[[0,"types","encoding","Interface to the character encoding.",null,null],[3,"CodecError","encoding::types","Error information from either encoder or decoder.",null,null],[12,"upto","","The byte position of the first remaining byte, with respect to the *current* input.\nFor the `finish` call, this should be no more than zero (since there is no input).\nIt can be negative if the remaining byte is in the prior inputs,\nas long as the remaining byte is not yet processed.\nThe caller should feed the bytes starting from this point again\nin order to continue encoding or decoding after an error.",0,null],[12,"cause","","A human-readable cause of the error.",0,null],[4,"DecoderTrap","","Trap, which handles decoder errors.",null,null],[13,"Strict","","Immediately fails on errors.\nCorresponds to WHATWG &quot;fatal&quot; error algorithm.",1,null],[13,"Replace","","Replaces an error with a U+FFFD (decoder).\nCorresponds to WHATWG &quot;replacement&quot; error algorithm.",1,null],[13,"Ignore","","Silently ignores an error, effectively replacing it with an empty sequence.",1,null],[13,"Call","","Calls given function to handle decoder errors.\nThe function is given the current decoder, input and output writer,\nand should return true only when it is fine to keep going.",1,null],[4,"EncoderTrap","","",null,null],[13,"Strict","","Immediately fails on errors.\nCorresponds to WHATWG &quot;fatal&quot; error algorithm.",2,null],[13,"Replace","","Replaces an error with `?` in given encoding.\nNote that this fails when `?` cannot be represented in given encoding.\nCorresponds to WHATWG &quot;URL&quot; error algorithms.",2,null],[13,"Ignore","","Silently ignores an error, effectively replacing it with an empty sequence.",2,null],[13,"NcrEscape","","Replaces an error with XML numeric character references (e.g. `&amp;#1234;`).\nThe encoder trap fails when NCRs cannot be represented in given encoding.\nCorresponds to WHATWG &quot;&lt;form&gt;&quot; error algorithms.",2,null],[13,"Call","","Calls given function to handle encoder errors.\nThe function is given the current encoder, input and output writer,\nand should return true only when it is fine to keep going.",2,null],[5,"decode","","Determine the encoding by looking for a Byte Order Mark (BOM)\nand decoded a single string in memory.\nReturn the result and the used encoding.",null,null],[6,"EncodingRef","","A trait object using dynamic dispatch which is a sendable reference to the encoding,\nfor code where the encoding is not known at compile-time.",null,null],[6,"EncoderTrapFunc","","A type of the bare function in `EncoderTrap` values.",null,null],[6,"DecoderTrapFunc","","A type of the bare function in `DecoderTrap` values.",null,null],[8,"ByteWriter","","Byte writer used by encoders. In most cases this will be an owned vector of `u8`.",null,null],[11,"writer_hint","","Hints an expected lower bound on the length (in bytes) of the output\nuntil the next call to `writer_hint`,\nso that the writer can reserve the memory for writing.\n`RawEncoder`s are recommended but not required to call this method\nwith an appropriate estimate.\nBy default this method does nothing.",3,null],[10,"write_byte","","Writes a single byte.",3,null],[10,"write_bytes","","Writes a number of bytes.",3,null],[8,"StringWriter","","String writer used by decoders. In most cases this will be an owned string.",null,null],[11,"writer_hint","","Hints an expected lower bound on the length (in bytes) of the output\nuntil the next call to `writer_hint`,\nso that the writer can reserve the memory for writing.\n`RawDecoder`s are recommended but not required to call this method\nwith an appropriate estimate.\nBy default this method does nothing.",4,null],[10,"write_char","","Writes a single character.",4,null],[10,"write_str","","Writes a string.",4,null],[8,"RawEncoder","","Encoder converting a Unicode string into a byte sequence.\nThis is a lower level interface, and normally `Encoding::encode` should be used instead.",null,null],[10,"from_self","","Creates a fresh `RawEncoder` instance which parameters are same as `self`.",5,null],[11,"is_ascii_compatible","","Returns true if this encoding is compatible to ASCII,\ni.e. U+0000 through U+007F always map to bytes 00 through 7F and nothing else.",5,null],[10,"raw_feed","","Feeds given portion of string to the encoder,\npushes the an encoded byte sequence at the end of the given output,\nand returns a byte offset to the first unprocessed character\n(that can be zero when the first such character appeared in the prior calls to `raw_feed`)\nand optional error information (None means success).",5,null],[10,"raw_finish","","Finishes the encoder,\npushes the an encoded byte sequence at the end of the given output,\nand returns optional error information (None means success).\n`remaining` value of the error information, if any, is always an empty string.",5,null],[8,"RawDecoder","","Decoder converting a byte sequence into a Unicode string.\nThis is a lower level interface, and normally `Encoding::decode` should be used instead.",null,null],[10,"from_self","","Creates a fresh `RawDecoder` instance which parameters are same as `self`.",6,null],[11,"is_ascii_compatible","","Returns true if this encoding is compatible to ASCII,\ni.e. bytes 00 through 7F always map to U+0000 through U+007F and nothing else.",6,null],[10,"raw_feed","","Feeds given portion of byte sequence to the encoder,\npushes the a decoded string at the end of the given output,\nand returns an offset to the first unprocessed byte\n(that can be zero when the first such byte appeared in the prior calls to `raw_feed`)\nand optional error information (None means success).",6,null],[10,"raw_finish","","Finishes the decoder,\npushes the a decoded string at the end of the given output,\nand returns optional error information (None means success).",6,null],[8,"Encoding","","Character encoding.",null,null],[10,"name","","Returns the canonical name of given encoding.\nThis name is guaranteed to be unique across built-in encodings,\nbut it is not normative and would be at most arbitrary.",7,null],[11,"whatwg_name","","Returns a name of given encoding defined in the WHATWG Encoding standard, if any.\nThis name often differs from `name` due to the compatibility reason.",7,null],[10,"raw_encoder","","Creates a new encoder.",7,null],[10,"raw_decoder","","Creates a new decoder.",7,null],[11,"encode","","An easy-to-use interface to `RawEncoder`.\nOn the encoder error `trap` is called,\nwhich may return a replacement sequence to continue processing,\nor a failure to return the error.",7,null],[11,"encode_to","","Encode into a `ByteWriter`.",7,null],[11,"decode","","An easy-to-use interface to `RawDecoder`.\nOn the decoder error `trap` is called,\nwhich may return a replacement string to continue processing,\nor a failure to return the error.",7,null],[11,"decode_to","","Decode into a `StringWriter`.",7,null],[11,"trap","","Handles a decoder error. May write to the output writer.\nReturns true only when it is fine to keep going.",1,null],[11,"clone","","",1,null],[11,"trap","","Handles an encoder error. May write to the output writer.\nReturns true only when it is fine to keep going.",2,null],[11,"clone","","",2,null],[0,"codec","encoding","Codec implementations.",null,null],[0,"error","encoding::codec","A placeholder encoding that returns encoder/decoder error for every case.",null,null],[3,"ErrorEncoding","encoding::codec::error","An encoding that returns encoder/decoder error for every case.",null,null],[3,"ErrorEncoder","","An encoder that always returns error.",null,null],[3,"ErrorDecoder","","A decoder that always returns error.",null,null],[11,"clone","","",8,null],[11,"name","","",8,null],[11,"raw_encoder","","",8,null],[11,"raw_decoder","","",8,null],[11,"clone","","",9,null],[11,"new","","",9,{"inputs":[],"output":{"name":"box"}}],[11,"from_self","","",9,null],[11,"raw_feed","","",9,null],[11,"raw_finish","","",9,null],[11,"clone","","",10,null],[11,"new","","",10,{"inputs":[],"output":{"name":"box"}}],[11,"from_self","","",10,null],[11,"raw_feed","","",10,null],[11,"raw_finish","","",10,null],[0,"ascii","encoding::codec","7-bit ASCII encoding.",null,null],[3,"ASCIIEncoding","encoding::codec::ascii","ASCII, also known as ISO/IEC 646:US.",null,null],[3,"ASCIIEncoder","","An encoder for ASCII.",null,null],[3,"ASCIIDecoder","","A decoder for ASCII.",null,null],[11,"clone","","",11,null],[11,"name","","",11,null],[11,"raw_encoder","","",11,null],[11,"raw_decoder","","",11,null],[11,"clone","","",12,null],[11,"new","","",12,{"inputs":[],"output":{"name":"box"}}],[11,"from_self","","",12,null],[11,"is_ascii_compatible","","",12,null],[11,"raw_feed","","",12,null],[11,"raw_finish","","",12,null],[11,"clone","","",13,null],[11,"new","","",13,{"inputs":[],"output":{"name":"box"}}],[11,"from_self","","",13,null],[11,"is_ascii_compatible","","",13,null],[11,"raw_feed","","",13,null],[11,"raw_finish","","",13,null],[0,"singlebyte","encoding::codec","Common codec implementation for single-byte encodings.",null,null],[3,"SingleByteEncoding","encoding::codec::singlebyte","A common framework for single-byte encodings based on ASCII.",null,null],[12,"name","","",14,null],[12,"whatwg_name","","",14,null],[12,"index_forward","","",14,null],[12,"index_backward","","",14,null],[3,"SingleByteEncoder","","An encoder for single-byte encodings based on ASCII.",null,null],[3,"SingleByteDecoder","","A decoder for single-byte encodings based on ASCII.",null,null],[0,"iso_8859_1","","Algorithmic mapping for ISO 8859-1.",null,null],[5,"forward","encoding::codec::singlebyte::iso_8859_1","",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[11,"clone","encoding::codec::singlebyte","",14,null],[11,"name","","",14,null],[11,"whatwg_name","","",14,null],[11,"raw_encoder","","",14,null],[11,"raw_decoder","","",14,null],[11,"clone","","",15,null],[11,"new","","",15,null],[11,"from_self","","",15,null],[11,"is_ascii_compatible","","",15,null],[11,"raw_feed","","",15,null],[11,"raw_finish","","",15,null],[11,"clone","","",16,null],[11,"new","","",16,null],[11,"from_self","","",16,null],[11,"is_ascii_compatible","","",16,null],[11,"raw_feed","","",16,null],[11,"raw_finish","","",16,null],[0,"utf_8","encoding::codec","UTF-8, the universal encoding.",null,null],[3,"UTF8Encoding","encoding::codec::utf_8","UTF-8 (UCS Transformation Format, 8-bit).",null,null],[3,"UTF8Encoder","","An encoder for UTF-8.",null,null],[3,"UTF8Decoder","","A decoder for UTF-8.",null,null],[5,"from_utf8","","Almost equivalent to `std::str::from_utf8`.\nThis function is provided for the fair benchmark against the stdlib&#39;s UTF-8 conversion\nfunctions, as rust-encoding always allocates a new string.",null,null],[11,"clone","","",17,null],[11,"name","","",17,null],[11,"whatwg_name","","",17,null],[11,"raw_encoder","","",17,null],[11,"raw_decoder","","",17,null],[11,"clone","","",18,null],[11,"new","","",18,{"inputs":[],"output":{"name":"box"}}],[11,"from_self","","",18,null],[11,"is_ascii_compatible","","",18,null],[11,"raw_feed","","",18,null],[11,"raw_finish","","",18,null],[11,"clone","","",19,null],[11,"new","","",19,{"inputs":[],"output":{"name":"box"}}],[11,"from_self","","",19,null],[11,"is_ascii_compatible","","",19,null],[11,"raw_feed","","",19,null],[11,"raw_finish","","",19,null],[0,"utf_16","encoding::codec","UTF-16.",null,null],[3,"Little","encoding::codec::utf_16","An implementation type for little endian.",null,null],[3,"Big","","An implementation type for big endian.",null,null],[3,"UTF16Encoding","","UTF-16 (UCS Transformation Format, 16-bit).",null,null],[3,"UTF16Encoder","","An encoder for UTF-16.",null,null],[3,"UTF16Decoder","","A decoder for UTF-16.",null,null],[6,"UTF16LEEncoding","","A type for UTF-16 in little endian.",null,null],[6,"UTF16BEEncoding","","A type for UTF-16 in big endian.",null,null],[17,"UTF_16LE_ENCODING","","An instance for UTF-16 in little endian.",null,null],[17,"UTF_16BE_ENCODING","","An instance for UTF-16 in big endian.",null,null],[11,"clone","","",20,null],[11,"clone","","",21,null],[11,"clone","","",22,null],[11,"name","","",22,null],[11,"whatwg_name","","",22,null],[11,"raw_encoder","","",22,null],[11,"raw_decoder","","",22,null],[11,"clone","","",23,null],[11,"from_self","","",23,null],[11,"raw_feed","","",23,null],[11,"raw_finish","","",23,null],[11,"new","","",24,{"inputs":[],"output":{"name":"box"}}],[11,"from_self","","",24,null],[11,"raw_feed","","",24,null],[11,"raw_finish","","",24,null],[0,"korean","encoding::codec","Legacy Korean encodings based on KS X 1001.",null,null],[3,"Windows949Encoding","encoding::codec::korean","Windows code page 949.",null,null],[3,"Windows949Encoder","","An encoder for Windows code page 949.",null,null],[11,"clone","","",25,null],[11,"name","","",25,null],[11,"whatwg_name","","",25,null],[11,"raw_encoder","","",25,null],[11,"raw_decoder","","",25,null],[11,"clone","","",26,null],[11,"new","","",26,{"inputs":[],"output":{"name":"box"}}],[11,"from_self","","",26,null],[11,"is_ascii_compatible","","",26,null],[11,"raw_feed","","",26,null],[11,"raw_finish","","",26,null],[0,"japanese","encoding::codec","Legacy Japanese encodings based on JIS X 0208 and JIS X 0212.",null,null],[3,"EUCJPEncoding","encoding::codec::japanese","EUC-JP. (XXX with asymmetric JIS X 0212 support)",null,null],[3,"EUCJPEncoder","","An encoder for EUC-JP with unused G3 character set.",null,null],[3,"Windows31JEncoding","","Windows code page 932, i.e. Shift_JIS with IBM/NEC extensions.",null,null],[3,"Windows31JEncoder","","An encoder for Shift_JIS with IBM/NEC extensions.",null,null],[3,"ISO2022JPEncoding","","ISO-2022-JP.",null,null],[3,"ISO2022JPEncoder","","An encoder for ISO-2022-JP without JIS X 0212/0213 support.",null,null],[11,"clone","","",27,null],[11,"name","","",27,null],[11,"whatwg_name","","",27,null],[11,"raw_encoder","","",27,null],[11,"raw_decoder","","",27,null],[11,"clone","","",28,null],[11,"new","","",28,{"inputs":[],"output":{"name":"box"}}],[11,"from_self","","",28,null],[11,"is_ascii_compatible","","",28,null],[11,"raw_feed","","",28,null],[11,"raw_finish","","",28,null],[11,"clone","","",29,null],[11,"name","","",29,null],[11,"whatwg_name","","",29,null],[11,"raw_encoder","","",29,null],[11,"raw_decoder","","",29,null],[11,"clone","","",30,null],[11,"new","","",30,{"inputs":[],"output":{"name":"box"}}],[11,"from_self","","",30,null],[11,"is_ascii_compatible","","",30,null],[11,"raw_feed","","",30,null],[11,"raw_finish","","",30,null],[11,"clone","","",31,null],[11,"name","","",31,null],[11,"whatwg_name","","",31,null],[11,"raw_encoder","","",31,null],[11,"raw_decoder","","",31,null],[11,"clone","","",32,null],[11,"new","","",32,{"inputs":[],"output":{"name":"box"}}],[11,"from_self","","",32,null],[11,"is_ascii_compatible","","",32,null],[11,"raw_feed","","",32,null],[11,"raw_finish","","",32,null],[0,"simpchinese","encoding::codec","Legacy simplified Chinese encodings based on GB 2312 and GB 18030.",null,null],[3,"GBK","encoding::codec::simpchinese","An implementation type for GBK.",null,null],[3,"GB18030","","An implementation type for GB18030.",null,null],[3,"GBEncoding","","GBK and GB 18030-2005.",null,null],[3,"GBEncoder","","An encoder for GBK and GB18030.",null,null],[3,"HZEncoding","","HZ. (RFC 1843)",null,null],[3,"HZEncoder","","An encoder for HZ.",null,null],[6,"GBKEncoding","","A type for GBK.",null,null],[6,"GB18030Encoding","","A type for GB18030.",null,null],[17,"GBK_ENCODING","","An instance for GBK.",null,null],[17,"GB18030_ENCODING","","An instance for GB18030.",null,null],[11,"clone","","",33,null],[11,"clone","","",34,null],[11,"clone","","",35,null],[11,"name","","",35,null],[11,"whatwg_name","","",35,null],[11,"raw_encoder","","",35,null],[11,"raw_decoder","","",35,null],[11,"clone","","",36,null],[11,"new","","",36,{"inputs":[],"output":{"name":"box"}}],[11,"from_self","","",36,null],[11,"is_ascii_compatible","","",36,null],[11,"raw_feed","","",36,null],[11,"raw_finish","","",36,null],[11,"clone","","",37,null],[11,"name","","",37,null],[11,"whatwg_name","","",37,null],[11,"raw_encoder","","",37,null],[11,"raw_decoder","","",37,null],[11,"clone","","",38,null],[11,"new","","",38,{"inputs":[],"output":{"name":"box"}}],[11,"from_self","","",38,null],[11,"is_ascii_compatible","","",38,null],[11,"raw_feed","","",38,null],[11,"raw_finish","","",38,null],[0,"tradchinese","encoding::codec","Legacy traditional Chinese encodings.",null,null],[3,"BigFive2003Encoding","encoding::codec::tradchinese","Big5-2003 with common extensions. (XXX with asymmetric HKSCS-2008 support)",null,null],[3,"BigFive2003Encoder","","An encoder for Big5-2003.",null,null],[11,"clone","","",39,null],[11,"name","","",39,null],[11,"whatwg_name","","",39,null],[11,"raw_encoder","","",39,null],[11,"raw_decoder","","",39,null],[11,"clone","","",40,null],[11,"new","","",40,{"inputs":[],"output":{"name":"box"}}],[11,"from_self","","",40,null],[11,"is_ascii_compatible","","",40,null],[11,"raw_feed","","",40,null],[11,"raw_finish","","",40,null],[0,"whatwg","encoding::codec","Asymmetric or special encoding constructions required by the WHATWG Encoding standard.",null,null],[3,"EncoderOnlyUTF8Encoding","encoding::codec::whatwg","Replacement encoding used to solve a particular attack vector due to mismatching server and\nclient supports for encodings. It is rarely useful outside.",null,null],[0,"x_user_defined","","Algorithmic mapping for `x-user-defined` encoding.",null,null],[5,"forward","encoding::codec::whatwg::x_user_defined","",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[11,"clone","encoding::codec::whatwg","",41,null],[11,"name","","",41,null],[11,"whatwg_name","","",41,null],[11,"raw_encoder","","",41,null],[11,"raw_decoder","","",41,null],[0,"all","encoding","A list of all supported encodings. Useful for encodings fixed in the compile time.",null,null],[5,"encodings","encoding::all","Returns a list of references to the encodings available.",null,null],[0,"whatwg","","",null,null],[17,"X_USER_DEFINED","encoding::all::whatwg","",null,null],[17,"ISO_8859_8_I","","",null,null],[17,"REPLACEMENT","","",null,null],[17,"ERROR","encoding::all","",null,null],[17,"ASCII","","",null,null],[17,"IBM866","","",null,null],[17,"ISO_8859_1","","",null,null],[17,"ISO_8859_2","","",null,null],[17,"ISO_8859_3","","",null,null],[17,"ISO_8859_4","","",null,null],[17,"ISO_8859_5","","",null,null],[17,"ISO_8859_6","","",null,null],[17,"ISO_8859_7","","",null,null],[17,"ISO_8859_8","","",null,null],[17,"ISO_8859_10","","",null,null],[17,"ISO_8859_13","","",null,null],[17,"ISO_8859_14","","",null,null],[17,"ISO_8859_15","","",null,null],[17,"ISO_8859_16","","",null,null],[17,"KOI8_R","","",null,null],[17,"KOI8_U","","",null,null],[17,"MAC_ROMAN","","",null,null],[17,"WINDOWS_874","","",null,null],[17,"WINDOWS_1250","","",null,null],[17,"WINDOWS_1251","","",null,null],[17,"WINDOWS_1252","","",null,null],[17,"WINDOWS_1253","","",null,null],[17,"WINDOWS_1254","","",null,null],[17,"WINDOWS_1255","","",null,null],[17,"WINDOWS_1256","","",null,null],[17,"WINDOWS_1257","","",null,null],[17,"WINDOWS_1258","","",null,null],[17,"MAC_CYRILLIC","","",null,null],[17,"UTF_8","","",null,null],[17,"UTF_16LE","","",null,null],[17,"UTF_16BE","","",null,null],[17,"WINDOWS_949","","",null,null],[17,"EUC_JP","","",null,null],[17,"WINDOWS_31J","","",null,null],[17,"ISO_2022_JP","","",null,null],[17,"GBK","","",null,null],[17,"GB18030","","",null,null],[17,"HZ","","",null,null],[17,"BIG5_2003","","",null,null],[0,"label","encoding","An interface for retrieving an encoding (or a set of encodings) from a string/numeric label.",null,null],[5,"encoding_from_whatwg_label","encoding::label","Returns an encoding from given label, defined in the WHATWG Encoding standard, if any.\nImplements &quot;get an encoding&quot; algorithm: http://encoding.spec.whatwg.org/#concept-encoding-get",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[5,"encoding_from_windows_code_page","","Returns an encoding from Windows code page number.\nhttp://msdn.microsoft.com/en-us/library/windows/desktop/dd317756%28v=vs.85%29.aspx\nSometimes it can return a *superset* of the requested encoding, e.g. for several CJK encodings.",null,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}]],"paths":[[3,"CodecError"],[4,"DecoderTrap"],[4,"EncoderTrap"],[8,"ByteWriter"],[8,"StringWriter"],[8,"RawEncoder"],[8,"RawDecoder"],[8,"Encoding"],[3,"ErrorEncoding"],[3,"ErrorEncoder"],[3,"ErrorDecoder"],[3,"ASCIIEncoding"],[3,"ASCIIEncoder"],[3,"ASCIIDecoder"],[3,"SingleByteEncoding"],[3,"SingleByteEncoder"],[3,"SingleByteDecoder"],[3,"UTF8Encoding"],[3,"UTF8Encoder"],[3,"UTF8Decoder"],[3,"Little"],[3,"Big"],[3,"UTF16Encoding"],[3,"UTF16Encoder"],[3,"UTF16Decoder"],[3,"Windows949Encoding"],[3,"Windows949Encoder"],[3,"EUCJPEncoding"],[3,"EUCJPEncoder"],[3,"Windows31JEncoding"],[3,"Windows31JEncoder"],[3,"ISO2022JPEncoding"],[3,"ISO2022JPEncoder"],[3,"GBK"],[3,"GB18030"],[3,"GBEncoding"],[3,"GBEncoder"],[3,"HZEncoding"],[3,"HZEncoder"],[3,"BigFive2003Encoding"],[3,"BigFive2003Encoder"],[3,"EncoderOnlyUTF8Encoding"]]};
searchIndex["toml"] = {"doc":"A TOML-parsing library","items":[[3,"Parser","toml","Parser for converting a string to a TOML `Value` instance.",null,null],[12,"errors","","A list of all errors which have occurred during parsing.",0,null],[3,"ParserError","","A structure representing a parse error.",null,null],[12,"lo","","The low byte at which this error is pointing at.",1,null],[12,"hi","","One byte beyond the last character at which this error is pointing at.",1,null],[12,"desc","","A human-readable description explaining what the error is.",1,null],[3,"Encoder","","A structure to transform Rust values into TOML values.",null,null],[12,"toml","","Output TOML that is emitted. The current version of this encoder forces\nthe top-level representation of a structure to be a table.",2,null],[3,"EncoderState","","Internal state of the encoder when encoding transitions",null,null],[3,"Decoder","","A structure to transform TOML values into Rust values.",null,null],[12,"toml","","The TOML value left over after decoding. This can be used to inspect\nwhether fields were decoded or not.",3,null],[3,"DecodeError","","Description for errors which can occur while decoding a type.",null,null],[12,"field","","Field that this error applies to.",4,null],[12,"kind","","The type of error which occurred while decoding,",4,null],[4,"Error","","Enumeration of errors which can occur while encoding a rust value into a\nTOML value.",null,null],[13,"NeedsKey","","Indication that a key was needed when a value was emitted, but no key\nwas previously emitted.",5,null],[13,"NoValue","","Indication that a key was emitted, but no value was emitted.",5,null],[13,"InvalidMapKeyLocation","","Indicates that a map key was attempted to be emitted at an invalid\nlocation.",5,null],[13,"InvalidMapKeyType","","Indicates that a type other than a string was attempted to be used as a\nmap key type.",5,null],[13,"Custom","","A custom error type was generated",5,null],[4,"DecodeErrorKind","","Enumeration of possible errors which can occur while decoding a structure.",null,null],[13,"ApplicationError","","An error flagged by the application, e.g. value out of range",6,null],[13,"ExpectedField","","A field was expected, but none was found.",6,null],[13,"UnknownField","","A field was found, but it was not an expected one.",6,null],[13,"ExpectedType","","A field was found, but it had the wrong type.",6,null],[13,"ExpectedMapKey","","The nth map key was expected, but none was found.",6,null],[13,"ExpectedMapElement","","The nth map element was expected, but none was found.",6,null],[13,"NoEnumVariants","","An enum decoding was requested, but no variants were supplied",6,null],[13,"NilTooLong","","The unit type was being decoded, but a non-zero length string was found",6,null],[13,"SyntaxError","","There was an error with the syntactical structure of the TOML.",6,null],[13,"CustomError","","A custom error was generated when decoding.",6,null],[13,"EndOfStream","","The end of the TOML input was reached too soon",6,null],[13,"InvalidType","","Produced by serde ...",6,null],[4,"Value","","Representation of a TOML value.",null,null],[13,"String","","",7,null],[13,"Integer","","",7,null],[13,"Float","","",7,null],[13,"Boolean","","",7,null],[13,"Datetime","","",7,null],[13,"Array","","",7,null],[13,"Table","","",7,null],[5,"encode","","Encodes an encodable value into a TOML value.",null,{"inputs":[{"name":"t"}],"output":{"name":"value"}}],[5,"encode_str","","Encodes an encodable value into a TOML string.",null,{"inputs":[{"name":"t"}],"output":{"name":"string"}}],[5,"decode","","Decodes a TOML value into a decodable type.",null,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[5,"decode_str","","Decodes a string into a toml-encoded value.",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[11,"fmt","","",1,null],[11,"clone","","",1,null],[11,"new","","Creates a new parser for a string.",0,{"inputs":[{"name":"str"}],"output":{"name":"parser"}}],[11,"to_linecol","","Converts a byte offset from an error message to a (line, column) pair",0,null],[11,"set_require_newline_after_table","","Historical versions of toml-rs accidentally allowed a newline after a\ntable definition, but the TOML spec requires a newline after a table\ndefinition header.",0,null],[11,"parse","","Executes the parser, parsing the string contained within.",0,null],[11,"lookup","","Parse a path into a vector of paths",0,null],[11,"description","","",1,null],[11,"fmt","","",1,null],[11,"fmt","","",7,null],[11,"emit_nil","","",2,null],[11,"emit_usize","","",2,null],[11,"emit_u8","","",2,null],[11,"emit_u16","","",2,null],[11,"emit_u32","","",2,null],[11,"emit_u64","","",2,null],[11,"emit_isize","","",2,null],[11,"emit_i8","","",2,null],[11,"emit_i16","","",2,null],[11,"emit_i32","","",2,null],[11,"emit_i64","","",2,null],[11,"emit_bool","","",2,null],[11,"emit_f32","","",2,null],[11,"emit_f64","","",2,null],[11,"emit_char","","",2,null],[11,"emit_str","","",2,null],[11,"emit_enum","","",2,null],[11,"emit_enum_variant","","",2,null],[11,"emit_enum_variant_arg","","",2,null],[11,"emit_enum_struct_variant","","",2,null],[11,"emit_enum_struct_variant_field","","",2,null],[11,"emit_struct","","",2,null],[11,"emit_struct_field","","",2,null],[11,"emit_tuple","","",2,null],[11,"emit_tuple_arg","","",2,null],[11,"emit_tuple_struct","","",2,null],[11,"emit_tuple_struct_arg","","",2,null],[11,"emit_option","","",2,null],[11,"emit_option_none","","",2,null],[11,"emit_option_some","","",2,null],[11,"emit_seq","","",2,null],[11,"emit_seq_elt","","",2,null],[11,"emit_map","","",2,null],[11,"emit_map_elt_key","","",2,null],[11,"emit_map_elt_val","","",2,null],[11,"encode","","",7,null],[11,"default","","",2,{"inputs":[],"output":{"name":"encoder"}}],[11,"fmt","","",2,null],[11,"fmt","","",5,null],[11,"fmt","","",8,null],[11,"new","","Constructs a new encoder which will emit to the given output stream.",2,{"inputs":[],"output":{"name":"encoder"}}],[11,"fmt","","",5,null],[11,"description","","",5,null],[11,"read_nil","","",3,null],[11,"read_usize","","",3,null],[11,"read_u64","","",3,null],[11,"read_u32","","",3,null],[11,"read_u16","","",3,null],[11,"read_u8","","",3,null],[11,"read_isize","","",3,null],[11,"read_i64","","",3,null],[11,"read_i32","","",3,null],[11,"read_i16","","",3,null],[11,"read_i8","","",3,null],[11,"read_bool","","",3,null],[11,"read_f64","","",3,null],[11,"read_f32","","",3,null],[11,"read_char","","",3,null],[11,"read_str","","",3,null],[11,"read_enum","","",3,null],[11,"read_enum_variant","","",3,null],[11,"read_enum_variant_arg","","",3,null],[11,"read_enum_struct_variant","","",3,null],[11,"read_enum_struct_variant_field","","",3,null],[11,"read_struct","","",3,null],[11,"read_struct_field","","",3,null],[11,"read_tuple","","",3,null],[11,"read_tuple_arg","","",3,null],[11,"read_tuple_struct","","",3,null],[11,"read_tuple_struct_arg","","",3,null],[11,"read_option","","",3,null],[11,"read_seq","","",3,null],[11,"read_seq_elt","","",3,null],[11,"read_map","","",3,null],[11,"read_map_elt_key","","",3,null],[11,"read_map_elt_val","","",3,null],[11,"error","","",3,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"fmt","","",4,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"fmt","","",6,null],[11,"new","","Creates a new decoder, consuming the TOML value to decode.",3,{"inputs":[{"name":"value"}],"output":{"name":"decoder"}}],[11,"fmt","","",4,null],[11,"description","","",4,null],[6,"Array","","Type representing a TOML array, payload of the `Value::Array` variant",null,null],[6,"Table","","Type representing a TOML table, payload of the `Value::Table` variant",null,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"clone","","",7,null],[11,"fmt","","",7,null],[11,"same_type","","Tests whether this and another value have the same type.",7,null],[11,"type_str","","Returns a human-readable representation of the type of this value.",7,null],[11,"as_str","","Extracts the string of this value if it is a string.",7,null],[11,"as_integer","","Extracts the integer value if it is an integer.",7,null],[11,"as_float","","Extracts the float value if it is a float.",7,null],[11,"as_bool","","Extracts the boolean value if it is a boolean.",7,null],[11,"as_datetime","","Extracts the datetime value if it is a datetime.",7,null],[11,"as_slice","","Extracts the array value if it is an array.",7,null],[11,"as_table","","Extracts the table value if it is a table.",7,null],[11,"lookup","","Lookups for value at specified path.",7,null],[11,"lookup_mut","","Lookups for mutable value at specified path.",7,null],[11,"from_str","","",7,{"inputs":[{"name":"str"}],"output":{"name":"result"}}]],"paths":[[3,"Parser"],[3,"ParserError"],[3,"Encoder"],[3,"Decoder"],[3,"DecodeError"],[4,"Error"],[4,"DecodeErrorKind"],[4,"Value"],[3,"EncoderState"]]};
searchIndex["num_cpus"] = {"doc":"Replaces the deprecated functionality of std::os::num_cpus.","items":[[5,"get","num_cpus","Returns the number of CPUs of the current machine.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"get_physical","","Returns the number of physical cores of the current machine.\nIf not possible on the particular architecture returns same as get() which\nis the logical CPUs.",null,{"inputs":[],"output":{"name":"usize"}}]],"paths":[]};
searchIndex["term_size"] = {"doc":"System calls for getting the terminal size.","items":[[5,"dimensions","term_size","Query the current processes&#39;s output, returning its width and height as a\nnumber of characters. Returns `None` if the output isn&#39;t to a terminal.",null,{"inputs":[],"output":{"name":"option"}}],[5,"ioctl","","",null,null]],"paths":[]};
searchIndex["csv"] = {"doc":"This crate provides a streaming CSV (comma separated values) writer and\nreader that works with the `serialize` crate to do type based encoding\nand decoding. There are two primary goals of this project:","items":[[3,"Encoded","csv","A record to be encoded.",null,null],[3,"Decoded","","A record to be decoded.",null,null],[3,"Reader","","A CSV reader.",null,null],[3,"DecodedRecords","","An iterator of decoded records.",null,null],[3,"StringRecords","","An iterator of `String` records.",null,null],[3,"ByteRecords","","An iterator of `ByteString` records.",null,null],[3,"Writer","","A CSV writer.",null,null],[3,"LocatableError","","An error tagged with a location at which it occurred.",null,null],[12,"record","","The record number (starting at 1).",0,null],[12,"field","","The field number (starting at 1).",0,null],[12,"err","","The error.",0,null],[4,"NextField","","NextField is the result of parsing a single CSV field.",null,null],[13,"Data","","A single CSV field as a borrowed slice of the parser&#39;s internal buffer.",1,null],[13,"Error","","A CSV error found during parsing. When an error is found, it is\nfirst returned. All subsequent calls of `next_bytes` will return\n`EndOfCsv`. (EOF is exempt from this. Depending on the state of the\nparser, an EOF could trigger `Data`, `EndOfRecord` and `EndOfCsv`,\nall in succession.)",1,null],[13,"EndOfRecord","","Indicates the end of a record.",1,null],[13,"EndOfCsv","","Indicates the end of the CSV data. Once this state is entered, the\nparser can never leave it.",1,null],[4,"RecordTerminator","","A record terminator.",null,null],[13,"CRLF","","Parses `\\r`, `\\n` or `\\r\\n` as a single record terminator.",2,null],[13,"Any","","Parses the byte given as a record terminator.",2,null],[4,"QuoteStyle","","The quoting style to use when writing CSV data.",null,null],[13,"Always","","This puts quotes around every field. Always.",3,null],[13,"Necessary","","This puts quotes around fields only when necessary.",3,null],[13,"Never","","This *never* writes quotes.",3,null],[4,"Error","","An error produced by an operation on CSV data.",null,null],[13,"Encode","","An error reported by the type-based encoder.",4,null],[13,"Decode","","An error reported by the type-based decoder.",4,null],[13,"Parse","","An error reported by the CSV parser.",4,null],[13,"Io","","An error originating from reading or writing to the underlying buffer.",4,null],[13,"Index","","An error originating from using a CSV index.",4,null],[4,"ParseError","","A description of a CSV parse error.",null,null],[13,"UnequalLengths","","A record was found that has a different size than other records.",5,null],[12,"expected","csv::ParseError","Expected a record with this many fields.",5,null],[12,"got","","Got a record with this many fields.",5,null],[13,"InvalidUtf8","csv","An error occurred when trying to convert a field to a Unicode string.",5,null],[0,"index","","This sub-module provides experimental CSV record indexing.",null,null],[3,"Indexed","csv::index","A type for representing CSV data with a basic record index.",null,null],[5,"create_index","","Creates a new index for the given CSV reader.",null,{"inputs":[{"name":"reader"},{"name":"w"}],"output":{"name":"result"}}],[11,"deref","","",6,null],[11,"deref_mut","","",6,null],[11,"open","","Opens a new index corresponding to the CSV reader given.",6,{"inputs":[{"name":"reader"},{"name":"i"}],"output":{"name":"result"}}],[11,"seek","","Seeks to `i`th record.",6,null],[11,"count","","Returns the number of CSV records in the index in `O(1)` time.",6,null],[11,"new","csv","Creates a new encodable record. The value returned can be passed to\n`Encodable::encode`.",7,{"inputs":[],"output":{"name":"encoded"}}],[11,"unwrap","","Once a record has been encoded into this value, `unwrap` can be used\nto access the raw CSV record.",7,null],[11,"emit_nil","","",7,null],[11,"emit_usize","","",7,null],[11,"emit_u64","","",7,null],[11,"emit_u32","","",7,null],[11,"emit_u16","","",7,null],[11,"emit_u8","","",7,null],[11,"emit_isize","","",7,null],[11,"emit_i64","","",7,null],[11,"emit_i32","","",7,null],[11,"emit_i16","","",7,null],[11,"emit_i8","","",7,null],[11,"emit_bool","","",7,null],[11,"emit_f64","","",7,null],[11,"emit_f32","","",7,null],[11,"emit_char","","",7,null],[11,"emit_str","","",7,null],[11,"emit_enum","","",7,null],[11,"emit_enum_variant","","",7,null],[11,"emit_enum_variant_arg","","",7,null],[11,"emit_enum_struct_variant","","",7,null],[11,"emit_enum_struct_variant_field","","",7,null],[11,"emit_struct","","",7,null],[11,"emit_struct_field","","",7,null],[11,"emit_tuple","","",7,null],[11,"emit_tuple_arg","","",7,null],[11,"emit_tuple_struct","","",7,null],[11,"emit_tuple_struct_arg","","",7,null],[11,"emit_option","","",7,null],[11,"emit_option_none","","",7,null],[11,"emit_option_some","","",7,null],[11,"emit_seq","","",7,null],[11,"emit_seq_elt","","",7,null],[11,"emit_map","","",7,null],[11,"emit_map_elt_key","","",7,null],[11,"emit_map_elt_val","","",7,null],[11,"new","","Creates a new decodable record from a record of byte strings.",8,{"inputs":[{"name":"vec"}],"output":{"name":"decoded"}}],[11,"error","","",8,null],[11,"read_nil","","",8,null],[11,"read_usize","","",8,null],[11,"read_u64","","",8,null],[11,"read_u32","","",8,null],[11,"read_u16","","",8,null],[11,"read_u8","","",8,null],[11,"read_isize","","",8,null],[11,"read_i64","","",8,null],[11,"read_i32","","",8,null],[11,"read_i16","","",8,null],[11,"read_i8","","",8,null],[11,"read_bool","","",8,null],[11,"read_f64","","",8,null],[11,"read_f32","","",8,null],[11,"read_char","","",8,null],[11,"read_str","","",8,null],[11,"read_enum","","",8,null],[11,"read_enum_variant","","",8,null],[11,"read_enum_variant_arg","","",8,null],[11,"read_enum_struct_variant","","",8,null],[11,"read_enum_struct_variant_field","","",8,null],[11,"read_struct","","",8,null],[11,"read_struct_field","","",8,null],[11,"read_tuple","","",8,null],[11,"read_tuple_arg","","",8,null],[11,"read_tuple_struct","","",8,null],[11,"read_tuple_struct_arg","","",8,null],[11,"read_option","","",8,null],[11,"read_seq","","",8,null],[11,"read_seq_elt","","",8,null],[11,"read_map","","",8,null],[11,"read_map_elt_key","","",8,null],[11,"read_map_elt_val","","",8,null],[11,"clone","","",2,null],[11,"eq","","",2,null],[11,"from_reader","","Creates a new CSV reader from an arbitrary `io::Read`.",9,{"inputs":[{"name":"r"}],"output":{"name":"reader"}}],[11,"from_file","","Creates a new CSV reader for the data at the file path given.",9,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"from_string","","Creates a CSV reader for an in memory string buffer.",9,{"inputs":[{"name":"s"}],"output":{"name":"reader"}}],[11,"from_bytes","","Creates a CSV reader for an in memory buffer of bytes.",9,{"inputs":[{"name":"v"}],"output":{"name":"reader"}}],[11,"decode","","Uses type-based decoding to read a single record from CSV data.",9,null],[11,"records","","Returns an iterator of records in the CSV data where each field is\na `String`.",9,null],[11,"headers","","Returns a *copy* of the first record in the CSV data as strings.",9,null],[11,"delimiter","","The delimiter to use when reading CSV data.",9,null],[11,"has_headers","","Whether to treat the first row as a special header row.",9,null],[11,"flexible","","Whether to allow flexible length records when reading CSV data.",9,null],[11,"record_terminator","","Set the record terminator to use when reading CSV data.",9,null],[11,"quote","","Set the quote character to use when reading CSV data.",9,null],[11,"escape","","Set the escape character to use when reading CSV data.",9,null],[11,"double_quote","","Enable double quote escapes.",9,null],[11,"ascii","","A convenience method for reading ASCII delimited text.",9,null],[11,"fmt","","",1,null],[11,"into_iter_result","","Transform NextField into an iterator result.",1,null],[11,"is_end","","Returns true if and only if the end of CSV data has been reached.",1,null],[11,"unwrap","","Returns the underlying field data.",1,null],[11,"byte_headers","","This is just like `headers`, except fields are `ByteString`s instead\nof `String`s.",9,null],[11,"byte_records","","This is just like `records`, except fields are `ByteString`s instead\nof `String`s.",9,null],[11,"done","","Returns `true` if the CSV parser has reached its final state. When\nthis method returns `true`, all iterators will always return `None`.",9,null],[11,"next_bytes","","An iterator over fields in the current record.",9,null],[11,"next_str","","This is just like `next_bytes` except it converts each field to\na Unicode string in place.",9,null],[11,"byte_offset","","Returns the byte offset at which the current record started.",9,null],[11,"seek","","Seeks the underlying reader to the file cursor specified.",9,null],[11,"next","","",10,null],[11,"next","","",11,null],[11,"next","","",12,null],[11,"clone","","",3,null],[11,"from_file","","Creates a new `Writer` that writes CSV data to the file path given.",13,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"from_writer","","Creates a new CSV writer that writes to the `io::Write` given.",13,{"inputs":[{"name":"w"}],"output":{"name":"writer"}}],[11,"from_buffer","","Creates a new CSV writer that writes to the buffer given.",13,{"inputs":[{"name":"bufwriter"}],"output":{"name":"writer"}}],[11,"from_memory","","Creates a new CSV writer that writes to an in memory buffer. At any\ntime, `as_string` or `as_bytes` can be called to retrieve the\ncumulative CSV data.",13,{"inputs":[],"output":{"name":"writer"}}],[11,"as_string","","Returns the written CSV data as a string.",13,null],[11,"as_bytes","","Returns the encoded CSV data as raw bytes.",13,null],[11,"into_string","","Convert the Writer into a string of written CSV data",13,null],[11,"into_bytes","","Convert the Writer into a vector of encoded CSV bytes.",13,null],[11,"encode","","Writes a record by encoding any `Encodable` value.",13,null],[11,"write","","Writes a record of strings (Unicode or raw bytes).",13,null],[11,"flush","","Flushes the underlying buffer.",13,null],[11,"delimiter","","The delimiter to use when writing CSV data.",13,null],[11,"flexible","","Whether to allow flexible length records when writing CSV data.",13,null],[11,"record_terminator","","Sets the record terminator to use when writing CSV data.",13,null],[11,"quote_style","","Set the quoting style to use when writing CSV data.",13,null],[11,"quote","","Set the quote character to use when writing CSV data.",13,null],[11,"escape","","Set the escape character to use when writing CSV data.",13,null],[11,"double_quote","","Set the quoting escape mechanism.",13,null],[6,"Result","","A convenience type for representing the result of most CSV reader/writer\noperations.",null,null],[6,"ByteString","","A convenience type for referring to a plain byte string.",null,null],[8,"BorrowBytes","","A trait that permits borrowing byte vectors.",null,null],[10,"borrow_bytes","","Borrow a byte vector.",14,null],[11,"fmt","","",4,null],[11,"clone","","",0,null],[11,"fmt","","",0,null],[11,"clone","","",5,null],[11,"fmt","","",5,null],[11,"fmt","","",4,null],[11,"fmt","","",0,null],[11,"fmt","","",5,null],[11,"description","","",4,null],[11,"cause","","",4,null],[11,"from","","",4,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"borrow_bytes","","",15,null]],"paths":[[3,"LocatableError"],[4,"NextField"],[4,"RecordTerminator"],[4,"QuoteStyle"],[4,"Error"],[4,"ParseError"],[3,"Indexed"],[3,"Encoded"],[3,"Decoded"],[3,"Reader"],[3,"DecodedRecords"],[3,"StringRecords"],[3,"ByteRecords"],[3,"Writer"],[8,"BorrowBytes"],[6,"ByteString"]]};
searchIndex["syntex_pos"] = {"doc":"The source positions and related helper functions","items":[[3,"Span","syntex_pos","Spans represent a region of code, used for error reporting. Positions in spans\nare *absolute* positions from the beginning of the codemap, not positions\nrelative to FileMaps. Methods on the CodeMap can be used to relate spans back\nto the original source.\nYou must be careful if the span crosses more than one file - you will not be\nable to use many of the functions on spans in codemap and you cannot assume\nthat the length of the span = hi - lo; there may be space in the BytePos\nrange between files.",null,null],[12,"lo","","",0,null],[12,"hi","","",0,null],[12,"expn_id","","Information about where the macro came from, if this piece of\ncode was created by a macro expansion.",0,null],[3,"MultiSpan","","A collection of spans. Spans have two orthogonal attributes:",null,null],[3,"SpanLabel","","",null,null],[12,"span","","The span we are going to include in the final snippet.",1,null],[12,"is_primary","","Is this a primary span? This is the &quot;locus&quot; of the message,\nand is indicated with a `^^^^` underline, versus `----`.",1,null],[12,"label","","What label should we attach to this span (if any)?",1,null],[3,"ExpnId","","",null,null],[12,"0","","",2,null],[3,"MultiByteChar","","Identifies an offset of a multi-byte character in a FileMap",null,null],[12,"pos","","The absolute offset of the character in the CodeMap",3,null],[12,"bytes","","The number of bytes, &gt;=2",3,null],[3,"FileMap","","A single source in the CodeMap.",null,null],[12,"name","","The name of the file that the source came from, source that doesn&#39;t\noriginate from files has names between angle brackets by convention,\ne.g. `&lt;anon&gt;`",4,null],[12,"abs_path","","The absolute path of the file that the source came from.",4,null],[12,"src","","The complete source code",4,null],[12,"start_pos","","The start position of this source in the CodeMap",4,null],[12,"end_pos","","The end position of this source in the CodeMap",4,null],[12,"lines","","Locations of lines beginnings in the source code",4,null],[12,"multibyte_chars","","Locations of multi-byte characters in the source code",4,null],[3,"BytePos","","A byte offset. Keep this small (currently 32-bits), as AST contains\na lot of them.",null,null],[12,"0","","",5,null],[3,"CharPos","","A character offset. Because of multibyte utf8 characters, a byte offset\nis not equivalent to a character offset. The CodeMap will convert BytePos\nvalues to CharPos values as necessary.",null,null],[12,"0","","",6,null],[3,"Loc","","A source code location used for error reporting",null,null],[12,"file","","Information about the original source",7,null],[12,"line","","The (1-based) line number",7,null],[12,"col","","The (0-based) column offset",7,null],[3,"LocWithOpt","","A source code location used as the result of lookup_char_pos_adj",null,null],[12,"filename","","",8,null],[12,"line","","",8,null],[12,"col","","",8,null],[12,"file","","",8,null],[3,"FileMapAndLine","","",null,null],[12,"fm","","",9,null],[12,"line","","",9,null],[3,"FileMapAndBytePos","","",null,null],[12,"fm","","",10,null],[12,"pos","","",10,null],[3,"LineInfo","","",null,null],[12,"line_index","","Index of line, starting from 0.",11,null],[12,"start_col","","Column in line where span begins, starting from 0.",11,null],[12,"end_col","","Column in line where span ends, starting from 0, exclusive.",11,null],[3,"FileLines","","",null,null],[12,"file","","",12,null],[12,"lines","","",12,null],[3,"MacroBacktrace","","",null,null],[12,"call_site","","span where macro was applied to generate this code",13,null],[12,"macro_decl_name","","name of macro that was applied (e.g., &quot;foo!&quot; or &quot;#[derive(Eq)]&quot;)",13,null],[12,"def_site_span","","span where macro was defined (if known)",13,null],[3,"DistinctSources","","",null,null],[12,"begin","","",14,null],[12,"end","","",14,null],[3,"MalformedCodemapPositions","","",null,null],[12,"name","","",15,null],[12,"source_len","","",15,null],[12,"begin_pos","","",15,null],[12,"end_pos","","",15,null],[4,"SpanLinesError","","",null,null],[13,"IllFormedSpan","","",16,null],[13,"DistinctSources","","",16,null],[4,"SpanSnippetError","","",null,null],[13,"IllFormedSpan","","",17,null],[13,"DistinctSources","","",17,null],[13,"MalformedForCodemap","","",17,null],[13,"SourceNotAvailable","","",17,null],[12,"filename","syntex_pos::SpanSnippetError","",17,null],[5,"mk_sp","syntex_pos","",null,{"inputs":[{"name":"bytepos"},{"name":"bytepos"}],"output":{"name":"span"}}],[6,"FileName","","",null,null],[6,"FileLinesResult","","",null,null],[7,"SPAN_DEBUG","","",null,null],[17,"DUMMY_SP","","",null,null],[17,"COMMAND_LINE_SP","","",null,null],[17,"NO_EXPANSION","","",null,null],[17,"COMMAND_LINE_EXPN","","",null,null],[17,"PROC_EXPN","","",null,null],[8,"Pos","","",null,null],[10,"from_usize","","",18,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[10,"to_usize","","",18,null],[11,"clone","","",0,null],[11,"hash","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"clone","","",19,null],[11,"end_point","","Returns a new span representing just the end-point of this span",0,null],[11,"substitute_dummy","","Returns `self` if `self` is not the dummy span, and `other` otherwise.",0,null],[11,"contains","","",0,null],[11,"source_equal","","Return true if the spans are equal with regards to the source text.",0,null],[11,"merge","","Returns `Some(span)`, a union of `self` and `other`, on overlap.",0,null],[11,"trim_start","","Returns `Some(span)`, where the start is trimmed by the end of `other`",0,null],[11,"clone","","",1,null],[11,"fmt","","",1,null],[11,"encode","","",0,null],[11,"decode","","",0,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",0,null],[11,"new","","",19,{"inputs":[],"output":{"name":"multispan"}}],[11,"from_span","","",19,{"inputs":[{"name":"span"}],"output":{"name":"multispan"}}],[11,"from_spans","","",19,{"inputs":[{"name":"vec"}],"output":{"name":"multispan"}}],[11,"push_span_label","","",19,null],[11,"primary_span","","Selects the first primary span (if any)",19,null],[11,"primary_spans","","Returns all primary spans.",19,null],[11,"replace","","Replaces all occurances of one Span with another. Used to move Spans in areas that don&#39;t\ndisplay well (like std macros). Returns true if replacements occurred.",19,null],[11,"span_labels","","Returns the strings to highlight. We always ensure that there\nis an entry for each of the primary spans -- for each primary\nspan P, if there is at least one label with span P, we return\nthose labels (marked as primary). But otherwise we return\n`SpanLabel` instances with empty labels.",19,null],[11,"from","","",19,{"inputs":[{"name":"span"}],"output":{"name":"multispan"}}],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"clone","","",2,null],[11,"fmt","","",2,null],[11,"hash","","",2,null],[11,"encode","","",2,null],[11,"decode","","",2,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"from_u32","","",2,{"inputs":[{"name":"u32"}],"output":{"name":"expnid"}}],[11,"into_u32","","",2,null],[11,"clone","","",3,null],[11,"encode","","",3,null],[11,"decode","","",3,{"inputs":[{"name":"__d"}],"output":{"name":"result"}}],[11,"eq","","",3,null],[11,"ne","","",3,null],[11,"encode","","",4,null],[11,"decode","","",4,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"fmt","","",4,null],[11,"next_line","","EFFECT: register a start-of-line offset in the\ntable of line-beginnings.\nUNCHECKED INVARIANT: these offsets must be added in the right\norder and must be in the right places; there is shared knowledge\nabout what ends a line between this file and parse.rs\nWARNING: pos param here is the offset relative to start of CodeMap,\nand CodeMap will append a newline when adding a filemap without a newline at the end,\nso the safe way to call this is with value calculated as\nfilemap.start_pos + newline_offset_relative_to_the_start_of_filemap.",4,null],[11,"get_line","","get a line from the list of pre-computed line-beginnings.\nline-number here is 0-based.",4,null],[11,"record_multibyte_char","","",4,null],[11,"is_real_file","","",4,null],[11,"is_imported","","",4,null],[11,"count_lines","","",4,null],[11,"clone","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"hash","","",5,null],[11,"partial_cmp","","",5,null],[11,"lt","","",5,null],[11,"le","","",5,null],[11,"gt","","",5,null],[11,"ge","","",5,null],[11,"cmp","","",5,null],[11,"fmt","","",5,null],[11,"clone","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"hash","","",6,null],[11,"partial_cmp","","",6,null],[11,"lt","","",6,null],[11,"le","","",6,null],[11,"gt","","",6,null],[11,"ge","","",6,null],[11,"cmp","","",6,null],[11,"fmt","","",6,null],[11,"from_usize","","",5,{"inputs":[{"name":"usize"}],"output":{"name":"bytepos"}}],[11,"to_usize","","",5,null],[11,"add","","",5,null],[11,"sub","","",5,null],[11,"encode","","",5,null],[11,"decode","","",5,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"from_usize","","",6,{"inputs":[{"name":"usize"}],"output":{"name":"charpos"}}],[11,"to_usize","","",6,null],[11,"add","","",6,null],[11,"sub","","",6,null],[11,"fmt","","",7,null],[11,"clone","","",7,null],[11,"fmt","","",8,null],[11,"fmt","","",9,null],[11,"fmt","","",10,null],[11,"clone","","",11,null],[11,"fmt","","",11,null],[11,"eq","","",11,null],[11,"ne","","",11,null],[11,"clone","","",16,null],[11,"eq","","",16,null],[11,"ne","","",16,null],[11,"fmt","","",16,null],[11,"clone","","",17,null],[11,"eq","","",17,null],[11,"ne","","",17,null],[11,"fmt","","",17,null],[11,"clone","","",14,null],[11,"eq","","",14,null],[11,"ne","","",14,null],[11,"fmt","","",14,null],[11,"clone","","",15,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"fmt","","",15,null]],"paths":[[3,"Span"],[3,"SpanLabel"],[3,"ExpnId"],[3,"MultiByteChar"],[3,"FileMap"],[3,"BytePos"],[3,"CharPos"],[3,"Loc"],[3,"LocWithOpt"],[3,"FileMapAndLine"],[3,"FileMapAndBytePos"],[3,"LineInfo"],[3,"FileLines"],[3,"MacroBacktrace"],[3,"DistinctSources"],[3,"MalformedCodemapPositions"],[4,"SpanLinesError"],[4,"SpanSnippetError"],[8,"Pos"],[3,"MultiSpan"]]};
searchIndex["encoding_index_korean"] = {"doc":"Korean index tables for [rust-encoding](https://github.com/lifthrasiir/rust-encoding).","items":[[0,"euc_kr","encoding_index_korean","KS X 1001 plus Unified Hangul Code.",null,null],[5,"forward","encoding_index_korean::euc_kr","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u16"}],"output":{"name":"u32"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u16"}}]],"paths":[]};
searchIndex["rustc_serialize"] = {"doc":"Support code for encoding and decoding types.","items":[[0,"base64","rustc_serialize","Base64 binary-to-text encoding",null,null],[3,"Config","rustc_serialize::base64","Contains configuration parameters for `to_base64`.",null,null],[12,"char_set","","Character set to use",0,null],[12,"newline","","Newline to use",0,null],[12,"pad","","True to pad output with `=` characters",0,null],[12,"line_length","","`Some(len)` to wrap lines at `len`, `None` to disable line wrapping",0,null],[4,"CharacterSet","","Available encoding character sets",null,null],[13,"Standard","","The standard character set (uses `+` and `/`)",1,null],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`)",1,null],[4,"Newline","","Available newline types",null,null],[13,"LF","","A linefeed (i.e. Unix-style newline)",2,null],[13,"CRLF","","A carriage return and a linefeed (i.e. Windows-style newline)",2,null],[4,"FromBase64Error","","Errors that can occur when decoding a base64 encoded string",null,null],[13,"InvalidBase64Byte","","The input contained a character not part of the base64 format",3,null],[13,"InvalidBase64Length","","The input had an invalid length",3,null],[7,"STANDARD","","Configuration for RFC 4648 standard base64 encoding",null,null],[7,"URL_SAFE","","Configuration for RFC 4648 base64url encoding",null,null],[7,"MIME","","Configuration for RFC 2045 MIME base64 encoding",null,null],[8,"ToBase64","","A trait for converting a value to base64 encoding.",null,null],[10,"to_base64","","Converts the value of `self` to a base64 value following the specified\nformat configuration, returning the owned string.",4,null],[8,"FromBase64","","A trait for converting from base64 encoded values.",null,null],[10,"from_base64","","Converts the value of `self`, interpreted as base64 encoded data, into\nan owned vector of bytes, returning the vector.",5,null],[11,"clone","","",1,null],[11,"fmt","","",1,null],[11,"clone","","",2,null],[11,"fmt","","",2,null],[11,"clone","","",0,null],[11,"fmt","","",0,null],[11,"clone","","",3,null],[11,"fmt","","",3,null],[11,"description","","",3,null],[11,"fmt","","",3,null],[0,"hex","rustc_serialize","Hex binary-to-text encoding",null,null],[4,"FromHexError","rustc_serialize::hex","Errors that can occur when decoding a hex encoded string",null,null],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",6,null],[13,"InvalidHexLength","","The input had an invalid length",6,null],[8,"ToHex","","A trait for converting a value to hexadecimal encoding",null,null],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned\nstring.",7,null],[8,"FromHex","","A trait for converting hexadecimal encoded values",null,null],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data,\ninto an owned vector of bytes, returning the vector.",8,null],[11,"clone","","",6,null],[11,"fmt","","",6,null],[11,"description","","",6,null],[11,"fmt","","",6,null],[0,"json","rustc_serialize","JSON parsing and serialization",null,null],[3,"PrettyJson","rustc_serialize::json","",null,null],[3,"AsJson","","",null,null],[3,"AsPrettyJson","","",null,null],[3,"Encoder","","A structure for implementing serialization to JSON.",null,null],[3,"Stack","","A Stack represents the current position of the parser in the logical\nstructure of the JSON stream.\nFor example foo.bar[3].x",null,null],[3,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming\nan iterator of char.",null,null],[3,"Builder","","A Builder consumes a json::Parser to create a generic Json structure.",null,null],[3,"Decoder","","A structure to decode JSON to values in rust.",null,null],[4,"Json","","Represents a json value",null,null],[13,"I64","","",9,null],[13,"U64","","",9,null],[13,"F64","","",9,null],[13,"String","","",9,null],[13,"Boolean","","",9,null],[13,"Array","","",9,null],[13,"Object","","",9,null],[13,"Null","","",9,null],[4,"ErrorCode","","The errors that can arise while parsing a JSON stream.",null,null],[13,"InvalidSyntax","","",10,null],[13,"InvalidNumber","","",10,null],[13,"EOFWhileParsingObject","","",10,null],[13,"EOFWhileParsingArray","","",10,null],[13,"EOFWhileParsingValue","","",10,null],[13,"EOFWhileParsingString","","",10,null],[13,"KeyMustBeAString","","",10,null],[13,"ExpectedColon","","",10,null],[13,"TrailingCharacters","","",10,null],[13,"TrailingComma","","",10,null],[13,"InvalidEscape","","",10,null],[13,"InvalidUnicodeCodePoint","","",10,null],[13,"LoneLeadingSurrogateInHexEscape","","",10,null],[13,"UnexpectedEndOfHexEscape","","",10,null],[13,"UnrecognizedHex","","",10,null],[13,"NotFourDigit","","",10,null],[13,"ControlCharacterInString","","",10,null],[13,"NotUtf8","","",10,null],[4,"ParserError","","",null,null],[13,"SyntaxError","","msg, line, col",11,null],[13,"IoError","","",11,null],[4,"DecoderError","","",null,null],[13,"ParseError","","",12,null],[13,"ExpectedError","","",12,null],[13,"MissingFieldError","","",12,null],[13,"UnknownVariantError","","",12,null],[13,"ApplicationError","","",12,null],[13,"EOF","","",12,null],[4,"EncoderError","","",null,null],[13,"FmtError","","",13,null],[13,"BadHashmapKey","","",13,null],[4,"JsonEvent","","The output of the streaming parser.",null,null],[13,"ObjectStart","","",14,null],[13,"ObjectEnd","","",14,null],[13,"ArrayStart","","",14,null],[13,"ArrayEnd","","",14,null],[13,"BooleanValue","","",14,null],[13,"I64Value","","",14,null],[13,"U64Value","","",14,null],[13,"F64Value","","",14,null],[13,"StringValue","","",14,null],[13,"NullValue","","",14,null],[13,"Error","","",14,null],[4,"StackElement","","StackElements compose a Stack.\nFor example, Key(&quot;foo&quot;), Key(&quot;bar&quot;), Index(3) and Key(&quot;x&quot;) are the\nStackElements compositing the stack that represents foo.bar[3].x",null,null],[13,"Index","","",15,null],[13,"Key","","",15,null],[5,"error_str","","Returns a readable error string for a given error code.",null,{"inputs":[{"name":"errorcode"}],"output":{"name":"str"}}],[5,"decode","","Shortcut function to decode a JSON `&amp;str` into an object",null,{"inputs":[{"name":"str"}],"output":{"name":"decoderesult"}}],[5,"encode","","Shortcut function to encode a `T` into a JSON `String`",null,{"inputs":[{"name":"t"}],"output":{"name":"encoderesult"}}],[5,"as_json","","Create an `AsJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asjson"}}],[5,"as_pretty_json","","Create an `AsPrettyJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asprettyjson"}}],[6,"Array","","",null,null],[6,"Object","","",null,null],[6,"BuilderError","","",null,null],[6,"EncodeResult","","",null,null],[6,"DecodeResult","","",null,null],[8,"ToJson","","A trait for converting values to JSON",null,null],[10,"to_json","","Converts the value of `self` to an instance of JSON",16,null],[11,"clone","","",9,null],[11,"eq","","",9,null],[11,"ne","","",9,null],[11,"partial_cmp","","",9,null],[11,"lt","","",9,null],[11,"le","","",9,null],[11,"gt","","",9,null],[11,"ge","","",9,null],[11,"fmt","","",9,null],[11,"clone","","",10,null],[11,"eq","","",10,null],[11,"fmt","","",11,null],[11,"eq","","",11,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"fmt","","",12,null],[11,"fmt","","",13,null],[11,"clone","","",13,null],[11,"fmt","","",10,null],[11,"description","","",12,null],[11,"cause","","",12,null],[11,"fmt","","",12,null],[11,"from","","",12,{"inputs":[{"name":"parsererror"}],"output":{"name":"decodererror"}}],[11,"description","","",11,null],[11,"fmt","","",11,null],[11,"from","","",11,{"inputs":[{"name":"error"}],"output":{"name":"parsererror"}}],[11,"description","","",13,null],[11,"fmt","","",13,null],[11,"from","","",13,{"inputs":[{"name":"error"}],"output":{"name":"encodererror"}}],[11,"new_pretty","","Creates a new encoder whose output will be written in human-readable\nJSON to the specified writer",17,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"new","","Creates a new encoder whose output will be written in compact\nJSON to the specified writer",17,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"set_indent","","Set the number of spaces to indent for each level.\nThis is safe to set during encoding.",17,null],[11,"emit_nil","","",17,null],[11,"emit_usize","","",17,null],[11,"emit_u64","","",17,null],[11,"emit_u32","","",17,null],[11,"emit_u16","","",17,null],[11,"emit_u8","","",17,null],[11,"emit_isize","","",17,null],[11,"emit_i64","","",17,null],[11,"emit_i32","","",17,null],[11,"emit_i16","","",17,null],[11,"emit_i8","","",17,null],[11,"emit_bool","","",17,null],[11,"emit_f64","","",17,null],[11,"emit_f32","","",17,null],[11,"emit_char","","",17,null],[11,"emit_str","","",17,null],[11,"emit_enum","","",17,null],[11,"emit_enum_variant","","",17,null],[11,"emit_enum_variant_arg","","",17,null],[11,"emit_enum_struct_variant","","",17,null],[11,"emit_enum_struct_variant_field","","",17,null],[11,"emit_struct","","",17,null],[11,"emit_struct_field","","",17,null],[11,"emit_tuple","","",17,null],[11,"emit_tuple_arg","","",17,null],[11,"emit_tuple_struct","","",17,null],[11,"emit_tuple_struct_arg","","",17,null],[11,"emit_option","","",17,null],[11,"emit_option_none","","",17,null],[11,"emit_option_some","","",17,null],[11,"emit_seq","","",17,null],[11,"emit_seq_elt","","",17,null],[11,"emit_map","","",17,null],[11,"emit_map_elt_key","","",17,null],[11,"emit_map_elt_val","","",17,null],[11,"encode","","",9,null],[11,"from_reader","","Decodes a json value from an `&amp;mut io::Read`",9,{"inputs":[{"name":"read"}],"output":{"name":"result"}}],[11,"from_str","","Decodes a json value from a string",9,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"pretty","","Borrow this json object as a pretty object to generate a pretty\nrepresentation for it via `Display`.",9,null],[11,"find","","If the Json value is an Object, returns the value associated with the provided key.\nOtherwise, returns None.",9,null],[11,"find_path","","Attempts to get a nested Json Object for each key in `keys`.\nIf any key is found not to exist, find_path will return None.\nOtherwise, it will return the Json value associated with the final key.",9,null],[11,"search","","If the Json value is an Object, performs a depth-first search until\na value associated with the provided key is found. If no value is found\nor the Json value is not an Object, returns None.",9,null],[11,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",9,null],[11,"as_object","","If the Json value is an Object, returns the associated BTreeMap.\nReturns None otherwise.",9,null],[11,"as_object_mut","","If the Json value is an Object, returns the associated mutable BTreeMap.\nReturns None otherwise.",9,null],[11,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",9,null],[11,"as_array","","If the Json value is an Array, returns the associated vector.\nReturns None otherwise.",9,null],[11,"as_array_mut","","If the Json value is an Array, returns the associated mutable vector.\nReturns None otherwise.",9,null],[11,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",9,null],[11,"as_string","","If the Json value is a String, returns the associated str.\nReturns None otherwise.",9,null],[11,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",9,null],[11,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",9,null],[11,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",9,null],[11,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",9,null],[11,"as_i64","","If the Json value is a number, return or cast it to a i64.\nReturns None otherwise.",9,null],[11,"as_u64","","If the Json value is a number, return or cast it to a u64.\nReturns None otherwise.",9,null],[11,"as_f64","","If the Json value is a number, return or cast it to a f64.\nReturns None otherwise.",9,null],[11,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",9,null],[11,"as_boolean","","If the Json value is a Boolean, returns the associated bool.\nReturns None otherwise.",9,null],[11,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",9,null],[11,"as_null","","If the Json value is a Null, returns ().\nReturns None otherwise.",9,null],[11,"index","","",9,null],[11,"index","","",9,null],[11,"eq","","",14,null],[11,"ne","","",14,null],[11,"fmt","","",14,null],[11,"eq","","",15,null],[11,"ne","","",15,null],[11,"clone","","",15,null],[11,"fmt","","",15,null],[11,"new","","",18,{"inputs":[],"output":{"name":"stack"}}],[11,"len","","Returns The number of elements in the Stack.",18,null],[11,"is_empty","","Returns true if the stack is empty.",18,null],[11,"get","","Provides access to the StackElement at a given index.\nlower indices are at the bottom of the stack while higher indices are\nat the top.",18,null],[11,"is_equal_to","","Compares this stack with an array of StackElements.",18,null],[11,"starts_with","","Returns true if the bottom-most elements of this stack are the same as\nthe ones passed as parameter.",18,null],[11,"ends_with","","Returns true if the top-most elements of this stack are the same as\nthe ones passed as parameter.",18,null],[11,"top","","Returns the top-most element (if any).",18,null],[11,"next","","",19,null],[11,"new","","Creates the JSON parser.",19,{"inputs":[{"name":"t"}],"output":{"name":"parser"}}],[11,"stack","","Provides access to the current position in the logical structure of the\nJSON stream.",19,null],[11,"new","","Create a JSON Builder.",20,{"inputs":[{"name":"t"}],"output":{"name":"builder"}}],[11,"build","","",20,null],[11,"new","","Creates a new decoder instance for decoding the specified JSON value.",21,{"inputs":[{"name":"json"}],"output":{"name":"decoder"}}],[11,"read_nil","","",21,null],[11,"read_usize","","",21,null],[11,"read_u8","","",21,null],[11,"read_u16","","",21,null],[11,"read_u32","","",21,null],[11,"read_u64","","",21,null],[11,"read_isize","","",21,null],[11,"read_i8","","",21,null],[11,"read_i16","","",21,null],[11,"read_i32","","",21,null],[11,"read_i64","","",21,null],[11,"read_f32","","",21,null],[11,"read_f64","","",21,null],[11,"read_bool","","",21,null],[11,"read_char","","",21,null],[11,"read_str","","",21,null],[11,"read_enum","","",21,null],[11,"read_enum_variant","","",21,null],[11,"read_enum_variant_arg","","",21,null],[11,"read_enum_struct_variant","","",21,null],[11,"read_enum_struct_variant_field","","",21,null],[11,"read_struct","","",21,null],[11,"read_struct_field","","",21,null],[11,"read_tuple","","",21,null],[11,"read_tuple_arg","","",21,null],[11,"read_tuple_struct","","",21,null],[11,"read_tuple_struct_arg","","",21,null],[11,"read_option","","",21,null],[11,"read_seq","","",21,null],[11,"read_seq_elt","","",21,null],[11,"read_map","","",21,null],[11,"read_map_elt_key","","",21,null],[11,"read_map_elt_val","","",21,null],[11,"error","","",21,null],[11,"to_json","","",9,null],[11,"fmt","","Encodes a json value into a string",9,null],[11,"fmt","","Encodes a json value into a string",22,null],[11,"fmt","","Encodes a json value into a string",23,null],[11,"indent","","Set the indentation level for the emitted JSON",24,null],[11,"fmt","","Encodes a json value into a string",24,null],[11,"from_str","","",9,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[8,"Decoder","rustc_serialize","",null,null],[16,"Error","","",25,null],[10,"read_nil","","",25,null],[10,"read_usize","","",25,null],[10,"read_u64","","",25,null],[10,"read_u32","","",25,null],[10,"read_u16","","",25,null],[10,"read_u8","","",25,null],[10,"read_isize","","",25,null],[10,"read_i64","","",25,null],[10,"read_i32","","",25,null],[10,"read_i16","","",25,null],[10,"read_i8","","",25,null],[10,"read_bool","","",25,null],[10,"read_f64","","",25,null],[10,"read_f32","","",25,null],[10,"read_char","","",25,null],[10,"read_str","","",25,null],[10,"read_enum","","",25,null],[10,"read_enum_variant","","",25,null],[10,"read_enum_variant_arg","","",25,null],[10,"read_enum_struct_variant","","",25,null],[10,"read_enum_struct_variant_field","","",25,null],[10,"read_struct","","",25,null],[10,"read_struct_field","","",25,null],[10,"read_tuple","","",25,null],[10,"read_tuple_arg","","",25,null],[10,"read_tuple_struct","","",25,null],[10,"read_tuple_struct_arg","","",25,null],[10,"read_option","","",25,null],[10,"read_seq","","",25,null],[10,"read_seq_elt","","",25,null],[10,"read_map","","",25,null],[10,"read_map_elt_key","","",25,null],[10,"read_map_elt_val","","",25,null],[10,"error","","",25,null],[8,"Encoder","","",null,null],[16,"Error","","",26,null],[10,"emit_nil","","",26,null],[10,"emit_usize","","",26,null],[10,"emit_u64","","",26,null],[10,"emit_u32","","",26,null],[10,"emit_u16","","",26,null],[10,"emit_u8","","",26,null],[10,"emit_isize","","",26,null],[10,"emit_i64","","",26,null],[10,"emit_i32","","",26,null],[10,"emit_i16","","",26,null],[10,"emit_i8","","",26,null],[10,"emit_bool","","",26,null],[10,"emit_f64","","",26,null],[10,"emit_f32","","",26,null],[10,"emit_char","","",26,null],[10,"emit_str","","",26,null],[10,"emit_enum","","",26,null],[10,"emit_enum_variant","","",26,null],[10,"emit_enum_variant_arg","","",26,null],[10,"emit_enum_struct_variant","","",26,null],[10,"emit_enum_struct_variant_field","","",26,null],[10,"emit_struct","","",26,null],[10,"emit_struct_field","","",26,null],[10,"emit_tuple","","",26,null],[10,"emit_tuple_arg","","",26,null],[10,"emit_tuple_struct","","",26,null],[10,"emit_tuple_struct_arg","","",26,null],[10,"emit_option","","",26,null],[10,"emit_option_none","","",26,null],[10,"emit_option_some","","",26,null],[10,"emit_seq","","",26,null],[10,"emit_seq_elt","","",26,null],[10,"emit_map","","",26,null],[10,"emit_map_elt_key","","",26,null],[10,"emit_map_elt_val","","",26,null],[8,"Decodable","","",null,null],[10,"decode","","",27,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"Encodable","","",null,null],[10,"encode","","",28,null],[8,"DecoderHelpers","","",null,null],[10,"read_to_vec","","",29,null],[8,"EncoderHelpers","","",null,null],[10,"emit_from_vec","","",30,null]],"paths":[[3,"Config"],[4,"CharacterSet"],[4,"Newline"],[4,"FromBase64Error"],[8,"ToBase64"],[8,"FromBase64"],[4,"FromHexError"],[8,"ToHex"],[8,"FromHex"],[4,"Json"],[4,"ErrorCode"],[4,"ParserError"],[4,"DecoderError"],[4,"EncoderError"],[4,"JsonEvent"],[4,"StackElement"],[8,"ToJson"],[3,"Encoder"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[3,"PrettyJson"],[3,"AsJson"],[3,"AsPrettyJson"],[8,"Decoder"],[8,"Encoder"],[8,"Decodable"],[8,"Encodable"],[8,"DecoderHelpers"],[8,"EncoderHelpers"]]};
searchIndex["strsim"] = {"doc":"This library implements string similarity metrics. Includes Hamming,\nLevenshtein, Jaro, and Jaro-Winkler.","items":[[4,"StrSimError","strsim","",null,null],[13,"DifferentLengthArgs","","",0,null],[5,"hamming","","Calculates the number of positions in the two strings where the characters\ndiffer. Returns an error if the strings have different lengths.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"hammingresult"}}],[5,"jaro","","Calculates the Jaro similarity between two strings. The returned value\nis between 0.0 and 1.0 (higher value means more similar).",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"f64"}}],[5,"jaro_against_vec","","Calculates the Jaro distance between a string and each string in a vector.\nReturns a vector of corresponding values between 0.0 and 1.0 (higher value\nmeans more similar).",null,{"inputs":[{"name":"str"},{"name":"vec"}],"output":{"name":"vec"}}],[5,"jaro_winkler","","Like Jaro but gives a boost to strings that have a common prefix.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"f64"}}],[5,"jaro_winkler_against_vec","","Calculates the Jaro-Winkler distances between a string and each string\nin a vector. Returns a vector of corresponding values.",null,{"inputs":[{"name":"str"},{"name":"vec"}],"output":{"name":"vec"}}],[5,"levenshtein","","Calculates the minimum number of insertions, deletions, and substitutions\nrequired to change one string into the other.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"usize"}}],[5,"levenshtein_against_vec","","Calculates the Levenshtein distance between a string and each string in a\nvector. Returns a vector of corresponding values.",null,{"inputs":[{"name":"str"},{"name":"vec"}],"output":{"name":"vec"}}],[5,"damerau_levenshtein","","Same as Levenshtein but allows for adjacent transpositions.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"usize"}}],[5,"damerau_levenshtein_against_vec","","Calculates the Damerau-Levenshtein distance between a string and each string\nin a vector. Returns a vector of corresponding values.",null,{"inputs":[{"name":"str"},{"name":"vec"}],"output":{"name":"vec"}}],[6,"HammingResult","","",null,null],[11,"fmt","","",0,null],[11,"eq","","",0,null]],"paths":[[4,"StrSimError"]]};
searchIndex["encoding_index_simpchinese"] = {"doc":"Simplified Chinese index tables for\n[rust-encoding](https://github.com/lifthrasiir/rust-encoding).","items":[[0,"gb18030","encoding_index_simpchinese","GB 18030 two-byte area.",null,null],[5,"forward","encoding_index_simpchinese::gb18030","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u16"}],"output":{"name":"u32"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u16"}}],[0,"gb18030_ranges","encoding_index_simpchinese","GB 18030 four-byte area.",null,null],[5,"forward","encoding_index_simpchinese::gb18030_ranges","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u32"}}]],"paths":[]};
searchIndex["encoding_index_tradchinese"] = {"doc":"Traditional Chinese index tables for\n[rust-encoding](https://github.com/lifthrasiir/rust-encoding).","items":[[0,"big5","encoding_index_tradchinese","Big5 and HKSCS.",null,null],[5,"forward","encoding_index_tradchinese::big5","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u16"}],"output":{"name":"u32"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u16"}}]],"paths":[]};
searchIndex["futf"] = {"doc":"","items":[[3,"Codepoint","futf","Represents a complete or partial UTF-8 codepoint.",null,null],[12,"bytes","","The bytes that make up the partial or full codepoint.",0,null],[12,"rewind","","Start of the codepoint in the buffer, expressed as an offset\nback from `idx`.",0,null],[12,"meaning","","Meaning of the partial or full codepoint.",0,null],[4,"Meaning","","Meaning of a complete or partial UTF-8 codepoint.",null,null],[13,"Whole","","We found a whole codepoint.",1,null],[13,"LeadSurrogate","","We found something that isn&#39;t a valid Unicode codepoint, but\nit *would* correspond to a UTF-16 leading surrogate code unit,\ni.e. a value in the range `U+D800` - `U+DBFF`.",1,null],[13,"TrailSurrogate","","We found something that isn&#39;t a valid Unicode codepoint, but\nit *would* correspond to a UTF-16 trailing surrogate code unit,\ni.e. a value in the range `U+DC00` - `U+DFFF`.",1,null],[13,"Prefix","","We found only a prefix of a codepoint before the buffer ended.",1,null],[13,"Suffix","","We found only a suffix of a codepoint before running off the\nstart of the buffer.",1,null],[5,"classify","","Describes the UTF-8 codepoint containing the byte at index `idx` within\n`buf`.",null,null],[11,"clone","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"partial_cmp","","",1,null],[11,"lt","","",1,null],[11,"le","","",1,null],[11,"gt","","",1,null],[11,"ge","","",1,null],[11,"cmp","","",1,null],[11,"fmt","","",1,null],[11,"hash","","",1,null],[11,"clone","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"partial_cmp","","",0,null],[11,"lt","","",0,null],[11,"le","","",0,null],[11,"gt","","",0,null],[11,"ge","","",0,null],[11,"cmp","","",0,null],[11,"fmt","","",0,null],[11,"hash","","",0,null]],"paths":[[3,"Codepoint"],[4,"Meaning"]]};
searchIndex["encoding_index_japanese"] = {"doc":"Japanese index tables for [rust-encoding](https://github.com/lifthrasiir/rust-encoding).","items":[[0,"jis0208","encoding_index_japanese","JIS X 0208 with common extensions.",null,null],[5,"forward","encoding_index_japanese::jis0208","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u16"}],"output":{"name":"u32"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u16"}}],[5,"backward_remapped","","Returns the index shift_jis pointer for code point `code`.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u16"}}],[0,"jis0212","encoding_index_japanese","JIS X 0212.",null,null],[5,"forward","encoding_index_japanese::jis0212","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u16"}],"output":{"name":"u32"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u16"}}]],"paths":[]};
searchIndex["libc"] = {"doc":"Crate docs","items":[[3,"group","libc","",null,null],[12,"gr_name","","",0,null],[12,"gr_passwd","","",0,null],[12,"gr_gid","","",0,null],[12,"gr_mem","","",0,null],[3,"utimbuf","","",null,null],[12,"actime","","",1,null],[12,"modtime","","",1,null],[3,"timeval","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_usec","","",2,null],[3,"timespec","","",null,null],[12,"tv_sec","","",3,null],[12,"tv_nsec","","",3,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",4,null],[12,"rlim_max","","",4,null],[3,"rusage","","",null,null],[12,"ru_utime","","",5,null],[12,"ru_stime","","",5,null],[12,"ru_maxrss","","",5,null],[12,"ru_ixrss","","",5,null],[12,"ru_idrss","","",5,null],[12,"ru_isrss","","",5,null],[12,"ru_minflt","","",5,null],[12,"ru_majflt","","",5,null],[12,"ru_nswap","","",5,null],[12,"ru_inblock","","",5,null],[12,"ru_oublock","","",5,null],[12,"ru_msgsnd","","",5,null],[12,"ru_msgrcv","","",5,null],[12,"ru_nsignals","","",5,null],[12,"ru_nvcsw","","",5,null],[12,"ru_nivcsw","","",5,null],[3,"in_addr","","",null,null],[12,"s_addr","","",6,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",7,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",8,null],[12,"imr_interface","","",8,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",9,null],[12,"ipv6mr_interface","","",9,null],[3,"hostent","","",null,null],[12,"h_name","","",10,null],[12,"h_aliases","","",10,null],[12,"h_addrtype","","",10,null],[12,"h_length","","",10,null],[12,"h_addr_list","","",10,null],[3,"iovec","","",null,null],[12,"iov_base","","",11,null],[12,"iov_len","","",11,null],[3,"pollfd","","",null,null],[12,"fd","","",12,null],[12,"events","","",12,null],[12,"revents","","",12,null],[3,"winsize","","",null,null],[12,"ws_row","","",13,null],[12,"ws_col","","",13,null],[12,"ws_xpixel","","",13,null],[12,"ws_ypixel","","",13,null],[3,"linger","","",null,null],[12,"l_onoff","","",14,null],[12,"l_linger","","",14,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",15,null],[12,"sa_data","","",15,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",16,null],[12,"sin_port","","",16,null],[12,"sin_addr","","",16,null],[12,"sin_zero","","",16,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",17,null],[12,"sin6_port","","",17,null],[12,"sin6_flowinfo","","",17,null],[12,"sin6_addr","","",17,null],[12,"sin6_scope_id","","",17,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",18,null],[12,"sun_path","","",18,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",19,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",20,null],[12,"ai_family","","",20,null],[12,"ai_socktype","","",20,null],[12,"ai_protocol","","",20,null],[12,"ai_addrlen","","",20,null],[12,"ai_addr","","",20,null],[12,"ai_canonname","","",20,null],[12,"ai_next","","",20,null],[3,"sockaddr_nl","","",null,null],[12,"nl_family","","",21,null],[12,"nl_pid","","",21,null],[12,"nl_groups","","",21,null],[3,"sockaddr_ll","","",null,null],[12,"sll_family","","",22,null],[12,"sll_protocol","","",22,null],[12,"sll_ifindex","","",22,null],[12,"sll_hatype","","",22,null],[12,"sll_pkttype","","",22,null],[12,"sll_halen","","",22,null],[12,"sll_addr","","",22,null],[3,"fd_set","","",null,null],[3,"tm","","",null,null],[12,"tm_sec","","",23,null],[12,"tm_min","","",23,null],[12,"tm_hour","","",23,null],[12,"tm_mday","","",23,null],[12,"tm_mon","","",23,null],[12,"tm_year","","",23,null],[12,"tm_wday","","",23,null],[12,"tm_yday","","",23,null],[12,"tm_isdst","","",23,null],[12,"tm_gmtoff","","",23,null],[12,"tm_zone","","",23,null],[3,"sched_param","","",null,null],[12,"sched_priority","","",24,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",25,null],[12,"dli_fbase","","",25,null],[12,"dli_sname","","",25,null],[12,"dli_saddr","","",25,null],[3,"epoll_event","","",null,null],[12,"events","","",26,null],[12,"u64","","",26,null],[3,"utsname","","",null,null],[12,"sysname","","",27,null],[12,"nodename","","",27,null],[12,"release","","",27,null],[12,"version","","",27,null],[12,"machine","","",27,null],[12,"domainname","","",27,null],[3,"lconv","","",null,null],[12,"decimal_point","","",28,null],[12,"thousands_sep","","",28,null],[12,"grouping","","",28,null],[12,"int_curr_symbol","","",28,null],[12,"currency_symbol","","",28,null],[12,"mon_decimal_point","","",28,null],[12,"mon_thousands_sep","","",28,null],[12,"mon_grouping","","",28,null],[12,"positive_sign","","",28,null],[12,"negative_sign","","",28,null],[12,"int_frac_digits","","",28,null],[12,"frac_digits","","",28,null],[12,"p_cs_precedes","","",28,null],[12,"p_sep_by_space","","",28,null],[12,"n_cs_precedes","","",28,null],[12,"n_sep_by_space","","",28,null],[12,"p_sign_posn","","",28,null],[12,"n_sign_posn","","",28,null],[12,"int_p_cs_precedes","","",28,null],[12,"int_p_sep_by_space","","",28,null],[12,"int_n_cs_precedes","","",28,null],[12,"int_n_sep_by_space","","",28,null],[12,"int_p_sign_posn","","",28,null],[12,"int_n_sign_posn","","",28,null],[3,"dirent","","",null,null],[12,"d_ino","","",29,null],[12,"d_off","","",29,null],[12,"d_reclen","","",29,null],[12,"d_type","","",29,null],[12,"d_name","","",29,null],[3,"dirent64","","",null,null],[12,"d_ino","","",30,null],[12,"d_off","","",30,null],[12,"d_reclen","","",30,null],[12,"d_type","","",30,null],[12,"d_name","","",30,null],[3,"rlimit64","","",null,null],[12,"rlim_cur","","",31,null],[12,"rlim_max","","",31,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",32,null],[12,"gl_pathv","","",32,null],[12,"gl_offs","","",32,null],[12,"gl_flags","","",32,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",33,null],[12,"ifa_name","","",33,null],[12,"ifa_flags","","",33,null],[12,"ifa_addr","","",33,null],[12,"ifa_netmask","","",33,null],[12,"ifa_ifu","","",33,null],[12,"ifa_data","","",33,null],[3,"pthread_mutex_t","","",null,null],[3,"pthread_rwlock_t","","",null,null],[3,"pthread_mutexattr_t","","",null,null],[3,"pthread_cond_t","","",null,null],[3,"pthread_condattr_t","","",null,null],[3,"passwd","","",null,null],[12,"pw_name","","",34,null],[12,"pw_passwd","","",34,null],[12,"pw_uid","","",34,null],[12,"pw_gid","","",34,null],[12,"pw_gecos","","",34,null],[12,"pw_dir","","",34,null],[12,"pw_shell","","",34,null],[3,"statvfs","","",null,null],[12,"f_bsize","","",35,null],[12,"f_frsize","","",35,null],[12,"f_blocks","","",35,null],[12,"f_bfree","","",35,null],[12,"f_bavail","","",35,null],[12,"f_files","","",35,null],[12,"f_ffree","","",35,null],[12,"f_favail","","",35,null],[12,"f_fsid","","",35,null],[12,"f_flag","","",35,null],[12,"f_namemax","","",35,null],[3,"dqblk","","",null,null],[12,"dqb_bhardlimit","","",36,null],[12,"dqb_bsoftlimit","","",36,null],[12,"dqb_curspace","","",36,null],[12,"dqb_ihardlimit","","",36,null],[12,"dqb_isoftlimit","","",36,null],[12,"dqb_curinodes","","",36,null],[12,"dqb_btime","","",36,null],[12,"dqb_itime","","",36,null],[12,"dqb_valid","","",36,null],[3,"signalfd_siginfo","","",null,null],[12,"ssi_signo","","",37,null],[12,"ssi_errno","","",37,null],[12,"ssi_code","","",37,null],[12,"ssi_pid","","",37,null],[12,"ssi_uid","","",37,null],[12,"ssi_fd","","",37,null],[12,"ssi_tid","","",37,null],[12,"ssi_band","","",37,null],[12,"ssi_overrun","","",37,null],[12,"ssi_trapno","","",37,null],[12,"ssi_status","","",37,null],[12,"ssi_int","","",37,null],[12,"ssi_ptr","","",37,null],[12,"ssi_utime","","",37,null],[12,"ssi_stime","","",37,null],[12,"ssi_addr","","",37,null],[3,"fsid_t","","",null,null],[3,"mq_attr","","",null,null],[12,"mq_flags","","",38,null],[12,"mq_maxmsg","","",38,null],[12,"mq_msgsize","","",38,null],[12,"mq_curmsgs","","",38,null],[3,"cpu_set_t","","",null,null],[3,"if_nameindex","","",null,null],[12,"if_index","","",39,null],[12,"if_name","","",39,null],[3,"__exit_status","","",null,null],[12,"e_termination","","",40,null],[12,"e_exit","","",40,null],[3,"__timeval","","",null,null],[12,"tv_sec","","",41,null],[12,"tv_usec","","",41,null],[3,"utmpx","","",null,null],[12,"ut_type","","",42,null],[12,"ut_pid","","",42,null],[12,"ut_line","","",42,null],[12,"ut_id","","",42,null],[12,"ut_user","","",42,null],[12,"ut_host","","",42,null],[12,"ut_exit","","",42,null],[12,"ut_session","","",42,null],[12,"ut_tv","","",42,null],[12,"ut_addr_v6","","",42,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",43,null],[12,"sa_mask","","",43,null],[12,"sa_flags","","",43,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",44,null],[12,"ss_flags","","",44,null],[12,"ss_size","","",44,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",45,null],[12,"si_errno","","",45,null],[12,"si_code","","",45,null],[12,"_pad","","",45,null],[3,"glob64_t","","",null,null],[12,"gl_pathc","","",46,null],[12,"gl_pathv","","",46,null],[12,"gl_offs","","",46,null],[12,"gl_flags","","",46,null],[3,"ucred","","",null,null],[12,"pid","","",47,null],[12,"uid","","",47,null],[12,"gid","","",47,null],[3,"statfs","","",null,null],[12,"f_type","","",48,null],[12,"f_bsize","","",48,null],[12,"f_blocks","","",48,null],[12,"f_bfree","","",48,null],[12,"f_bavail","","",48,null],[12,"f_files","","",48,null],[12,"f_ffree","","",48,null],[12,"f_fsid","","",48,null],[12,"f_namelen","","",48,null],[12,"f_frsize","","",48,null],[3,"msghdr","","",null,null],[12,"msg_name","","",49,null],[12,"msg_namelen","","",49,null],[12,"msg_iov","","",49,null],[12,"msg_iovlen","","",49,null],[12,"msg_control","","",49,null],[12,"msg_controllen","","",49,null],[12,"msg_flags","","",49,null],[3,"termios","","",null,null],[12,"c_iflag","","",50,null],[12,"c_oflag","","",50,null],[12,"c_cflag","","",50,null],[12,"c_lflag","","",50,null],[12,"c_line","","",50,null],[12,"c_cc","","",50,null],[12,"c_ispeed","","",50,null],[12,"c_ospeed","","",50,null],[3,"flock","","",null,null],[12,"l_type","","",51,null],[12,"l_whence","","",51,null],[12,"l_start","","",51,null],[12,"l_len","","",51,null],[12,"l_pid","","",51,null],[3,"sem_t","","",null,null],[3,"sigset_t","","",null,null],[3,"sysinfo","","",null,null],[12,"uptime","","",52,null],[12,"loads","","",52,null],[12,"totalram","","",52,null],[12,"freeram","","",52,null],[12,"sharedram","","",52,null],[12,"bufferram","","",52,null],[12,"totalswap","","",52,null],[12,"freeswap","","",52,null],[12,"procs","","",52,null],[12,"pad","","",52,null],[12,"totalhigh","","",52,null],[12,"freehigh","","",52,null],[12,"mem_unit","","",52,null],[12,"_f","","",52,null],[3,"stat","","",null,null],[12,"st_dev","","",53,null],[12,"st_ino","","",53,null],[12,"st_nlink","","",53,null],[12,"st_mode","","",53,null],[12,"st_uid","","",53,null],[12,"st_gid","","",53,null],[12,"st_rdev","","",53,null],[12,"st_size","","",53,null],[12,"st_blksize","","",53,null],[12,"st_blocks","","",53,null],[12,"st_atime","","",53,null],[12,"st_atime_nsec","","",53,null],[12,"st_mtime","","",53,null],[12,"st_mtime_nsec","","",53,null],[12,"st_ctime","","",53,null],[12,"st_ctime_nsec","","",53,null],[3,"stat64","","",null,null],[12,"st_dev","","",54,null],[12,"st_ino","","",54,null],[12,"st_nlink","","",54,null],[12,"st_mode","","",54,null],[12,"st_uid","","",54,null],[12,"st_gid","","",54,null],[12,"st_rdev","","",54,null],[12,"st_size","","",54,null],[12,"st_blksize","","",54,null],[12,"st_blocks","","",54,null],[12,"st_atime","","",54,null],[12,"st_atime_nsec","","",54,null],[12,"st_mtime","","",54,null],[12,"st_mtime_nsec","","",54,null],[12,"st_ctime","","",54,null],[12,"st_ctime_nsec","","",54,null],[3,"pthread_attr_t","","",null,null],[3,"_libc_fpxreg","","",null,null],[12,"significand","","",55,null],[12,"exponent","","",55,null],[3,"_libc_xmmreg","","",null,null],[12,"element","","",56,null],[3,"_libc_fpstate","","",null,null],[12,"cwd","","",57,null],[12,"swd","","",57,null],[12,"ftw","","",57,null],[12,"fop","","",57,null],[12,"rip","","",57,null],[12,"rdp","","",57,null],[12,"mxcsr","","",57,null],[12,"mxcr_mask","","",57,null],[12,"_st","","",57,null],[12,"_xmm","","",57,null],[3,"mcontext_t","","",null,null],[12,"gregs","","",58,null],[12,"fpregs","","",58,null],[3,"ucontext_t","","",null,null],[12,"uc_flags","","",59,null],[12,"uc_link","","",59,null],[12,"uc_stack","","",59,null],[12,"uc_mcontext","","",59,null],[12,"uc_sigmask","","",59,null],[3,"ipc_perm","","",null,null],[12,"__key","","",60,null],[12,"uid","","",60,null],[12,"gid","","",60,null],[12,"cuid","","",60,null],[12,"cgid","","",60,null],[12,"mode","","",60,null],[12,"__seq","","",60,null],[3,"shmid_ds","","",null,null],[12,"shm_perm","","",61,null],[12,"shm_segsz","","",61,null],[12,"shm_atime","","",61,null],[12,"shm_dtime","","",61,null],[12,"shm_ctime","","",61,null],[12,"shm_cpid","","",61,null],[12,"shm_lpid","","",61,null],[12,"shm_nattch","","",61,null],[4,"c_void","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"DIR","","",null,null],[4,"locale_t","","",null,null],[4,"timezone","","",null,null],[4,"fpos64_t","","",null,null],[5,"FD_CLR","","",null,null],[5,"FD_ISSET","","",null,null],[5,"FD_SET","","",null,null],[5,"FD_ZERO","","",null,null],[5,"WIFSTOPPED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WSTOPSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFSIGNALED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WTERMSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFEXITED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WEXITSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WCOREDUMP","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"CPU_ZERO","","",null,null],[5,"CPU_SET","","",null,null],[5,"CPU_CLR","","",null,null],[5,"CPU_ISSET","","",null,{"inputs":[{"name":"usize"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"CPU_EQUAL","","",null,{"inputs":[{"name":"cpu_set_t"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"getchar","","",null,null],[5,"putchar","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strdup","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strnlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"memchr","","",null,null],[5,"memcmp","","",null,null],[5,"memcpy","","",null,null],[5,"memmove","","",null,null],[5,"memset","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"getgrnam","","",null,null],[5,"getgrgid","","",null,null],[5,"endpwent","","",null,null],[5,"getpwnam","","",null,null],[5,"getpwuid","","",null,null],[5,"fprintf","","",null,null],[5,"printf","","",null,null],[5,"snprintf","","",null,null],[5,"sprintf","","",null,null],[5,"fscanf","","",null,null],[5,"scanf","","",null,null],[5,"sscanf","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"bind","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"socketpair","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"popen","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"chown","","",null,null],[5,"lchown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgid","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"posix_memalign","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"umask","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"if_indextoname","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[5,"getdtablesize","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"gettimeofday","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_create","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_init","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_condattr_init","","",null,null],[5,"pthread_condattr_destroy","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"pthread_kill","","",null,null],[5,"strerror_r","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"sigaltstack","","",null,null],[5,"sigwait","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"gmtime_r","","",null,null],[5,"localtime_r","","",null,null],[5,"mktime","","",null,null],[5,"mknod","","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"uname","","",null,null],[5,"daemon","","",null,null],[5,"gethostname","","",null,null],[5,"chroot","","",null,null],[5,"usleep","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"putenv","","",null,null],[5,"sendmsg","","",null,null],[5,"recvmsg","","",null,null],[5,"poll","","",null,null],[5,"select","","",null,null],[5,"setlocale","","",null,null],[5,"localeconv","","",null,null],[5,"sem_destroy","","",null,null],[5,"sem_open","","",null,null],[5,"sem_close","","",null,null],[5,"sem_unlink","","",null,null],[5,"sem_wait","","",null,null],[5,"sem_trywait","","",null,null],[5,"sem_post","","",null,null],[5,"sem_init","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"getsid","","",null,null],[5,"madvise","","",null,null],[5,"readlink","","",null,null],[5,"msync","","",null,null],[5,"sysconf","","",null,null],[5,"recvfrom","","",null,null],[5,"mkfifo","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"timegm","","",null,null],[5,"statvfs","","",null,null],[5,"fstatvfs","","",null,null],[5,"tcdrain","","",null,null],[5,"cfgetispeed","","",null,null],[5,"cfgetospeed","","",null,null],[5,"cfsetispeed","","",null,null],[5,"cfsetospeed","","",null,null],[5,"tcgetattr","","",null,null],[5,"tcsetattr","","",null,null],[5,"tcflow","","",null,null],[5,"tcflush","","",null,null],[5,"tcsendbreak","","",null,null],[5,"mkstemp","","",null,null],[5,"mkstemps","","",null,null],[5,"mkdtemp","","",null,null],[5,"futimes","","",null,null],[5,"nl_langinfo","","",null,null],[5,"openlog","","",null,null],[5,"closelog","","",null,null],[5,"setlogmask","","",null,null],[5,"syslog","","",null,null],[5,"nice","","",null,null],[5,"getpwnam_r","","",null,null],[5,"getpwuid_r","","",null,null],[5,"fdatasync","","",null,null],[5,"mincore","","",null,null],[5,"clock_getres","","",null,null],[5,"clock_gettime","","",null,null],[5,"clock_nanosleep","","",null,null],[5,"prctl","","",null,null],[5,"pthread_getattr_np","","",null,null],[5,"pthread_attr_getguardsize","","",null,null],[5,"pthread_attr_getstack","","",null,null],[5,"memalign","","",null,null],[5,"setgroups","","",null,null],[5,"sched_setscheduler","","",null,null],[5,"sched_getscheduler","","",null,null],[5,"sched_get_priority_max","","",null,null],[5,"sched_get_priority_min","","",null,null],[5,"epoll_create","","",null,null],[5,"epoll_create1","","",null,null],[5,"epoll_ctl","","",null,null],[5,"epoll_wait","","",null,null],[5,"pipe2","","",null,null],[5,"mount","","",null,null],[5,"umount","","",null,null],[5,"umount2","","",null,null],[5,"clone","","",null,null],[5,"statfs","","",null,null],[5,"fstatfs","","",null,null],[5,"memrchr","","",null,null],[5,"syscall","","",null,null],[5,"sendfile","","",null,null],[5,"splice","","",null,null],[5,"tee","","",null,null],[5,"vmsplice","","",null,null],[5,"posix_fadvise","","",null,null],[5,"futimens","","",null,null],[5,"utimensat","","",null,null],[5,"duplocale","","",null,null],[5,"freelocale","","",null,null],[5,"newlocale","","",null,null],[5,"uselocale","","",null,null],[5,"creat64","","",null,null],[5,"fstat64","","",null,null],[5,"ftruncate64","","",null,null],[5,"getrlimit64","","",null,null],[5,"lseek64","","",null,null],[5,"lstat64","","",null,null],[5,"mmap64","","",null,null],[5,"open64","","",null,null],[5,"pread64","","",null,null],[5,"pwrite64","","",null,null],[5,"readdir64_r","","",null,null],[5,"setrlimit64","","",null,null],[5,"stat64","","",null,null],[5,"eventfd","","",null,null],[5,"sysinfo","","",null,null],[5,"openat","","",null,null],[5,"faccessat","","",null,null],[5,"fchmodat","","",null,null],[5,"fchownat","","",null,null],[5,"fstatat","","",null,null],[5,"linkat","","",null,null],[5,"mkdirat","","",null,null],[5,"mknodat","","",null,null],[5,"readlinkat","","",null,null],[5,"renameat","","",null,null],[5,"symlinkat","","",null,null],[5,"unlinkat","","",null,null],[5,"pthread_condattr_getclock","","",null,null],[5,"pthread_condattr_setclock","","",null,null],[5,"sched_getaffinity","","",null,null],[5,"sched_setaffinity","","",null,null],[5,"unshare","","",null,null],[5,"setns","","",null,null],[5,"sem_timedwait","","",null,null],[5,"lutimes","","",null,null],[5,"setpwent","","",null,null],[5,"getpwent","","",null,null],[5,"shm_open","","",null,null],[5,"shmget","","",null,null],[5,"shmat","","",null,null],[5,"shmdt","","",null,null],[5,"shmctl","","",null,null],[5,"mprotect","","",null,null],[5,"__errno_location","","",null,null],[5,"fopen64","","",null,null],[5,"freopen64","","",null,null],[5,"tmpfile64","","",null,null],[5,"fgetpos64","","",null,null],[5,"fsetpos64","","",null,null],[5,"fseeko64","","",null,null],[5,"ftello64","","",null,null],[5,"fallocate","","",null,null],[5,"posix_fallocate","","",null,null],[5,"readahead","","",null,null],[5,"getxattr","","",null,null],[5,"lgetxattr","","",null,null],[5,"fgetxattr","","",null,null],[5,"setxattr","","",null,null],[5,"lsetxattr","","",null,null],[5,"fsetxattr","","",null,null],[5,"listxattr","","",null,null],[5,"llistxattr","","",null,null],[5,"flistxattr","","",null,null],[5,"removexattr","","",null,null],[5,"lremovexattr","","",null,null],[5,"fremovexattr","","",null,null],[5,"signalfd","","",null,null],[5,"pwritev","","",null,null],[5,"preadv","","",null,null],[5,"quotactl","","",null,null],[5,"mq_open","","",null,null],[5,"mq_close","","",null,null],[5,"mq_unlink","","",null,null],[5,"mq_receive","","",null,null],[5,"mq_send","","",null,null],[5,"mq_getattr","","",null,null],[5,"mq_setattr","","",null,null],[5,"epoll_pwait","","",null,null],[5,"dup3","","",null,null],[5,"sethostname","","",null,null],[5,"mkostemp","","",null,null],[5,"mkostemps","","",null,null],[5,"sigtimedwait","","",null,null],[5,"sigwaitinfo","","",null,null],[5,"openpty","","",null,null],[5,"forkpty","","",null,null],[5,"nl_langinfo_l","","",null,null],[5,"getnameinfo","","",null,null],[5,"prlimit","","",null,null],[5,"prlimit64","","",null,null],[5,"getloadavg","","",null,null],[5,"process_vm_readv","","",null,null],[5,"process_vm_writev","","",null,null],[5,"reboot","","",null,null],[5,"mkfifoat","","",null,null],[5,"if_nameindex","","",null,null],[5,"if_freenameindex","","",null,null],[5,"sync_file_range","","",null,null],[5,"utmpxname","","",null,null],[5,"getutxent","","",null,null],[5,"getutxid","","",null,null],[5,"getutxline","","",null,null],[5,"pututxline","","",null,null],[5,"setutxent","","",null,null],[5,"endutxent","","",null,null],[5,"sysctl","","",null,null],[5,"ioctl","","",null,null],[5,"backtrace","","",null,null],[5,"glob64","","",null,null],[5,"globfree64","","",null,null],[5,"ptrace","","",null,null],[5,"pthread_attr_getaffinity_np","","",null,null],[5,"pthread_attr_setaffinity_np","","",null,null],[5,"getpriority","","",null,null],[5,"setpriority","","",null,null],[5,"pthread_getaffinity_np","","",null,null],[5,"pthread_setaffinity_np","","",null,null],[5,"sched_getcpu","","",null,null],[5,"getcontext","","",null,null],[5,"setcontext","","",null,null],[5,"makecontext","","",null,null],[5,"swapcontext","","",null,null],[11,"clone","","",53,null],[11,"clone","","",54,null],[11,"clone","","",62,null],[11,"clone","","",55,null],[11,"clone","","",56,null],[11,"clone","","",57,null],[11,"clone","","",58,null],[11,"clone","","",59,null],[11,"clone","","",60,null],[11,"clone","","",61,null],[11,"clone","","",63,null],[11,"clone","","",52,null],[11,"clone","","",40,null],[11,"clone","","",41,null],[11,"clone","","",42,null],[11,"clone","","",43,null],[11,"clone","","",44,null],[11,"clone","","",45,null],[11,"clone","","",46,null],[11,"clone","","",47,null],[11,"clone","","",48,null],[11,"clone","","",49,null],[11,"clone","","",50,null],[11,"clone","","",51,null],[11,"clone","","",64,null],[11,"clone","","",29,null],[11,"clone","","",30,null],[11,"clone","","",31,null],[11,"clone","","",32,null],[11,"clone","","",33,null],[11,"clone","","",65,null],[11,"clone","","",66,null],[11,"clone","","",67,null],[11,"clone","","",68,null],[11,"clone","","",69,null],[11,"clone","","",34,null],[11,"clone","","",35,null],[11,"clone","","",36,null],[11,"clone","","",37,null],[11,"clone","","",70,null],[11,"clone","","",38,null],[11,"clone","","",71,null],[11,"clone","","",39,null],[11,"clone","","",15,null],[11,"clone","","",16,null],[11,"clone","","",17,null],[11,"clone","","",18,null],[11,"clone","","",19,null],[11,"clone","","",20,null],[11,"clone","","",21,null],[11,"clone","","",22,null],[11,"clone","","",72,null],[11,"clone","","",23,null],[11,"clone","","",24,null],[11,"clone","","",25,null],[11,"clone","","",26,null],[11,"clone","","",27,null],[11,"clone","","",28,null],[11,"clone","","",0,null],[11,"clone","","",1,null],[11,"clone","","",2,null],[11,"clone","","",3,null],[11,"clone","","",4,null],[11,"clone","","",5,null],[11,"clone","","",6,null],[11,"clone","","",7,null],[11,"clone","","",8,null],[11,"clone","","",9,null],[11,"clone","","",10,null],[11,"clone","","",11,null],[11,"clone","","",12,null],[11,"clone","","",13,null],[11,"clone","","",14,null],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[6,"cc_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"pthread_key_t","","",null,null],[6,"speed_t","","",null,null],[6,"tcflag_t","","",null,null],[6,"loff_t","","",null,null],[6,"clockid_t","","",null,null],[6,"id_t","","",null,null],[6,"useconds_t","","",null,null],[6,"dev_t","","",null,null],[6,"socklen_t","","",null,null],[6,"pthread_t","","",null,null],[6,"mode_t","","",null,null],[6,"ino64_t","","",null,null],[6,"off64_t","","",null,null],[6,"blkcnt64_t","","",null,null],[6,"rlim64_t","","",null,null],[6,"key_t","","",null,null],[6,"shmatt_t","","",null,null],[6,"mqd_t","","",null,null],[6,"nfds_t","","",null,null],[6,"nl_item","","",null,null],[6,"fsblkcnt_t","","",null,null],[6,"fsfilcnt_t","","",null,null],[6,"rlim_t","","",null,null],[6,"__priority_which_t","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"ino_t","","",null,null],[6,"off_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"__fsword_t","","",null,null],[6,"c_char","","",null,null],[6,"wchar_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[6,"greg_t","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null],[17,"DT_FIFO","","",null,null],[17,"DT_CHR","","",null,null],[17,"DT_DIR","","",null,null],[17,"DT_BLK","","",null,null],[17,"DT_REG","","",null,null],[17,"DT_LNK","","",null,null],[17,"DT_SOCK","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"SIGIOT","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[17,"IF_NAMESIZE","","",null,null],[17,"RTLD_LAZY","","",null,null],[17,"LOG_EMERG","","",null,null],[17,"LOG_ALERT","","",null,null],[17,"LOG_CRIT","","",null,null],[17,"LOG_ERR","","",null,null],[17,"LOG_WARNING","","",null,null],[17,"LOG_NOTICE","","",null,null],[17,"LOG_INFO","","",null,null],[17,"LOG_DEBUG","","",null,null],[17,"LOG_KERN","","",null,null],[17,"LOG_USER","","",null,null],[17,"LOG_MAIL","","",null,null],[17,"LOG_DAEMON","","",null,null],[17,"LOG_AUTH","","",null,null],[17,"LOG_SYSLOG","","",null,null],[17,"LOG_LPR","","",null,null],[17,"LOG_NEWS","","",null,null],[17,"LOG_UUCP","","",null,null],[17,"LOG_LOCAL0","","",null,null],[17,"LOG_LOCAL1","","",null,null],[17,"LOG_LOCAL2","","",null,null],[17,"LOG_LOCAL3","","",null,null],[17,"LOG_LOCAL4","","",null,null],[17,"LOG_LOCAL5","","",null,null],[17,"LOG_LOCAL6","","",null,null],[17,"LOG_LOCAL7","","",null,null],[17,"LOG_PID","","",null,null],[17,"LOG_CONS","","",null,null],[17,"LOG_ODELAY","","",null,null],[17,"LOG_NDELAY","","",null,null],[17,"LOG_NOWAIT","","",null,null],[17,"LOG_PRIMASK","","",null,null],[17,"LOG_FACMASK","","",null,null],[17,"PRIO_PROCESS","","",null,null],[17,"PRIO_PGRP","","",null,null],[17,"PRIO_USER","","",null,null],[17,"PRIO_MIN","","",null,null],[17,"PRIO_MAX","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"F_DUPFD","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"F_SETLEASE","","",null,null],[17,"F_GETLEASE","","",null,null],[17,"F_NOTIFY","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"F_SETPIPE_SZ","","",null,null],[17,"F_GETPIPE_SZ","","",null,null],[17,"SIGTRAP","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"CLOCK_PROCESS_CPUTIME_ID","","",null,null],[17,"CLOCK_THREAD_CPUTIME_ID","","",null,null],[17,"CLOCK_MONOTONIC_RAW","","",null,null],[17,"CLOCK_REALTIME_COARSE","","",null,null],[17,"CLOCK_MONOTONIC_COARSE","","",null,null],[17,"CLOCK_BOOTTIME","","",null,null],[17,"CLOCK_REALTIME_ALARM","","",null,null],[17,"CLOCK_BOOTTIME_ALARM","","",null,null],[17,"TIMER_ABSTIME","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_LOCKS","","",null,null],[17,"RLIMIT_SIGPENDING","","",null,null],[17,"RLIMIT_MSGQUEUE","","",null,null],[17,"RLIMIT_NICE","","",null,null],[17,"RLIMIT_RTPRIO","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"SOCK_CLOEXEC","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"LC_CTYPE","","",null,null],[17,"LC_NUMERIC","","",null,null],[17,"LC_TIME","","",null,null],[17,"LC_COLLATE","","",null,null],[17,"LC_MONETARY","","",null,null],[17,"LC_MESSAGES","","",null,null],[17,"LC_ALL","","",null,null],[17,"LC_CTYPE_MASK","","",null,null],[17,"LC_NUMERIC_MASK","","",null,null],[17,"LC_TIME_MASK","","",null,null],[17,"LC_COLLATE_MASK","","",null,null],[17,"LC_MONETARY_MASK","","",null,null],[17,"LC_MESSAGES_MASK","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_RDONLY","","",null,null],[17,"MS_NOSUID","","",null,null],[17,"MS_NODEV","","",null,null],[17,"MS_NOEXEC","","",null,null],[17,"MS_SYNCHRONOUS","","",null,null],[17,"MS_REMOUNT","","",null,null],[17,"MS_MANDLOCK","","",null,null],[17,"MS_DIRSYNC","","",null,null],[17,"MS_NOATIME","","",null,null],[17,"MS_NODIRATIME","","",null,null],[17,"MS_BIND","","",null,null],[17,"MS_MOVE","","",null,null],[17,"MS_REC","","",null,null],[17,"MS_SILENT","","",null,null],[17,"MS_POSIXACL","","",null,null],[17,"MS_UNBINDABLE","","",null,null],[17,"MS_PRIVATE","","",null,null],[17,"MS_SLAVE","","",null,null],[17,"MS_SHARED","","",null,null],[17,"MS_RELATIME","","",null,null],[17,"MS_KERNMOUNT","","",null,null],[17,"MS_I_VERSION","","",null,null],[17,"MS_STRICTATIME","","",null,null],[17,"MS_ACTIVE","","",null,null],[17,"MS_NOUSER","","",null,null],[17,"MS_MGC_VAL","","",null,null],[17,"MS_MGC_MSK","","",null,null],[17,"MS_RMT_MASK","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EAGAIN","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"EBFONT","","",null,null],[17,"ENOSTR","","",null,null],[17,"ENODATA","","",null,null],[17,"ETIME","","",null,null],[17,"ENOSR","","",null,null],[17,"ENONET","","",null,null],[17,"ENOPKG","","",null,null],[17,"EREMOTE","","",null,null],[17,"ENOLINK","","",null,null],[17,"EADV","","",null,null],[17,"ESRMNT","","",null,null],[17,"ECOMM","","",null,null],[17,"EPROTO","","",null,null],[17,"EDOTDOT","","",null,null],[17,"AF_PACKET","","",null,null],[17,"IPPROTO_RAW","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[17,"MAP_TYPE","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"IFF_UP","","",null,null],[17,"IFF_BROADCAST","","",null,null],[17,"IFF_DEBUG","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"IFF_POINTOPOINT","","",null,null],[17,"IFF_NOTRAILERS","","",null,null],[17,"IFF_RUNNING","","",null,null],[17,"IFF_NOARP","","",null,null],[17,"IFF_PROMISC","","",null,null],[17,"IFF_ALLMULTI","","",null,null],[17,"IFF_MASTER","","",null,null],[17,"IFF_SLAVE","","",null,null],[17,"IFF_MULTICAST","","",null,null],[17,"IFF_PORTSEL","","",null,null],[17,"IFF_AUTOMEDIA","","",null,null],[17,"IFF_DYNAMIC","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_INET6","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IP_TRANSPARENT","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"TCP_KEEPINTVL","","",null,null],[17,"TCP_KEEPCNT","","",null,null],[17,"TCP_SYNCNT","","",null,null],[17,"TCP_LINGER2","","",null,null],[17,"TCP_DEFER_ACCEPT","","",null,null],[17,"TCP_WINDOW_CLAMP","","",null,null],[17,"TCP_INFO","","",null,null],[17,"TCP_QUICKACK","","",null,null],[17,"TCP_CONGESTION","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"SS_ONSTACK","","",null,null],[17,"SS_DISABLE","","",null,null],[17,"PATH_MAX","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"EPOLLIN","","",null,null],[17,"EPOLLPRI","","",null,null],[17,"EPOLLOUT","","",null,null],[17,"EPOLLRDNORM","","",null,null],[17,"EPOLLRDBAND","","",null,null],[17,"EPOLLWRNORM","","",null,null],[17,"EPOLLWRBAND","","",null,null],[17,"EPOLLMSG","","",null,null],[17,"EPOLLERR","","",null,null],[17,"EPOLLHUP","","",null,null],[17,"EPOLLET","","",null,null],[17,"EPOLL_CTL_ADD","","",null,null],[17,"EPOLL_CTL_MOD","","",null,null],[17,"EPOLL_CTL_DEL","","",null,null],[17,"EPOLL_CLOEXEC","","",null,null],[17,"MNT_DETACH","","",null,null],[17,"MNT_EXPIRE","","",null,null],[17,"Q_GETFMT","","",null,null],[17,"Q_GETINFO","","",null,null],[17,"Q_SETINFO","","",null,null],[17,"QIF_BLIMITS","","",null,null],[17,"QIF_SPACE","","",null,null],[17,"QIF_ILIMITS","","",null,null],[17,"QIF_INODES","","",null,null],[17,"QIF_BTIME","","",null,null],[17,"QIF_ITIME","","",null,null],[17,"QIF_LIMITS","","",null,null],[17,"QIF_USAGE","","",null,null],[17,"QIF_TIMES","","",null,null],[17,"QIF_ALL","","",null,null],[17,"EFD_CLOEXEC","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"TCIOFF","","",null,null],[17,"TCION","","",null,null],[17,"TCOOFF","","",null,null],[17,"TCOON","","",null,null],[17,"TCIFLUSH","","",null,null],[17,"TCOFLUSH","","",null,null],[17,"TCIOFLUSH","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"CR0","","",null,null],[17,"FF0","","",null,null],[17,"BS0","","",null,null],[17,"VT0","","",null,null],[17,"VERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VLNEXT","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"OPOST","","",null,null],[17,"CS5","","",null,null],[17,"CRTSCTS","","",null,null],[17,"ECHO","","",null,null],[17,"CLONE_VM","","",null,null],[17,"CLONE_FS","","",null,null],[17,"CLONE_FILES","","",null,null],[17,"CLONE_SIGHAND","","",null,null],[17,"CLONE_PTRACE","","",null,null],[17,"CLONE_VFORK","","",null,null],[17,"CLONE_PARENT","","",null,null],[17,"CLONE_THREAD","","",null,null],[17,"CLONE_NEWNS","","",null,null],[17,"CLONE_SYSVSEM","","",null,null],[17,"CLONE_SETTLS","","",null,null],[17,"CLONE_PARENT_SETTID","","",null,null],[17,"CLONE_CHILD_CLEARTID","","",null,null],[17,"CLONE_DETACHED","","",null,null],[17,"CLONE_UNTRACED","","",null,null],[17,"CLONE_CHILD_SETTID","","",null,null],[17,"CLONE_NEWUTS","","",null,null],[17,"CLONE_NEWIPC","","",null,null],[17,"CLONE_NEWUSER","","",null,null],[17,"CLONE_NEWPID","","",null,null],[17,"CLONE_NEWNET","","",null,null],[17,"CLONE_IO","","",null,null],[17,"WNOHANG","","",null,null],[17,"WUNTRACED","","",null,null],[17,"WSTOPPED","","",null,null],[17,"WEXITED","","",null,null],[17,"WCONTINUED","","",null,null],[17,"WNOWAIT","","",null,null],[17,"__WNOTHREAD","","",null,null],[17,"__WALL","","",null,null],[17,"__WCLONE","","",null,null],[17,"SPLICE_F_MOVE","","",null,null],[17,"SPLICE_F_NONBLOCK","","",null,null],[17,"SPLICE_F_MORE","","",null,null],[17,"SPLICE_F_GIFT","","",null,null],[17,"RTLD_LOCAL","","",null,null],[17,"POSIX_FADV_NORMAL","","",null,null],[17,"POSIX_FADV_RANDOM","","",null,null],[17,"POSIX_FADV_SEQUENTIAL","","",null,null],[17,"POSIX_FADV_WILLNEED","","",null,null],[17,"AT_FDCWD","","",null,null],[17,"AT_SYMLINK_NOFOLLOW","","",null,null],[17,"LOG_CRON","","",null,null],[17,"LOG_AUTHPRIV","","",null,null],[17,"LOG_FTP","","",null,null],[17,"LOG_PERROR","","",null,null],[17,"PIPE_BUF","","",null,null],[17,"SI_LOAD_SHIFT","","",null,null],[17,"ABDAY_1","","",null,null],[17,"ABDAY_2","","",null,null],[17,"ABDAY_3","","",null,null],[17,"ABDAY_4","","",null,null],[17,"ABDAY_5","","",null,null],[17,"ABDAY_6","","",null,null],[17,"ABDAY_7","","",null,null],[17,"DAY_1","","",null,null],[17,"DAY_2","","",null,null],[17,"DAY_3","","",null,null],[17,"DAY_4","","",null,null],[17,"DAY_5","","",null,null],[17,"DAY_6","","",null,null],[17,"DAY_7","","",null,null],[17,"ABMON_1","","",null,null],[17,"ABMON_2","","",null,null],[17,"ABMON_3","","",null,null],[17,"ABMON_4","","",null,null],[17,"ABMON_5","","",null,null],[17,"ABMON_6","","",null,null],[17,"ABMON_7","","",null,null],[17,"ABMON_8","","",null,null],[17,"ABMON_9","","",null,null],[17,"ABMON_10","","",null,null],[17,"ABMON_11","","",null,null],[17,"ABMON_12","","",null,null],[17,"MON_1","","",null,null],[17,"MON_2","","",null,null],[17,"MON_3","","",null,null],[17,"MON_4","","",null,null],[17,"MON_5","","",null,null],[17,"MON_6","","",null,null],[17,"MON_7","","",null,null],[17,"MON_8","","",null,null],[17,"MON_9","","",null,null],[17,"MON_10","","",null,null],[17,"MON_11","","",null,null],[17,"MON_12","","",null,null],[17,"AM_STR","","",null,null],[17,"PM_STR","","",null,null],[17,"D_T_FMT","","",null,null],[17,"D_FMT","","",null,null],[17,"T_FMT","","",null,null],[17,"T_FMT_AMPM","","",null,null],[17,"ERA","","",null,null],[17,"ERA_D_FMT","","",null,null],[17,"ALT_DIGITS","","",null,null],[17,"ERA_D_T_FMT","","",null,null],[17,"ERA_T_FMT","","",null,null],[17,"CODESET","","",null,null],[17,"CRNCYSTR","","",null,null],[17,"RADIXCHAR","","",null,null],[17,"THOUSEP","","",null,null],[17,"YESEXPR","","",null,null],[17,"NOEXPR","","",null,null],[17,"YESSTR","","",null,null],[17,"NOSTR","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"_PC_LINK_MAX","","",null,null],[17,"_PC_MAX_CANON","","",null,null],[17,"_PC_MAX_INPUT","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_PC_PATH_MAX","","",null,null],[17,"_PC_PIPE_BUF","","",null,null],[17,"_PC_CHOWN_RESTRICTED","","",null,null],[17,"_PC_NO_TRUNC","","",null,null],[17,"_PC_VDISABLE","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_PAGE_SIZE","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"_SC_HOST_NAME_MAX","","",null,null],[17,"RLIM_SAVED_MAX","","",null,null],[17,"RLIM_SAVED_CUR","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"ST_RDONLY","","",null,null],[17,"ST_NOSUID","","",null,null],[17,"ST_NODEV","","",null,null],[17,"ST_NOEXEC","","",null,null],[17,"ST_SYNCHRONOUS","","",null,null],[17,"ST_MANDLOCK","","",null,null],[17,"ST_WRITE","","",null,null],[17,"ST_APPEND","","",null,null],[17,"ST_IMMUTABLE","","",null,null],[17,"ST_NOATIME","","",null,null],[17,"ST_NODIRATIME","","",null,null],[17,"RTLD_NEXT","","",null,null],[17,"RTLD_DEFAULT","","",null,null],[17,"RTLD_NODELETE","","",null,null],[17,"RTLD_NOW","","",null,null],[17,"TCP_MD5SIG","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"PTHREAD_MUTEX_NORMAL","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[17,"PTHREAD_MUTEX_ERRORCHECK","","",null,null],[17,"PTHREAD_MUTEX_DEFAULT","","",null,null],[17,"__SIZEOF_PTHREAD_COND_T","","",null,null],[17,"SCHED_OTHER","","",null,null],[17,"SCHED_FIFO","","",null,null],[17,"SCHED_RR","","",null,null],[17,"SCHED_BATCH","","",null,null],[17,"SCHED_IDLE","","",null,null],[17,"IPC_CREAT","","",null,null],[17,"IPC_EXCL","","",null,null],[17,"IPC_NOWAIT","","",null,null],[17,"IPC_RMID","","",null,null],[17,"IPC_SET","","",null,null],[17,"IPC_STAT","","",null,null],[17,"IPC_INFO","","",null,null],[17,"SHM_R","","",null,null],[17,"SHM_W","","",null,null],[17,"SHM_RDONLY","","",null,null],[17,"SHM_RND","","",null,null],[17,"SHM_REMAP","","",null,null],[17,"SHM_EXEC","","",null,null],[17,"SHM_LOCK","","",null,null],[17,"SHM_UNLOCK","","",null,null],[17,"SHM_HUGETLB","","",null,null],[17,"SHM_NORESERVE","","",null,null],[17,"EPOLLRDHUP","","",null,null],[17,"EPOLLONESHOT","","",null,null],[17,"QFMT_VFS_OLD","","",null,null],[17,"QFMT_VFS_V0","","",null,null],[17,"SFD_CLOEXEC","","",null,null],[17,"EFD_SEMAPHORE","","",null,null],[17,"NCCS","","",null,null],[17,"AF_NETLINK","","",null,null],[17,"LOG_NFACILITIES","","",null,null],[17,"SEM_FAILED","","",null,null],[17,"RB_AUTOBOOT","","",null,null],[17,"RB_HALT_SYSTEM","","",null,null],[17,"RB_ENABLE_CAD","","",null,null],[17,"RB_DISABLE_CAD","","",null,null],[17,"RB_POWER_OFF","","",null,null],[17,"RB_SW_SUSPEND","","",null,null],[17,"RB_KEXEC","","",null,null],[17,"SYNC_FILE_RANGE_WAIT_BEFORE","","",null,null],[17,"SYNC_FILE_RANGE_WRITE","","",null,null],[17,"SYNC_FILE_RANGE_WAIT_AFTER","","",null,null],[17,"__UT_LINESIZE","","",null,null],[17,"__UT_NAMESIZE","","",null,null],[17,"__UT_HOSTSIZE","","",null,null],[17,"EMPTY","","",null,null],[17,"RUN_LVL","","",null,null],[17,"BOOT_TIME","","",null,null],[17,"NEW_TIME","","",null,null],[17,"OLD_TIME","","",null,null],[17,"INIT_PROCESS","","",null,null],[17,"LOGIN_PROCESS","","",null,null],[17,"USER_PROCESS","","",null,null],[17,"DEAD_PROCESS","","",null,null],[17,"ACCOUNTING","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RLIMIT_RTTIME","","",null,null],[17,"RLIMIT_NLIMITS","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_RSYNC","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_FSYNC","","",null,null],[17,"SOCK_NONBLOCK","","",null,null],[17,"LC_PAPER","","",null,null],[17,"LC_NAME","","",null,null],[17,"LC_ADDRESS","","",null,null],[17,"LC_TELEPHONE","","",null,null],[17,"LC_MEASUREMENT","","",null,null],[17,"LC_IDENTIFICATION","","",null,null],[17,"LC_PAPER_MASK","","",null,null],[17,"LC_NAME_MASK","","",null,null],[17,"LC_ADDRESS_MASK","","",null,null],[17,"LC_TELEPHONE_MASK","","",null,null],[17,"LC_MEASUREMENT_MASK","","",null,null],[17,"LC_IDENTIFICATION_MASK","","",null,null],[17,"LC_ALL_MASK","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"ELOOP","","",null,null],[17,"ENOMSG","","",null,null],[17,"EIDRM","","",null,null],[17,"ECHRNG","","",null,null],[17,"EL2NSYNC","","",null,null],[17,"EL3HLT","","",null,null],[17,"EL3RST","","",null,null],[17,"ELNRNG","","",null,null],[17,"EUNATCH","","",null,null],[17,"ENOCSI","","",null,null],[17,"EL2HLT","","",null,null],[17,"EBADE","","",null,null],[17,"EBADR","","",null,null],[17,"EXFULL","","",null,null],[17,"ENOANO","","",null,null],[17,"EBADRQC","","",null,null],[17,"EBADSLT","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"ENOTUNIQ","","",null,null],[17,"EBADFD","","",null,null],[17,"EBADMSG","","",null,null],[17,"EREMCHG","","",null,null],[17,"ELIBACC","","",null,null],[17,"ELIBBAD","","",null,null],[17,"ELIBSCN","","",null,null],[17,"ELIBMAX","","",null,null],[17,"ELIBEXEC","","",null,null],[17,"EILSEQ","","",null,null],[17,"ERESTART","","",null,null],[17,"ESTRPIPE","","",null,null],[17,"EUSERS","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"EALREADY","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"ESTALE","","",null,null],[17,"EUCLEAN","","",null,null],[17,"ENOTNAM","","",null,null],[17,"ENAVAIL","","",null,null],[17,"EISNAM","","",null,null],[17,"EREMOTEIO","","",null,null],[17,"EDQUOT","","",null,null],[17,"ENOMEDIUM","","",null,null],[17,"EMEDIUMTYPE","","",null,null],[17,"ECANCELED","","",null,null],[17,"ENOKEY","","",null,null],[17,"EKEYEXPIRED","","",null,null],[17,"EKEYREVOKED","","",null,null],[17,"EKEYREJECTED","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EHWPOISON","","",null,null],[17,"ERFKILL","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_SEQPACKET","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"TCP_COOKIE_TRANSACTIONS","","",null,null],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",null,null],[17,"TCP_THIN_DUPACK","","",null,null],[17,"TCP_USER_TIMEOUT","","",null,null],[17,"TCP_REPAIR","","",null,null],[17,"TCP_REPAIR_QUEUE","","",null,null],[17,"TCP_QUEUE_SEQ","","",null,null],[17,"TCP_REPAIR_OPTIONS","","",null,null],[17,"TCP_FASTOPEN","","",null,null],[17,"TCP_TIMESTAMP","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGSTKFLT","","",null,null],[17,"SIGUNUSED","","",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGPOLL","","",null,null],[17,"SIGPWR","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"POLLRDNORM","","",null,null],[17,"POLLWRNORM","","",null,null],[17,"POLLRDBAND","","",null,null],[17,"POLLWRBAND","","",null,null],[17,"FALLOC_FL_KEEP_SIZE","","",null,null],[17,"FALLOC_FL_PUNCH_HOLE","","",null,null],[17,"BUFSIZ","","",null,null],[17,"TMP_MAX","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"POSIX_FADV_DONTNEED","","",null,null],[17,"POSIX_FADV_NOREUSE","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_2_C_VERSION","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"O_ASYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"ST_RELATIME","","",null,null],[17,"NI_MAXHOST","","",null,null],[17,"ADFS_SUPER_MAGIC","","",null,null],[17,"AFFS_SUPER_MAGIC","","",null,null],[17,"CODA_SUPER_MAGIC","","",null,null],[17,"CRAMFS_MAGIC","","",null,null],[17,"EFS_SUPER_MAGIC","","",null,null],[17,"EXT2_SUPER_MAGIC","","",null,null],[17,"EXT3_SUPER_MAGIC","","",null,null],[17,"EXT4_SUPER_MAGIC","","",null,null],[17,"HPFS_SUPER_MAGIC","","",null,null],[17,"HUGETLBFS_MAGIC","","",null,null],[17,"ISOFS_SUPER_MAGIC","","",null,null],[17,"JFFS2_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC2","","",null,null],[17,"MINIX2_SUPER_MAGIC","","",null,null],[17,"MINIX2_SUPER_MAGIC2","","",null,null],[17,"MSDOS_SUPER_MAGIC","","",null,null],[17,"NCP_SUPER_MAGIC","","",null,null],[17,"NFS_SUPER_MAGIC","","",null,null],[17,"OPENPROM_SUPER_MAGIC","","",null,null],[17,"PROC_SUPER_MAGIC","","",null,null],[17,"QNX4_SUPER_MAGIC","","",null,null],[17,"REISERFS_SUPER_MAGIC","","",null,null],[17,"SMB_SUPER_MAGIC","","",null,null],[17,"TMPFS_MAGIC","","",null,null],[17,"USBDEVICE_SUPER_MAGIC","","",null,null],[17,"VEOF","","",null,null],[17,"IUTF8","","",null,null],[17,"CPU_SETSIZE","","",null,null],[17,"QFMT_VFS_V1","","",null,null],[17,"PTRACE_TRACEME","","",null,null],[17,"PTRACE_PEEKTEXT","","",null,null],[17,"PTRACE_PEEKDATA","","",null,null],[17,"PTRACE_PEEKUSER","","",null,null],[17,"PTRACE_POKETEXT","","",null,null],[17,"PTRACE_POKEDATA","","",null,null],[17,"PTRACE_POKEUSER","","",null,null],[17,"PTRACE_CONT","","",null,null],[17,"PTRACE_KILL","","",null,null],[17,"PTRACE_SINGLESTEP","","",null,null],[17,"PTRACE_ATTACH","","",null,null],[17,"PTRACE_DETACH","","",null,null],[17,"PTRACE_SYSCALL","","",null,null],[17,"PTRACE_SETOPTIONS","","",null,null],[17,"PTRACE_GETEVENTMSG","","",null,null],[17,"PTRACE_GETSIGINFO","","",null,null],[17,"PTRACE_SETSIGINFO","","",null,null],[17,"PTRACE_GETREGSET","","",null,null],[17,"PTRACE_SETREGSET","","",null,null],[17,"PTRACE_SEIZE","","",null,null],[17,"PTRACE_INTERRUPT","","",null,null],[17,"PTRACE_LISTEN","","",null,null],[17,"PTRACE_PEEKSIGINFO","","",null,null],[17,"MADV_DODUMP","","",null,null],[17,"MADV_DONTDUMP","","",null,null],[17,"EPOLLWAKEUP","","",null,null],[17,"MADV_HUGEPAGE","","",null,null],[17,"MADV_NOHUGEPAGE","","",null,null],[17,"MAP_HUGETLB","","",null,null],[17,"EFD_NONBLOCK","","",null,null],[17,"F_GETLK","","",null,null],[17,"F_GETOWN","","",null,null],[17,"F_SETOWN","","",null,null],[17,"F_SETLK","","",null,null],[17,"F_SETLKW","","",null,null],[17,"SEEK_DATA","","",null,null],[17,"SEEK_HOLE","","",null,null],[17,"SFD_NONBLOCK","","",null,null],[17,"TCSANOW","","",null,null],[17,"TCSADRAIN","","",null,null],[17,"TCSAFLUSH","","",null,null],[17,"TIOCGSOFTCAR","","",null,null],[17,"TIOCSSOFTCAR","","",null,null],[17,"TIOCLINUX","","",null,null],[17,"TIOCGSERIAL","","",null,null],[17,"TIOCEXCL","","",null,null],[17,"TIOCNXCL","","",null,null],[17,"TIOCSCTTY","","",null,null],[17,"TIOCSTI","","",null,null],[17,"TIOCMGET","","",null,null],[17,"TIOCMBIS","","",null,null],[17,"TIOCMBIC","","",null,null],[17,"TIOCMSET","","",null,null],[17,"TIOCCONS","","",null,null],[17,"RTLD_DEEPBIND","","",null,null],[17,"RTLD_GLOBAL","","",null,null],[17,"RTLD_NOLOAD","","",null,null],[17,"LINUX_REBOOT_MAGIC1","","",null,null],[17,"LINUX_REBOOT_MAGIC2","","",null,null],[17,"LINUX_REBOOT_MAGIC2A","","",null,null],[17,"LINUX_REBOOT_MAGIC2B","","",null,null],[17,"LINUX_REBOOT_MAGIC2C","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART","","",null,null],[17,"LINUX_REBOOT_CMD_HALT","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_ON","","",null,null],[17,"LINUX_REBOOT_CMD_CAD_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_POWER_OFF","","",null,null],[17,"LINUX_REBOOT_CMD_RESTART2","","",null,null],[17,"LINUX_REBOOT_CMD_SW_SUSPEND","","",null,null],[17,"LINUX_REBOOT_CMD_KEXEC","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCK_T","","",null,null],[17,"__SIZEOF_PTHREAD_CONDATTR_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEX_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEXATTR_T","","",null,null],[17,"O_DIRECT","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"SO_PEERCRED","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"FIOCLEX","","",null,null],[17,"FIONBIO","","",null,null],[17,"PTRACE_GETFPREGS","","",null,null],[17,"PTRACE_SETFPREGS","","",null,null],[17,"PTRACE_GETFPXREGS","","",null,null],[17,"PTRACE_SETFPXREGS","","",null,null],[17,"PTRACE_GETREGS","","",null,null],[17,"PTRACE_SETREGS","","",null,null],[17,"SYS_gettid","","",null,null],[17,"SYS_perf_event_open","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"SIGSTKSZ","","",null,null],[17,"CBAUD","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"TAB3","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF1","","",null,null],[17,"BS1","","",null,null],[17,"VT1","","",null,null],[17,"VWERASE","","",null,null],[17,"VREPRINT","","",null,null],[17,"VSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VDISCARD","","",null,null],[17,"VTIME","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"ONLCR","","",null,null],[17,"CSIZE","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VMIN","","",null,null],[17,"IEXTEN","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"EXTPROC","","",null,null],[17,"TCGETS","","",null,null],[17,"TCSETS","","",null,null],[17,"TCSETSW","","",null,null],[17,"TCSETSF","","",null,null],[17,"TCGETA","","",null,null],[17,"TCSETA","","",null,null],[17,"TCSETAW","","",null,null],[17,"TCSETAF","","",null,null],[17,"TCSBRK","","",null,null],[17,"TCXONC","","",null,null],[17,"TCFLSH","","",null,null],[17,"TIOCINQ","","",null,null],[17,"TIOCGPGRP","","",null,null],[17,"TIOCSPGRP","","",null,null],[17,"TIOCOUTQ","","",null,null],[17,"TIOCGWINSZ","","",null,null],[17,"TIOCSWINSZ","","",null,null],[17,"FIONREAD","","",null,null]],"paths":[[3,"group"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_nl"],[3,"sockaddr_ll"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"lconv"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"ifaddrs"],[3,"passwd"],[3,"statvfs"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"mq_attr"],[3,"if_nameindex"],[3,"__exit_status"],[3,"__timeval"],[3,"utmpx"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"ucred"],[3,"statfs"],[3,"msghdr"],[3,"termios"],[3,"flock"],[3,"sysinfo"],[3,"stat"],[3,"stat64"],[3,"_libc_fpxreg"],[3,"_libc_xmmreg"],[3,"_libc_fpstate"],[3,"mcontext_t"],[3,"ucontext_t"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"pthread_attr_t"],[3,"sigset_t"],[3,"sem_t"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_cond_t"],[3,"pthread_condattr_t"],[3,"fsid_t"],[3,"cpu_set_t"],[3,"fd_set"]]};
searchIndex["encoding_index_singlebyte"] = {"doc":"Single-byte index tables for\n[rust-encoding](https://github.com/lifthrasiir/rust-encoding).","items":[[0,"ibm866","encoding_index_singlebyte","IBM code page 866.",null,null],[5,"forward","encoding_index_singlebyte::ibm866","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"iso_8859_2","encoding_index_singlebyte","ISO 8859-2.",null,null],[5,"forward","encoding_index_singlebyte::iso_8859_2","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"iso_8859_3","encoding_index_singlebyte","ISO 8859-3.",null,null],[5,"forward","encoding_index_singlebyte::iso_8859_3","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"iso_8859_4","encoding_index_singlebyte","ISO 8859-4.",null,null],[5,"forward","encoding_index_singlebyte::iso_8859_4","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"iso_8859_5","encoding_index_singlebyte","ISO 8859-5.",null,null],[5,"forward","encoding_index_singlebyte::iso_8859_5","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"iso_8859_6","encoding_index_singlebyte","ISO 8859-6.",null,null],[5,"forward","encoding_index_singlebyte::iso_8859_6","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"iso_8859_7","encoding_index_singlebyte","ISO 8859-7.",null,null],[5,"forward","encoding_index_singlebyte::iso_8859_7","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"iso_8859_8","encoding_index_singlebyte","ISO 8859-8 (either visual or logical).",null,null],[5,"forward","encoding_index_singlebyte::iso_8859_8","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"iso_8859_10","encoding_index_singlebyte","ISO 8859-10.",null,null],[5,"forward","encoding_index_singlebyte::iso_8859_10","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"iso_8859_13","encoding_index_singlebyte","ISO 8859-13.",null,null],[5,"forward","encoding_index_singlebyte::iso_8859_13","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"iso_8859_14","encoding_index_singlebyte","ISO 8859-14.",null,null],[5,"forward","encoding_index_singlebyte::iso_8859_14","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"iso_8859_15","encoding_index_singlebyte","ISO 8859-15.",null,null],[5,"forward","encoding_index_singlebyte::iso_8859_15","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"iso_8859_16","encoding_index_singlebyte","ISO 8859-16.",null,null],[5,"forward","encoding_index_singlebyte::iso_8859_16","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"koi8_r","encoding_index_singlebyte","KOI8-R.",null,null],[5,"forward","encoding_index_singlebyte::koi8_r","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"koi8_u","encoding_index_singlebyte","KOI8-U.",null,null],[5,"forward","encoding_index_singlebyte::koi8_u","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"macintosh","encoding_index_singlebyte","MacRoman.",null,null],[5,"forward","encoding_index_singlebyte::macintosh","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"windows_874","encoding_index_singlebyte","Windows code page 874.",null,null],[5,"forward","encoding_index_singlebyte::windows_874","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"windows_1250","encoding_index_singlebyte","Windows code page 1250.",null,null],[5,"forward","encoding_index_singlebyte::windows_1250","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"windows_1251","encoding_index_singlebyte","Windows code page 1251.",null,null],[5,"forward","encoding_index_singlebyte::windows_1251","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"windows_1252","encoding_index_singlebyte","Windows code page 1252.",null,null],[5,"forward","encoding_index_singlebyte::windows_1252","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"windows_1253","encoding_index_singlebyte","Windows code page 1253.",null,null],[5,"forward","encoding_index_singlebyte::windows_1253","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"windows_1254","encoding_index_singlebyte","Windows code page 1254.",null,null],[5,"forward","encoding_index_singlebyte::windows_1254","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"windows_1255","encoding_index_singlebyte","Windows code page 1254.",null,null],[5,"forward","encoding_index_singlebyte::windows_1255","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"windows_1256","encoding_index_singlebyte","Windows code page 1256.",null,null],[5,"forward","encoding_index_singlebyte::windows_1256","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"windows_1257","encoding_index_singlebyte","Windows code page 1257.",null,null],[5,"forward","encoding_index_singlebyte::windows_1257","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"windows_1258","encoding_index_singlebyte","Windows code page 1258.",null,null],[5,"forward","encoding_index_singlebyte::windows_1258","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}],[0,"x_mac_cyrillic","encoding_index_singlebyte","MacCyrillic.",null,null],[5,"forward","encoding_index_singlebyte::x_mac_cyrillic","Returns the index code point for pointer `code` in this index.",null,{"inputs":[{"name":"u8"}],"output":{"name":"u16"}}],[5,"backward","","Returns the index pointer for code point `code` in this index.",null,{"inputs":[{"name":"u32"}],"output":{"name":"u8"}}]],"paths":[]};
searchIndex["term"] = {"doc":"Terminal formatting library.","items":[[4,"Attr","term","Terminal attributes for use with term.attr().",null,null],[13,"Bold","","Bold (or possibly bright) mode",0,null],[13,"Dim","","Dim mode, also called faint or half-bright. Often not supported",0,null],[13,"Italic","","Italics mode. Often not supported",0,null],[13,"Underline","","Underline mode",0,null],[13,"Blink","","Blink mode",0,null],[13,"Standout","","Standout mode. Often implemented as Reverse, sometimes coupled with Bold",0,null],[13,"Reverse","","Reverse mode, inverts the foreground and background colors",0,null],[13,"Secure","","Secure mode, also called invis mode. Hides the printed text",0,null],[13,"ForegroundColor","","Convenience attribute to set the foreground color",0,null],[13,"BackgroundColor","","Convenience attribute to set the background color",0,null],[4,"Error","","An error arising from interacting with the terminal.",null,null],[13,"Io","","Indicates an error from any underlying IO",1,null],[13,"TerminfoParsing","","Indicates an error during terminfo parsing",1,null],[13,"ParameterizedExpansion","","Indicates an error expanding a parameterized string from the terminfo database",1,null],[13,"NotSupported","","Indicates that the terminal does not support the requested operation.",1,null],[13,"TermUnset","","Indicates that the `TERM` environment variable was unset, and thus we were unable to detect\nwhich terminal we should be using.",1,null],[13,"TerminfoEntryNotFound","","Indicates that we were unable to find a terminfo entry for the requested terminal.",1,null],[13,"CursorDestinationInvalid","","Indicates that the cursor could not be moved to the requested position.",1,null],[13,"ColorOutOfRange","","Indicates that the terminal does not support displaying the requested color.",1,null],[5,"stdout","","Return a Terminal wrapping stdout, or None if a terminal couldn&#39;t be\nopened.",null,{"inputs":[],"output":{"name":"option"}}],[5,"stderr","","Return a Terminal wrapping stderr, or None if a terminal couldn&#39;t be\nopened.",null,{"inputs":[],"output":{"name":"option"}}],[0,"terminfo","","Terminfo database interface.",null,null],[3,"TermInfo","term::terminfo","A parsed terminfo database entry.",null,null],[12,"names","","Names for the terminal",2,null],[12,"bools","","Map of capability name to boolean value",2,null],[12,"numbers","","Map of capability name to numeric value",2,null],[12,"strings","","Map of capability name to raw (unexpanded) string",2,null],[3,"TerminfoTerminal","","A Terminal that knows how many colors it supports, with a reference to its\nparsed Terminfo database record.",null,null],[4,"Error","","An error from parsing a terminfo entry",null,null],[13,"BadMagic","","The &quot;magic&quot; number at the start of the file was wrong.",3,null],[13,"NotUtf8","","The names in the file were not valid UTF-8.",3,null],[13,"ShortNames","","The names section of the file was empty",3,null],[13,"TooManyBools","","More boolean parameters are present in the file than this crate knows how to interpret.",3,null],[13,"TooManyNumbers","","More number parameters are present in the file than this crate knows how to interpret.",3,null],[13,"TooManyStrings","","More string parameters are present in the file than this crate knows how to interpret.",3,null],[13,"InvalidLength","","The length of some field was not &gt;= -1.",3,null],[13,"NamesMissingNull","","The names table was missing a trailing null terminator.",3,null],[13,"StringsMissingNull","","The strings table was missing a trailing null terminator.",3,null],[0,"searcher","","ncurses-compatible database discovery",null,null],[5,"get_dbpath_for_term","term::terminfo::searcher","Return path to database entry for `term`",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[0,"parser","term::terminfo","TermInfo format parsing.\nncurses-compatible compiled terminfo format parsing (term(5))",null,null],[0,"compiled","term::terminfo::parser","ncurses-compatible compiled terminfo format parsing (term(5))",null,null],[5,"parse","term::terminfo::parser::compiled","Parse a compiled terminfo entry, using long capability names if `longnames`\nis true",null,{"inputs":[{"name":"read"},{"name":"bool"}],"output":{"name":"result"}}],[5,"msys_terminfo","","Create a dummy TermInfo struct for msys terminals",null,{"inputs":[],"output":{"name":"terminfo"}}],[7,"boolfnames","","",null,null],[7,"boolnames","","",null,null],[7,"numfnames","","",null,null],[7,"numnames","","",null,null],[7,"stringfnames","","",null,null],[7,"stringnames","","",null,null],[0,"parm","term::terminfo","Parameterized string expansion",null,null],[3,"Variables","term::terminfo::parm","Container for static and dynamic variable arrays",null,null],[4,"Param","","Types of parameters a capability can use",null,null],[13,"Words","","",4,null],[13,"Number","","",4,null],[4,"Error","","An error from interpreting a parameterized string.",null,null],[13,"StackUnderflow","","Data was requested from the stack, but the stack didn&#39;t have enough elements.",5,null],[13,"TypeMismatch","","The type of the element(s) on top of the stack did not match the type that the operator\nwanted.",5,null],[13,"UnrecognizedFormatOption","","An unrecognized format option was used.",5,null],[13,"InvalidVariableName","","An invalid variable name was used.",5,null],[13,"InvalidParameterIndex","","An invalid parameter index was used.",5,null],[13,"MalformedCharacterConstant","","A malformed character constant was used.",5,null],[13,"IntegerConstantOverflow","","An integer constant was too large (overflowed an i32)",5,null],[13,"MalformedIntegerConstant","","A malformed integer constant was used.",5,null],[13,"FormatWidthOverflow","","A format width constant was too large (overflowed a usize)",5,null],[13,"FormatPrecisionOverflow","","A format precision constant was too large (overflowed a usize)",5,null],[5,"expand","","Expand a parameterized capability",null,null],[11,"clone","","",4,null],[11,"fmt","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"fmt","","",5,null],[11,"description","","",5,null],[11,"cause","","",5,null],[11,"new","","Return a new zero-initialized Variables",6,{"inputs":[],"output":{"name":"variables"}}],[11,"fmt","term::terminfo","",2,null],[11,"from_env","","Create a TermInfo based on current environment.",2,{"inputs":[],"output":{"name":"result"}}],[11,"from_name","","Create a TermInfo for the named terminal.",2,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_path","","Parse the given TermInfo.",2,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"fmt","","",3,null],[11,"eq","","",3,null],[11,"ne","","",3,null],[11,"fmt","","",3,null],[11,"from","","",3,{"inputs":[{"name":"fromutf8error"}],"output":{"name":"self"}}],[11,"description","","",3,null],[11,"cause","","",3,null],[11,"fg","","",7,null],[11,"bg","","",7,null],[11,"attr","","",7,null],[11,"supports_attr","","",7,null],[11,"reset","","",7,null],[11,"supports_reset","","",7,null],[11,"supports_color","","",7,null],[11,"cursor_up","","",7,null],[11,"delete_line","","",7,null],[11,"carriage_return","","",7,null],[11,"get_ref","","",7,null],[11,"get_mut","","",7,null],[11,"into_inner","","",7,null],[11,"new_with_terminfo","","Create a new TerminfoTerminal with the given TermInfo and Write.",7,{"inputs":[{"name":"t"},{"name":"terminfo"}],"output":{"name":"terminfoterminal"}}],[11,"new","","Create a new TerminfoTerminal for the current environment with the given Write.",7,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[11,"write","","",7,null],[11,"flush","","",7,null],[0,"color","term","Terminal color definitions",null,null],[6,"Color","term::color","Number for a terminal color",null,null],[17,"BLACK","","",null,null],[17,"RED","","",null,null],[17,"GREEN","","",null,null],[17,"YELLOW","","",null,null],[17,"BLUE","","",null,null],[17,"MAGENTA","","",null,null],[17,"CYAN","","",null,null],[17,"WHITE","","",null,null],[17,"BRIGHT_BLACK","","",null,null],[17,"BRIGHT_RED","","",null,null],[17,"BRIGHT_GREEN","","",null,null],[17,"BRIGHT_YELLOW","","",null,null],[17,"BRIGHT_BLUE","","",null,null],[17,"BRIGHT_MAGENTA","","",null,null],[17,"BRIGHT_CYAN","","",null,null],[17,"BRIGHT_WHITE","","",null,null],[6,"StdoutTerminal","term","Alias for stdout terminals.",null,null],[6,"StderrTerminal","","Alias for stderr terminals.",null,null],[6,"Result","","The canonical `Result` type using this crate&#39;s Error type.",null,null],[8,"Terminal","","A terminal with similar capabilities to an ANSI Terminal\n(foreground/background colors etc).",null,null],[16,"Output","","The terminal&#39;s output writer type.",8,null],[10,"fg","","Sets the foreground color to the given color.",8,null],[10,"bg","","Sets the background color to the given color.",8,null],[10,"attr","","Sets the given terminal attribute, if supported.  Returns `Ok(())` if the attribute is\nsupported and was sent to the terminal, or `Err(e)` if there was an error or the attribute\nwasn&#39;t supported.",8,null],[10,"supports_attr","","Returns whether the given terminal attribute is supported.",8,null],[10,"reset","","Resets all terminal attributes and colors to their defaults.",8,null],[10,"supports_reset","","Returns true if reset is supported.",8,null],[10,"supports_color","","Returns true if color is fully supported.",8,null],[10,"cursor_up","","Moves the cursor up one line.",8,null],[10,"delete_line","","Deletes the text from the cursor location to the end of the line.",8,null],[10,"carriage_return","","Moves the cursor to the left edge of the current line.",8,null],[10,"get_ref","","Gets an immutable reference to the stream inside",8,null],[10,"get_mut","","Gets a mutable reference to the stream inside",8,null],[10,"into_inner","","Returns the contained stream, destroying the `Terminal`",8,null],[11,"fmt","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"clone","","",0,null],[11,"fmt","","",1,null],[11,"eq","","",1,null],[11,"fmt","","",1,null],[11,"description","","",1,null],[11,"cause","","",1,null],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",1,{"inputs":[{"name":"error"}],"output":{"name":"self"}}]],"paths":[[4,"Attr"],[4,"Error"],[3,"TermInfo"],[4,"Error"],[4,"Param"],[4,"Error"],[3,"Variables"],[3,"TerminfoTerminal"],[8,"Terminal"]]};
searchIndex["itertools"] = {"doc":"Itertools — extra iterator adaptors, functions and macros.","items":[[3,"Dedup","itertools","An iterator adaptor that removes repeated duplicates.",null,null],[3,"Interleave","","An iterator adaptor that alternates elements from two iterators until both\nrun out.",null,null],[3,"InterleaveShortest","","An iterator adaptor that alternates elements from the two iterators until\none of them runs out.",null,null],[3,"Product","","An iterator adaptor that iterates over the cartesian product of\nthe element sets of two iterators `I` and `J`.",null,null],[3,"PutBack","","An iterator adaptor that allows putting back a single\nitem to the front of the iterator.",null,null],[3,"PutBackN","","An iterator adaptor that allows putting multiple\nitems in front of the iterator.",null,null],[3,"Batching","","A “meta iterator adaptor”. Its closure recives a reference to the iterator\nand may pick off as many elements as it likes, to produce the next iterator element.",null,null],[3,"GroupBy","","An iterator adaptor that groups iterator elements. Consecutive elements\nthat map to the same key (“runs”), are returned as the iterator elements.",null,null],[3,"Step","","An iterator adaptor that steps a number elements in the base iterator\nfor each iteration.",null,null],[3,"Merge","","An iterator adaptor that merges the two base iterators in ascending order.\nIf both base iterators are sorted (ascending), the result is sorted.",null,null],[3,"MergeBy","","An iterator adaptor that merges the two base iterators in ascending order.\nIf both base iterators are sorted (ascending), the result is sorted.",null,null],[3,"MultiPeek","","An iterator adaptor that allows the user to peek at multiple `.next()`\nvalues without advancing itself.",null,null],[3,"TakeWhileRef","","An iterator adaptor that borrows from a `Clone`-able iterator\nto only pick off elements while the predicate returns `true`.",null,null],[3,"WhileSome","","An iterator adaptor that filters `Option&lt;A&gt;` iterator elements\nand produces `A`. Stops on the first `None` encountered.",null,null],[3,"Coalesce","","An iterator adaptor that may join together adjacent elements.",null,null],[3,"MendSlices","","An iterator adaptor that glues together adjacent contiguous slices.",null,null],[3,"Combinations","","An iterator to iterate through all the combinations of pairs in a `Clone`-able iterator.",null,null],[3,"CombinationsN","","An iterator to iterate through all the `n`-length combinations in an iterator.",null,null],[3,"Unique","","An iterator adapter to filter out duplicate elements.",null,null],[3,"UniqueBy","","An iterator adapter to filter out duplicate elements.",null,null],[3,"Flatten","","An iterator adapter to simply flatten a structure.",null,null],[3,"Format","","Format all iterator elements lazily, separated by `sep`.",null,null],[3,"FormatDefault","","Format all iterator elements lazily, separated by `sep`.",null,null],[3,"ChunksLazy","","`ChunkLazy` is the storage for a lazy chunking operation.",null,null],[3,"Chunk","","An iterator for the elements in a single chunk.",null,null],[3,"Chunks","","An iterator that yields the Chunk iterators.",null,null],[3,"GroupByLazy","","`GroupByLazy` is the storage for the lazy grouping operation.",null,null],[3,"Group","","An iterator for the elements in a single group.",null,null],[3,"Groups","","An iterator that yields the Group iterators.",null,null],[3,"Intersperse","","An iterator adaptor to insert a particular value\nbetween each element of the adapted iterator.",null,null],[3,"ISlice","","An iterator adaptor that yields a subset (a slice) of the base iterator.",null,null],[3,"KMerge","","An iterator adaptor that merges an abitrary number of base iterators in ascending order.\nIf all base iterators are sorted (ascending), the result is sorted.",null,null],[3,"Linspace","","An iterator of a sequence of evenly spaced floats.",null,null],[3,"PadUsing","","An iterator adaptor that pads a sequence to a minimum length by filling\nmissing elements using a closure.",null,null],[3,"RcIter","","A wrapper for `Rc&lt;RefCell&lt;I&gt;&gt;`, that implements the `Iterator` trait.",null,null],[12,"rciter","","The boxed iterator.",0,null],[3,"RepeatN","","An iterator that repeats an element exactly *n* times.",null,null],[3,"RepeatCall","","An iterator source that produces elements indefinitely by calling\na given closure.",null,null],[3,"Unfold","","`Unfold` is a general iterator builder: it has a mutable state value,\nand a closure with access to the state that produces the next value.",null,null],[12,"state","","Internal state that will be passed to the closure on the next iteration",1,null],[3,"Stride","","An iterator similar to the slice iterator, but with a certain number of steps\n(the stride) skipped per iteration.",null,null],[3,"StrideMut","","The mutable equivalent of Stride.",null,null],[3,"Tee","","One half of an iterator pair where both return the same elements.",null,null],[3,"ZipEq","","An iterator which iterates two other iterators simultaneously",null,null],[3,"ZipLongest","","An iterator which iterates two other iterators simultaneously",null,null],[3,"Zip","","An iterator that generalizes *.zip()* and allows running multiple iterators in lockstep.",null,null],[3,"ZipSlices","","An iterator which iterates two slices simultaneously.",null,null],[4,"Diff","","A type returned by the [`diff_with`](./fn.diff_with.html) function.",null,null],[13,"FirstMismatch","","The index of the first non-matching element along with both iterator&#39;s remaining elements\nstarting with the first mis-match.",2,null],[13,"Shorter","","The total number of elements that were in `J` along with the remaining elements of `I`.",2,null],[13,"Longer","","The total number of elements that were in `I` along with the remaining elements of `J`.",2,null],[4,"MinMaxResult","","`MinMaxResult` is an enum returned by `minmax`. See `Itertools::minmax()` for\nmore detail.",null,null],[13,"NoElements","","Empty iterator",3,null],[13,"OneElement","","Iterator with one element, so the minimum and maximum are the same",3,null],[13,"MinMax","","More than one element in the iterator, the first element is not larger\nthan the second",3,null],[4,"EitherOrBoth","","A value yielded by `ZipLongest`.\nContains one or two values, depending on which of the input iterators are exhausted.",null,null],[13,"Both","","Neither input iterator is exhausted yet, yielding two values.",4,null],[13,"Left","","The parameter iterator of `.zip_longest()` is exhausted,\nonly yielding a value from the `self` iterator.",4,null],[13,"Right","","The `self` iterator of `.zip_longest()` is exhausted,\nonly yielding a value from the parameter iterator.",4,null],[4,"Partition","","Classifies the result of the `.partition_map()` closure into a\npartition.",null,null],[13,"Left","","Classify into the left partition.",5,null],[13,"Right","","Classify into the right partition.",5,null],[4,"FoldWhile","","An enum used for controlling the execution of `.fold_while()`.",null,null],[13,"Continue","","Continue folding with this value",6,null],[13,"Done","","Fold is complete and will return this value",6,null],[5,"diff_with","","Compares every element yielded by both `i` and `j` with the given function in lock-step and\nreturns a `Diff` which describes how `j` differs from `i`.",null,{"inputs":[{"name":"i"},{"name":"j"},{"name":"f"}],"output":{"name":"option"}}],[5,"linspace","","Return an iterator of evenly spaced floats.",null,{"inputs":[{"name":"f"},{"name":"f"},{"name":"usize"}],"output":{"name":"linspace"}}],[5,"equal","","Return `true` if both iterators produce equal sequences\n(elements pairwise equal and sequences of the same length),\n`false` otherwise.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"bool"}}],[5,"assert_equal","","Assert that two iterators produce equal sequences, with the same\nsemantics as *equal(a, b)*.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":null}],[5,"partition","","Partition a sequence using predicate `pred` so that elements\nthat map to `true` are placed before elements which map to `false`.",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"usize"}}],[11,"clone","","",7,null],[11,"new","","Creat a new `Interleave` iterator.",7,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"interleave"}}],[11,"next","","",7,null],[11,"clone","","",8,null],[11,"new","","Create a new `InterleaveShortest` iterator.",8,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"interleaveshortest"}}],[11,"next","","",8,null],[11,"size_hint","","",8,null],[11,"clone","","",9,null],[11,"new","","Iterator element type is `A`",9,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"with_value","","Create a `PutBack` along with the `value` to put back.",9,{"inputs":[{"name":"item"},{"name":"i"}],"output":{"name":"self"}}],[11,"into_parts","","Split the `PutBack` into its parts.",9,null],[11,"put_back","","Put back a single value to the front of the iterator.",9,null],[11,"next","","",9,null],[11,"size_hint","","",9,null],[11,"new","","Iterator element type is `A`",10,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"put_back","","Puts x in front of the iterator.\nThe values are yielded in order.",10,null],[11,"next","","",10,null],[11,"size_hint","","",10,null],[11,"clone","","",10,null],[11,"clone","","",11,null],[11,"new","","Create a new cartesian product iterator",11,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"self"}}],[11,"next","","",11,null],[11,"size_hint","","",11,null],[11,"clone","","",12,null],[11,"new","","Create a new Batching iterator.",12,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"batching"}}],[11,"next","","",12,null],[11,"size_hint","","",12,null],[11,"clone","","",13,null],[11,"new","","Create a new `GroupBy` iterator.",13,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"self"}}],[11,"next","","",13,null],[11,"size_hint","","",13,null],[11,"clone","","",14,null],[11,"new","","Create a `Step` iterator.",14,{"inputs":[{"name":"i"},{"name":"usize"}],"output":{"name":"self"}}],[11,"next","","",14,null],[11,"size_hint","","",14,null],[11,"clone","","",15,null],[11,"next","","",15,null],[11,"size_hint","","",15,null],[11,"clone","","",16,null],[11,"next","","",16,null],[11,"size_hint","","",16,null],[11,"clone","","",17,null],[11,"new","","Create a `MultiPeek` iterator.",17,{"inputs":[{"name":"i"}],"output":{"name":"multipeek"}}],[11,"peek","","Works exactly like `.next()` with the only difference that it doesn&#39;t\nadvance itself. `.peek()` can be called multiple times, to peek\nfurther ahead.",17,null],[11,"next","","",17,null],[11,"size_hint","","",17,null],[11,"clone","","",18,null],[11,"new","","Create a new `Coalesce`.",18,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"self"}}],[11,"next","","",18,null],[11,"size_hint","","",18,null],[11,"clone","","",19,null],[11,"new","","Create a new `Dedup`.",19,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"next","","",19,null],[11,"size_hint","","",19,null],[11,"clone","","",20,null],[11,"new","","Create a new `MendSlices`.",20,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"next","","",20,null],[11,"size_hint","","",20,null],[11,"new","","Create a new `TakeWhileRef` from a reference to clonable iterator.",21,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"self"}}],[11,"next","","",21,null],[11,"size_hint","","",21,null],[11,"clone","","",22,null],[11,"new","","Create a new `WhileSome&lt;I&gt;`.",22,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"next","","",22,null],[11,"size_hint","","",22,null],[11,"clone","","",23,null],[11,"new","","Create a new `Combinations` from a clonable iterator.",23,{"inputs":[{"name":"i"}],"output":{"name":"combinations"}}],[11,"next","","",23,null],[11,"size_hint","","",23,null],[11,"new","","Create a new `CombinationsN` from a clonable iterator.",24,{"inputs":[{"name":"i"},{"name":"usize"}],"output":{"name":"combinationsn"}}],[11,"next","","",24,null],[11,"clone","","",25,null],[11,"new","","Create a new `UniqueBy` iterator.",25,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"uniqueby"}}],[11,"next","","",25,null],[11,"size_hint","","",25,null],[11,"next","","",26,null],[11,"size_hint","","",26,null],[11,"clone","","",26,null],[11,"new","","Create a new `Flatten` iterator.",27,{"inputs":[{"name":"i"}],"output":{"name":"flatten"}}],[11,"next","","",27,null],[11,"next_back","","",27,null],[11,"clone","","",27,null],[0,"free","","Free functions that create iterator adaptors or call iterator methods.",null,null],[5,"enumerate","itertools::free","Iterate `iterable` with a running index.",null,{"inputs":[{"name":"i"}],"output":{"name":"enumerate"}}],[5,"rev","","Iterate `iterable` in reverse.",null,{"inputs":[{"name":"i"}],"output":{"name":"rev"}}],[5,"zip","","Iterate `i` and `j` in lock step.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"zip"}}],[5,"zip_eq","","Iterate `i` and `j` in lock step.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"zipeq"}}],[5,"chain","","Create an iterator that first iterates `i` and then `j`.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"chain"}}],[5,"cloned","","Create an iterator that clones each element from &amp;T to T",null,{"inputs":[{"name":"i"}],"output":{"name":"cloned"}}],[5,"fold","","Perform a fold operation over the iterable.",null,{"inputs":[{"name":"i"},{"name":"b"},{"name":"f"}],"output":{"name":"b"}}],[5,"all","","Test whether the predicate holds for all elements in the iterable.",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"bool"}}],[5,"any","","Test whether the predicate holds for any elements in the iterable.",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"bool"}}],[5,"max","","Return the maximum value of the iterable.",null,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[5,"min","","Return the minimum value of the iterable.",null,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[5,"interleave","","Create an iterator that interleaves elements in `i` and `j`.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"interleave"}}],[5,"merge","","Create an iterator that merges elements in `i` and `j`.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"merge"}}],[5,"kmerge","","Create an iterator that merges elements of the contained iterators.",null,{"inputs":[{"name":"i"}],"output":{"name":"kmerge"}}],[5,"join","","Combine all iterator elements into one String, seperated by `sep`.",null,{"inputs":[{"name":"i"},{"name":"str"}],"output":{"name":"string"}}],[5,"sorted","","Collect all the iterable&#39;s elements into a sorted vector in ascending order.",null,{"inputs":[{"name":"i"}],"output":{"name":"vec"}}],[5,"rciter","","Return an iterator inside a `Rc&lt;RefCell&lt;_&gt;&gt;` wrapper.",null,{"inputs":[{"name":"i"}],"output":{"name":"rciter"}}],[11,"clone","itertools","",28,null],[11,"fmt","","",29,null],[11,"fmt","","",28,null],[11,"fmt","","",28,null],[11,"fmt","","",28,null],[11,"fmt","","",28,null],[11,"fmt","","",28,null],[11,"fmt","","",28,null],[11,"fmt","","",28,null],[11,"fmt","","",28,null],[11,"fmt","","",28,null],[11,"next","","",30,null],[11,"drop","","",31,null],[11,"next","","",31,null],[11,"next","","",32,null],[11,"drop","","",33,null],[11,"next","","",33,null],[11,"clone","","",34,null],[11,"new","","Create a new Intersperse iterator",34,{"inputs":[{"name":"i"},{"name":"item"}],"output":{"name":"self"}}],[11,"next","","",34,null],[11,"size_hint","","",34,null],[11,"clone","","",35,null],[11,"new","","Create a new **ISlice**.",35,{"inputs":[{"name":"i"},{"name":"r"}],"output":{"name":"self"}}],[11,"next","","",35,null],[11,"size_hint","","",35,null],[11,"clone","","",36,null],[11,"next","","",36,null],[11,"size_hint","","",36,null],[11,"clone","","",37,null],[11,"fmt","","",37,null],[11,"next","","",37,null],[11,"size_hint","","",37,null],[11,"next_back","","",37,null],[11,"eq","","",3,null],[11,"ne","","",3,null],[11,"fmt","","",3,null],[11,"into_option","","`into_option` creates an `Option` of type `(T, T)`. The returned `Option`\nhas variant `None` if and only if the `MinMaxResult` has variant\n`NoElements`. Otherwise variant `Some(x, y)` is returned where `x &lt;= y`.\nIf `MinMaxResult` has variant `OneElement(x)`, performing this operation\nwill make one clone of `x`.",3,null],[0,"misc","","A module of helper traits and iterators that are not intended to be used\ndirectly.",null,null],[3,"FlatTuples","itertools::misc","A helper iterator that maps an iterator of tuples like\n`((A, B), C)` to an iterator of `(A, B, C)`.",null,null],[8,"IntoIteratorTuple","","Apply `IntoIterator` on each element of a tuple.",null,null],[16,"Output","","Tuple of values that implement `Iterator`.",38,null],[10,"into_iterator_tuple","","Return a tuple of iterators.",38,null],[8,"AppendTuple","","A helper trait for (x, y, z) ++ w =&gt; (x, y, z, w),\nused for implementing `iproduct!`.",null,null],[16,"Result","","Resulting tuple type",39,null],[10,"append","","“Append” value `x` to a tuple.",39,null],[8,"GenericRange","","`GenericRange` is implemented by Rust&#39;s built-in range types, produced\nby range syntax like `a..`, `..b` or `c..d`.",null,null],[8,"ToFloat","","Helper trait to convert usize to floating point type.",null,null],[8,"MendSlice","","A trait for items that can *maybe* be joined together.",null,null],[8,"Slice","","A helper trait to let `ZipSlices` accept both `&amp;[T]` and `&amp;mut [T]`.",null,null],[16,"Item","","The type of a reference to the slice&#39;s elements",40,null],[11,"clone","","",41,null],[11,"next","","",41,null],[11,"size_hint","","",41,null],[11,"next_back","","",41,null],[11,"clone","itertools","",42,null],[11,"new","","Create a new **PadUsing** iterator.",42,{"inputs":[{"name":"i"},{"name":"usize"},{"name":"f"}],"output":{"name":"padusing"}}],[11,"next","","",42,null],[11,"size_hint","","",42,null],[11,"next_back","","",42,null],[11,"new","","Create a new RcIter.",0,{"inputs":[{"name":"i"}],"output":{"name":"rciter"}}],[11,"clone","","",0,null],[11,"next","","",0,null],[11,"size_hint","","",0,null],[11,"next_back","","",0,null],[11,"new","","Create a new **RepeatN** with **n** repetitions.",43,{"inputs":[{"name":"a"},{"name":"usize"}],"output":{"name":"self"}}],[11,"next","","",43,null],[11,"size_hint","","",43,null],[11,"next_back","","",43,null],[11,"new","","Create a new `RepeatCall` from a closure.",44,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"next","","",44,null],[11,"size_hint","","",44,null],[11,"next_back","","",44,null],[11,"clone","","",1,null],[11,"new","","Creates a new iterator with the specified closure as the &quot;iterator\nfunction&quot; and an initial state to eventually pass to the closure",1,{"inputs":[{"name":"st"},{"name":"f"}],"output":{"name":"unfold"}}],[11,"next","","",1,null],[11,"size_hint","","",1,null],[0,"size_hint","","Arithmetic on **Iterator** *.size_hint()* values.",null,null],[5,"add","itertools::size_hint","Add **SizeHint** correctly.",null,{"inputs":[{"name":"sizehint"},{"name":"sizehint"}],"output":{"name":"sizehint"}}],[5,"add_scalar","","Add **x** correctly to a **SizeHint**.",null,{"inputs":[{"name":"sizehint"},{"name":"usize"}],"output":{"name":"sizehint"}}],[5,"sub_scalar","","Sbb **x** correctly to a **SizeHint**.",null,{"inputs":[{"name":"sizehint"},{"name":"usize"}],"output":{"name":"sizehint"}}],[5,"mul_scalar","","Multiply **x** correctly with a **SizeHint**.",null,{"inputs":[{"name":"sizehint"},{"name":"usize"}],"output":{"name":"sizehint"}}],[5,"mul","","Multiply **SizeHint** correctly",null,{"inputs":[{"name":"sizehint"},{"name":"sizehint"}],"output":{"name":"sizehint"}}],[5,"max","","Return the maximum",null,{"inputs":[{"name":"sizehint"},{"name":"sizehint"}],"output":{"name":"sizehint"}}],[5,"min","","Return the minimum",null,{"inputs":[{"name":"sizehint"},{"name":"sizehint"}],"output":{"name":"sizehint"}}],[6,"SizeHint","","**SizeHint** is the return type of **Iterator::size_hint()**.",null,null],[11,"from_ptr_len","itertools","Create a Stride iterator from a raw pointer.",45,null],[11,"from_ptr_len","","Create a StrideMut iterator from a raw pointer.",46,null],[11,"from_slice","","Create Stride iterator from a slice and the element step count.",45,null],[11,"from_stride","","Create Stride iterator from an existing Stride iterator",45,{"inputs":[{"name":"stride"},{"name":"isize"}],"output":{"name":"stride"}}],[11,"swap_ends","","Swap the begin and end and reverse the stride,\nin effect reversing the iterator.",45,null],[11,"len","","Return the number of elements in the iterator.",45,null],[11,"get","","Return a reference to the element of a stride at the\ngiven index, or None if the index is out of bounds.",45,null],[11,"next","","",45,null],[11,"size_hint","","",45,null],[11,"next_back","","",45,null],[11,"index","","Return a reference to the element at a given index.",45,null],[11,"fmt","","",45,null],[11,"len","","",45,null],[11,"get_unchecked","","",45,null],[11,"from_slice","","Create Stride iterator from a slice and the element step count.",46,null],[11,"from_stride","","Create Stride iterator from an existing Stride iterator",46,{"inputs":[{"name":"stridemut"},{"name":"isize"}],"output":{"name":"stridemut"}}],[11,"swap_ends","","Swap the begin and end and reverse the stride,\nin effect reversing the iterator.",46,null],[11,"len","","Return the number of elements in the iterator.",46,null],[11,"get","","Return a reference to the element of a stride at the\ngiven index, or None if the index is out of bounds.",46,null],[11,"next","","",46,null],[11,"size_hint","","",46,null],[11,"next_back","","",46,null],[11,"index","","Return a reference to the element at a given index.",46,null],[11,"fmt","","",46,null],[11,"len","","",46,null],[11,"get_unchecked","","",46,null],[11,"clone","","",45,null],[11,"get_mut","","Return a mutable reference to the element of a stride at the\ngiven index, or None if the index is out of bounds.",46,null],[11,"index_mut","","Return a mutable reference to the element at a given index.",46,null],[11,"next","","",47,null],[11,"size_hint","","",47,null],[11,"clone","","",48,null],[11,"next","","",48,null],[11,"size_hint","","",48,null],[11,"clone","","",49,null],[11,"new","","Create a new `ZipLongest` iterator.",49,{"inputs":[{"name":"t"},{"name":"u"}],"output":{"name":"ziplongest"}}],[11,"next","","",49,null],[11,"size_hint","","",49,null],[11,"next_back","","",49,null],[11,"clone","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"fmt","","",4,null],[11,"clone","","",50,null],[11,"new","","Create a new `Zip` from a tuple of iterators.",50,{"inputs":[{"name":"t"}],"output":{"name":"zip"}}],[11,"next","","",50,null],[11,"size_hint","","",50,null],[11,"next","","",50,null],[11,"size_hint","","",50,null],[11,"next","","",50,null],[11,"size_hint","","",50,null],[11,"next","","",50,null],[11,"size_hint","","",50,null],[11,"next","","",50,null],[11,"size_hint","","",50,null],[11,"next","","",50,null],[11,"size_hint","","",50,null],[11,"next","","",50,null],[11,"size_hint","","",50,null],[11,"next","","",50,null],[11,"size_hint","","",50,null],[11,"next","","",50,null],[11,"size_hint","","",50,null],[11,"clone","","",51,null],[11,"new","","Create a new `ZipSlices` from slices `a` and `b`.",51,null],[11,"from_slices","","Create a new `ZipSlices` from slices `a` and `b`.",51,{"inputs":[{"name":"t"},{"name":"u"}],"output":{"name":"self"}}],[11,"next","","",51,null],[11,"size_hint","","",51,null],[11,"next_back","","",51,null],[11,"len","","",51,null],[11,"get_unchecked","","",51,null],[6,"MapFn","","The function pointer map iterator created with `.map_fn()`.",null,null],[8,"Itertools","","The trait `Itertools`: extra iterator adaptors and methods for iterators.",null,null],[11,"interleave","","Alternate elements from two iterators until both\nrun out.",52,null],[11,"interleave_shortest","","Alternate elements from two iterators until one of them runs out.",52,null],[11,"intersperse","","An iterator adaptor to insert a particular value\nbetween each element of the adapted iterator.",52,null],[11,"zip_longest","","Create an iterator which iterates over both this and the specified\niterator simultaneously, yielding pairs of two optional elements.",52,null],[11,"zip_eq","","Create an iterator which iterates over both this and the specified\niterator simultaneously, yielding pairs of elements.",52,null],[11,"batching","","A “meta iterator adaptor”. Its closure recives a reference to the iterator\nand may pick off as many elements as it likes, to produce the next iterator element.",52,null],[11,"group_by","","Group iterator elements. Consecutive elements that map to the same key (“runs”),\nare returned as the iterator elements of `GroupBy`.",52,null],[11,"group_by_lazy","","Return an iterable that can group iterator elements.\nConsecutive elements that map to the same key (“runs”), are assigned\nto the same group.",52,null],[11,"chunks_lazy","","Return an iterable that can chunk the iterator.",52,null],[11,"tee","","Split into an iterator pair that both yield all elements from\nthe original iterator.",52,null],[11,"slice","","Return a sliced iterator.",52,null],[11,"into_rc","","**Deprecated:** use `itertools::free::rciter` instead.\n(It&#39;s an iterator constructor, not an adaptor).",52,null],[11,"step","","Return an iterator adaptor that steps `n` elements in the base iterator\nfor each iteration.",52,null],[11,"merge","","Return an iterator adaptor that merges the two base iterators in ascending order.\nIf both base iterators are sorted (ascending), the result is sorted.",52,null],[11,"merge_by","","Return an iterator adaptor that merges the two base iterators in order.\nThis is much like `.merge()` but allows for a custom ordering.",52,null],[11,"kmerge","","Return an iterator adaptor that flattens an iterator of iterators by\nmerging them in ascending order.",52,null],[11,"cartesian_product","","Return an iterator adaptor that iterates over the cartesian product of\nthe element sets of two iterators `self` and `J`.",52,null],[11,"multipeek","","Return an iterator adapter that allows peeking multiple values.",52,null],[11,"coalesce","","Return an iterator adaptor that uses the passed-in closure to\noptionally merge together consecutive elements.",52,null],[11,"dedup","","Remove duplicates from sections of consecutive identical elements.\nIf the iterator is sorted, all elements will be unique.",52,null],[11,"unique","","Return an iterator adaptor that filters out elements that have\nalready been produced once during the iteration. Duplicates\nare detected using hash and equality.",52,null],[11,"unique_by","","Return an iterator adaptor that filters out elements that have\nalready been produced once during the iteration.",52,null],[11,"mend_slices","","Return an iterator adaptor that joins together adjacent slices if possible.",52,null],[11,"take_while_ref","","Return an iterator adaptor that borrows from a `Clone`-able iterator\nto only pick off elements while the predicate `f` returns `true`.",52,null],[11,"while_some","","Return an iterator adaptor that filters `Option&lt;A&gt;` iterator elements\nand produces `A`. Stops on the first `None` encountered.",52,null],[11,"combinations","","Return an iterator adaptor that iterates over the combinations of\nthe elements from an iterator.",52,null],[11,"combinations_n","","Return an iterator adaptor that iterates over the `n`-length combinations of\nthe elements from an iterator.",52,null],[11,"pad_using","","Return an iterator adaptor that pads the sequence to a minimum length of\n`min` by filling missing elements using a closure `f`.",52,null],[11,"flatten","","Unravel a nested iterator.",52,null],[11,"map_fn","","**Deprecated:** Will be removed in the next version",52,null],[11,"find_position","","Find the position and value of the first element satisfying a predicate.",52,null],[11,"dropn","","Consume the first `n` elements of the iterator eagerly.",52,null],[11,"dropping","","Consume the first `n` elements from the iterator eagerly,\nand return the same iterator again.",52,null],[11,"dropping_back","","Consume the last `n` elements from the iterator eagerly,\nand return the same iterator again.",52,null],[11,"foreach","","Run the closure `f` eagerly on each element of the iterator.",52,null],[11,"collect_vec","","`.collect_vec()` is simply a type specialization of `.collect()`,\nfor convenience.",52,null],[11,"set_from","","Assign to each reference in `self` from the `from` iterator,\nstopping at the shortest of the two iterators.",52,null],[11,"join","","Combine all iterator elements into one String, seperated by `sep`.",52,null],[11,"format_default","","Format all iterator elements, separated by `sep`.",52,null],[11,"format","","Format all iterator elements, separated by `sep`.",52,null],[11,"fold_results","","Fold `Result` values from an iterator.",52,null],[11,"fold_options","","Fold `Option` values from an iterator.",52,null],[11,"fold1","","Accumulator of the elements in the iterator.",52,null],[11,"fold_while","","An iterator adaptor that applies a function, producing a single, final value.",52,null],[11,"is_empty_hint","","Tell if the iterator is empty or not according to its size hint.\nReturn `None` if the size hint does not tell, or return a `Some`\nvalue with the emptiness if it&#39;s possible to tell.",52,null],[11,"sorted","","Collect all iterator elements into a sorted vector in ascending order.",52,null],[11,"sorted_by","","Collect all iterator elements into a sorted vector.",52,null],[11,"sort_by","","**Deprecated:** renamed to `.sorted_by()`",52,null],[11,"partition_map","","Collect all iterator elements into one of two\npartitions. Unlike `Iterator::partition`, each partition may\nhave a distinct type.",52,null],[11,"minmax","","Return the minimum and maximum elements in the iterator.",52,null],[11,"minmax_by_key","","Return the minimum and maximum element of an iterator, as determined by\nthe specified function.",52,null],[11,"minmax_by","","Return the minimum and maximum element of an iterator, as determined by\nthe specified comparison function.",52,null],[14,"iproduct","","Create an iterator over the “cartesian product” of iterators.",null,null],[14,"izip","","Create an iterator running multiple iterators in lockstep.",null,null]],"paths":[[3,"RcIter"],[3,"Unfold"],[4,"Diff"],[4,"MinMaxResult"],[4,"EitherOrBoth"],[4,"Partition"],[4,"FoldWhile"],[3,"Interleave"],[3,"InterleaveShortest"],[3,"PutBack"],[3,"PutBackN"],[3,"Product"],[3,"Batching"],[3,"GroupBy"],[3,"Step"],[3,"Merge"],[3,"MergeBy"],[3,"MultiPeek"],[3,"Coalesce"],[3,"Dedup"],[3,"MendSlices"],[3,"TakeWhileRef"],[3,"WhileSome"],[3,"Combinations"],[3,"CombinationsN"],[3,"UniqueBy"],[3,"Unique"],[3,"Flatten"],[3,"FormatDefault"],[3,"Format"],[3,"Groups"],[3,"Group"],[3,"Chunks"],[3,"Chunk"],[3,"Intersperse"],[3,"ISlice"],[3,"KMerge"],[3,"Linspace"],[8,"IntoIteratorTuple"],[8,"AppendTuple"],[8,"Slice"],[3,"FlatTuples"],[3,"PadUsing"],[3,"RepeatN"],[3,"RepeatCall"],[3,"Stride"],[3,"StrideMut"],[3,"Tee"],[3,"ZipEq"],[3,"ZipLongest"],[3,"Zip"],[3,"ZipSlices"],[8,"Itertools"]]};
searchIndex["dbghelp"] = {"doc":"","items":[],"paths":[]};
searchIndex["regex_syntax"] = {"doc":"This crate provides a regular expression parser and an abstract syntax for\nregular expressions. The abstract syntax is defined by the `Expr` type. The\nconcrete syntax is enumerated in the\n[`regex`](../regex/index.html#syntax)\ncrate documentation.","items":[[3,"Literals","regex_syntax","A set of literal byte strings extracted from a regular expression.",null,null],[3,"Lit","","A single member of a set of literals extracted from a regular expression.",null,null],[3,"CharClass","","A character class.",null,null],[3,"ClassRange","","A single inclusive range in a character class.",null,null],[12,"start","","The start character of the range.",0,null],[12,"end","","The end character of the range.",0,null],[3,"ByteClass","","A byte class for byte ranges only.",null,null],[3,"ByteRange","","A single inclusive range in a byte class.",null,null],[12,"start","","The start byte of the range.",1,null],[12,"end","","The end byte of the range.",1,null],[3,"ExprBuilder","","A builder for configuring regular expression parsing.",null,null],[3,"Error","","A parse error.",null,null],[4,"Expr","","A regular expression abstract syntax tree.",null,null],[13,"Empty","","An empty regex (which never matches any text).",2,null],[13,"Literal","","A sequence of one or more literal characters to be matched.",2,null],[12,"chars","regex_syntax::Expr","The characters.",2,null],[12,"casei","","Whether to match case insensitively.",2,null],[13,"LiteralBytes","regex_syntax","A sequence of one or more literal bytes to be matched.",2,null],[12,"bytes","regex_syntax::Expr","The bytes.",2,null],[12,"casei","","Whether to match case insensitively.",2,null],[13,"AnyChar","regex_syntax","Match any character.",2,null],[13,"AnyCharNoNL","","Match any character, excluding new line (`0xA`).",2,null],[13,"AnyByte","","Match any byte.",2,null],[13,"AnyByteNoNL","","Match any byte, excluding new line (`0xA`).",2,null],[13,"Class","","A character class.",2,null],[13,"ClassBytes","","A character class with byte ranges only.",2,null],[13,"StartLine","","Match the start of a line or beginning of input.",2,null],[13,"EndLine","","Match the end of a line or end of input.",2,null],[13,"StartText","","Match the beginning of input.",2,null],[13,"EndText","","Match the end of input.",2,null],[13,"WordBoundary","","Match a word boundary (word character on one side and a non-word\ncharacter on the other).",2,null],[13,"NotWordBoundary","","Match a position that is not a word boundary (word or non-word\ncharacters on both sides).",2,null],[13,"WordBoundaryAscii","","Match an ASCII word boundary.",2,null],[13,"NotWordBoundaryAscii","","Match a position that is not an ASCII word boundary.",2,null],[13,"Group","","A group, possibly non-capturing.",2,null],[12,"e","regex_syntax::Expr","The expression inside the group.",2,null],[12,"i","","The capture index (starting at `1`) only for capturing groups.",2,null],[12,"name","","The capture name, only for capturing named groups.",2,null],[13,"Repeat","regex_syntax","A repeat operator (`?`, `*`, `+` or `{m,n}`).",2,null],[12,"e","regex_syntax::Expr","The expression to be repeated. Limited to literals, `.`, classes\nor grouped expressions.",2,null],[12,"r","","The type of repeat operator used.",2,null],[12,"greedy","","Whether the repeat is greedy (match the most) or not (match the\nleast).",2,null],[13,"Concat","regex_syntax","A concatenation of expressions. Must be matched one after the other.",2,null],[13,"Alternate","","An alternation of expressions. Only one must match.",2,null],[4,"Repeater","","The type of a repeat operator expression.",null,null],[13,"ZeroOrOne","","Match zero or one (`?`).",3,null],[13,"ZeroOrMore","","Match zero or more (`*`).",3,null],[13,"OneOrMore","","Match one or more (`+`).",3,null],[13,"Range","","Match for at least `min` and at most `max` (`{m,n}`).",3,null],[12,"min","regex_syntax::Repeater","Lower bound on the number of matches.",3,null],[12,"max","","Optional upper bound on the number of matches.",3,null],[4,"ErrorKind","regex_syntax","The specific type of parse error that can occur.",null,null],[13,"DoubleFlagNegation","","A negation symbol is used twice in flag settings.\ne.g., `(?-i-s)`.",4,null],[13,"DuplicateCaptureName","","The same capture name was used more than once.\ne.g., `(?P&lt;a&gt;.)(?P&lt;a&gt;.)`.",4,null],[13,"EmptyAlternate","","An alternate is empty. e.g., `(|a)`.",4,null],[13,"EmptyCaptureName","","A capture group name is empty. e.g., `(?P&lt;&gt;a)`.",4,null],[13,"EmptyFlagNegation","","A negation symbol was not proceded by any flags. e.g., `(?i-)`.",4,null],[13,"EmptyGroup","","A group is empty. e.g., `()`.",4,null],[13,"InvalidBase10","","An invalid number was used in a counted repetition. e.g., `a{b}`.",4,null],[13,"InvalidBase16","","An invalid hexadecimal number was used in an escape sequence.\ne.g., `\\xAG`.",4,null],[13,"InvalidCaptureName","","An invalid capture name was used. e.g., `(?P&lt;0a&gt;b)`.",4,null],[13,"InvalidClassRange","","An invalid class range was givien. Specifically, when the start of the\nrange is greater than the end. e.g., `[z-a]`.",4,null],[12,"start","regex_syntax::ErrorKind","The first character specified in the range.",4,null],[12,"end","","The second character specified in the range.",4,null],[13,"InvalidClassEscape","regex_syntax","An escape sequence was used in a character class where it is not\nallowed. e.g., `[a-\\pN]` or `[\\A]`.",4,null],[13,"InvalidRepeatRange","","An invalid counted repetition min/max was given. e.g., `a{2,1}`.",4,null],[12,"min","regex_syntax::ErrorKind","The first number specified in the repetition.",4,null],[12,"max","","The second number specified in the repetition.",4,null],[13,"InvalidScalarValue","regex_syntax","An invalid Unicode scalar value was used in a long hexadecimal\nsequence. e.g., `\\x{D800}`.",4,null],[13,"MissingBase10","","An empty counted repetition operator. e.g., `a{}`.",4,null],[13,"RepeaterExpectsExpr","","A repetition operator was not applied to an expression. e.g., `*`.",4,null],[13,"RepeaterUnexpectedExpr","","A repetition operator was applied to an expression that cannot be\nrepeated. e.g., `a+*` or `a|*`.",4,null],[13,"UnclosedCaptureName","","A capture group name that is never closed. e.g., `(?P&lt;a`.",4,null],[13,"UnclosedHex","","An unclosed hexadecimal literal. e.g., `\\x{a`.",4,null],[13,"UnclosedParen","","An unclosed parenthesis. e.g., `(a`.",4,null],[13,"UnclosedRepeat","","An unclosed counted repetition operator. e.g., `a{2`.",4,null],[13,"UnclosedUnicodeName","","An unclosed named Unicode class. e.g., `\\p{Yi`.",4,null],[13,"UnexpectedClassEof","","Saw end of regex before class was closed. e.g., `[a`.",4,null],[13,"UnexpectedEscapeEof","","Saw end of regex before escape sequence was closed. e.g., `\\`.",4,null],[13,"UnexpectedFlagEof","","Saw end of regex before flags were closed. e.g., `(?i`.",4,null],[13,"UnexpectedTwoDigitHexEof","","Saw end of regex before two hexadecimal digits were seen. e.g., `\\xA`.",4,null],[13,"UnopenedParen","","Unopened parenthesis. e.g., `)`.",4,null],[13,"UnrecognizedEscape","","Unrecognized escape sequence. e.g., `\\q`.",4,null],[13,"UnrecognizedFlag","","Unrecognized flag. e.g., `(?a)`.",4,null],[13,"UnrecognizedUnicodeClass","","Unrecognized named Unicode class. e.g., `\\p{Foo}`.",4,null],[13,"StackExhausted","","Indicates that the regex uses too much nesting.",4,null],[13,"FlagNotAllowed","","A disallowed flag was found (e.g., `u`).",4,null],[13,"UnicodeNotAllowed","","A Unicode class was used when the Unicode (`u`) flag was disabled.",4,null],[13,"InvalidUtf8","","InvalidUtf8 indicates that the expression may match non-UTF-8 bytes.\nThis never returned if the parser is permitted to allow expressions\nthat match arbitrary bytes.",4,null],[13,"EmptyClass","","A character class was constructed such that it is empty.\ne.g., `[^\\d\\D]`.",4,null],[5,"quote","","Escapes all regular expression meta characters in `text`.",null,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"clone","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"clone","","",6,null],[11,"cmp","","",6,null],[11,"empty","","Returns a new empty set of literals using default limits.",5,{"inputs":[],"output":{"name":"literals"}}],[11,"limit_size","","Get the approximate size limit (in bytes) of this set.",5,null],[11,"set_limit_size","","Set the approximate size limit (in bytes) of this set.",5,null],[11,"limit_class","","Get the character class size limit for this set.",5,null],[11,"set_limit_class","","Limits the size of character(or byte) classes considered.",5,null],[11,"literals","","Returns the set of literals as a slice. Its order is unspecified.",5,null],[11,"all_complete","","Returns true if all members in this set are complete.",5,null],[11,"any_complete","","Returns true if any member in this set is complete.",5,null],[11,"contains_empty","","Returns true if this set contains an empty literal.",5,null],[11,"is_empty","","Returns true if this set is empty or if all of its members is empty.",5,null],[11,"to_empty","","Returns a new empty set of literals using this set&#39;s limits.",5,null],[11,"longest_common_prefix","","Returns the longest common prefix of all members in this set.",5,null],[11,"longest_common_suffix","","Returns the longest common suffix of all members in this set.",5,null],[11,"unambiguous_prefixes","","Returns a new set of prefixes of this set of literals that are\nguaranteed to be unambiguous.",5,null],[11,"unambiguous_suffixes","","Returns a new set of suffixes of this set of literals that are\nguaranteed to be unambiguous.",5,null],[11,"union_prefixes","","Unions the prefixes from the given expression to this set.",5,null],[11,"union_suffixes","","Unions the suffixes from the given expression to this set.",5,null],[11,"union","","Unions this set with another set.",5,null],[11,"cross_product","","Extends this set with another set.",5,null],[11,"cross_add","","Extends each literal in this set with the bytes given.",5,null],[11,"add","","Adds the given literal to this set.",5,null],[11,"add_char_class","","Extends each literal in this set with the character class given.",5,null],[11,"add_byte_class","","Extends each literal in this set with the byte class given.",5,null],[11,"cut","","Cuts every member of this set. When a member is cut, it can never\nbe extended.",5,null],[11,"reverse","","Reverses all members in place.",5,null],[11,"clear","","Clears this set of all members.",5,null],[11,"fmt","","",5,null],[11,"new","","Returns a new complete literal with the bytes given.",6,{"inputs":[{"name":"vec"}],"output":{"name":"lit"}}],[11,"empty","","Returns a new complete empty literal.",6,{"inputs":[],"output":{"name":"lit"}}],[11,"is_cut","","Returns true if this literal was &quot;cut.&quot;",6,null],[11,"cut","","Cuts this literal.",6,null],[11,"eq","","",6,null],[11,"partial_cmp","","",6,null],[11,"fmt","","",6,null],[11,"as_ref","","",6,null],[11,"deref","","",6,null],[11,"deref_mut","","",6,null],[6,"Result","","An alias for computations that can return a `Error`.",null,null],[11,"clone","","",2,null],[11,"fmt","","",2,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"clone","","",3,null],[11,"fmt","","",3,null],[11,"eq","","",3,null],[11,"ne","","",3,null],[11,"clone","","",7,null],[11,"fmt","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"clone","","",0,null],[11,"fmt","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"partial_cmp","","",0,null],[11,"lt","","",0,null],[11,"le","","",0,null],[11,"gt","","",0,null],[11,"ge","","",0,null],[11,"cmp","","",0,null],[11,"clone","","",8,null],[11,"fmt","","",8,null],[11,"eq","","",8,null],[11,"ne","","",8,null],[11,"clone","","",1,null],[11,"fmt","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"partial_cmp","","",1,null],[11,"lt","","",1,null],[11,"le","","",1,null],[11,"gt","","",1,null],[11,"ge","","",1,null],[11,"cmp","","",1,null],[11,"clone","","",9,null],[11,"fmt","","",9,null],[11,"new","","Create a new builder for configuring expression parsing.",9,{"inputs":[],"output":{"name":"exprbuilder"}}],[11,"case_insensitive","","Set the default value for the case insensitive (`i`) flag.",9,null],[11,"multi_line","","Set the default value for the multi-line matching (`m`) flag.",9,null],[11,"dot_matches_new_line","","Set the default value for the any character (`s`) flag.",9,null],[11,"swap_greed","","Set the default value for the greedy swap (`U`) flag.",9,null],[11,"ignore_whitespace","","Set the default value for the ignore whitespace (`x`) flag.",9,null],[11,"unicode","","Set the default value for the Unicode (`u`) flag.",9,null],[11,"allow_bytes","","Whether the parser allows matching arbitrary bytes or not.",9,null],[11,"nest_limit","","Set the nesting limit for regular expression parsing.",9,null],[11,"parse","","Parse a string as a regular expression using the current configuraiton.",9,null],[11,"parse","","Parses a string in a regular expression syntax tree.",2,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"prefixes","","Returns a set of literal prefixes extracted from this expression.",2,null],[11,"suffixes","","Returns a set of literal suffixes extracted from this expression.",2,null],[11,"is_anchored_start","","Returns true if and only if the expression is required to match from\nthe beginning of text.",2,null],[11,"has_anchored_start","","Returns true if and only if the expression has at least one matchable\nsub-expression that must match the beginning of text.",2,null],[11,"is_anchored_end","","Returns true if and only if the expression is required to match at the\nend of the text.",2,null],[11,"has_anchored_end","","Returns true if and only if the expression has at least one matchable\nsub-expression that must match the beginning of text.",2,null],[11,"has_bytes","","Returns true if and only if the expression contains sub-expressions\nthat can match arbitrary bytes.",2,null],[11,"deref","","",7,null],[11,"into_iter","","",7,null],[11,"new","","Create a new class from an existing set of ranges.",7,{"inputs":[{"name":"vec"}],"output":{"name":"charclass"}}],[11,"matches","","Returns true if `c` is matched by this character class.",7,null],[11,"remove","","Removes the given character from the class if it exists.",7,null],[11,"negate","","Negates the character class.",7,null],[11,"case_fold","","Apply case folding to this character class.",7,null],[11,"eq","","",0,null],[11,"partial_cmp","","",0,null],[11,"new","","Create a new class from an existing set of ranges.",8,{"inputs":[{"name":"vec"}],"output":{"name":"byteclass"}}],[11,"matches","","Returns true if `b` is matched by this byte class.",8,null],[11,"remove","","Removes the given byte from the class if it exists.",8,null],[11,"negate","","Negates the byte class.",8,null],[11,"case_fold","","Apply case folding to this byte class.",8,null],[11,"deref","","",8,null],[11,"into_iter","","",8,null],[11,"eq","","",1,null],[11,"partial_cmp","","",1,null],[11,"fmt","","",2,null],[11,"fmt","","",3,null],[11,"fmt","","",7,null],[11,"fmt","","",0,null],[11,"fmt","","",8,null],[11,"fmt","","",1,null],[11,"clone","","",10,null],[11,"fmt","","",10,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"clone","","",4,null],[11,"fmt","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"position","","Returns an approximate *character* offset at which the error occurred.",10,null],[11,"kind","","Returns the type of the regex parse error.",10,null],[11,"description","","",10,null],[11,"fmt","","",10,null],[11,"fmt","","",4,null]],"paths":[[3,"ClassRange"],[3,"ByteRange"],[4,"Expr"],[4,"Repeater"],[4,"ErrorKind"],[3,"Literals"],[3,"Lit"],[3,"CharClass"],[3,"ByteClass"],[3,"ExprBuilder"],[3,"Error"]]};
searchIndex["bit_set"] = {"doc":"An implementation of a set using a bit vector as an underlying\nrepresentation for holding unsigned numerical elements.","items":[[3,"BitSet","bit_set","",null,null],[3,"Iter","","An iterator for `BitSet`.",null,null],[3,"Union","","",null,null],[3,"Intersection","","",null,null],[3,"Difference","","",null,null],[3,"SymmetricDifference","","",null,null],[11,"clone","","",0,null],[11,"clone_from","","",0,null],[11,"default","","",0,{"inputs":[],"output":{"name":"self"}}],[11,"from_iter","","",0,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"extend","","",0,null],[11,"partial_cmp","","",0,null],[11,"cmp","","",0,null],[11,"eq","","",0,null],[11,"new","","Creates a new empty `BitSet`.",0,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Creates a new `BitSet` with initially no contents, able to\nhold `nbits` elements without resizing.",0,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from_bit_vec","","Creates a new `BitSet` from the given bit vector.",0,{"inputs":[{"name":"bitvec"}],"output":{"name":"self"}}],[11,"from_bytes","","",0,null],[11,"capacity","","Returns the capacity in bits for this bit vector. Inserting any\nelement less than this amount will not trigger a resizing.",0,null],[11,"reserve_len","","Reserves capacity for the given `BitSet` to contain `len` distinct elements. In the case\nof `BitSet` this means reallocations will not occur as long as all inserted elements\nare less than `len`.",0,null],[11,"reserve_len_exact","","Reserves the minimum capacity for the given `BitSet` to contain `len` distinct elements.\nIn the case of `BitSet` this means reallocations will not occur as long as all inserted\nelements are less than `len`.",0,null],[11,"into_bit_vec","","Consumes this set to return the underlying bit vector.",0,null],[11,"get_ref","","Returns a reference to the underlying bit vector.",0,null],[11,"shrink_to_fit","","Truncates the underlying vector to the least length required.",0,null],[11,"iter","","Iterator over each usize stored in the `BitSet`.",0,null],[11,"union","","Iterator over each usize stored in `self` union `other`.\nSee [union_with](#method.union_with) for an efficient in-place version.",0,null],[11,"intersection","","Iterator over each usize stored in `self` intersect `other`.\nSee [intersect_with](#method.intersect_with) for an efficient in-place version.",0,null],[11,"difference","","Iterator over each usize stored in the `self` setminus `other`.\nSee [difference_with](#method.difference_with) for an efficient in-place version.",0,null],[11,"symmetric_difference","","Iterator over each usize stored in the symmetric difference of `self` and `other`.\nSee [symmetric_difference_with](#method.symmetric_difference_with) for\nan efficient in-place version.",0,null],[11,"union_with","","Unions in-place with the specified other bit vector.",0,null],[11,"intersect_with","","Intersects in-place with the specified other bit vector.",0,null],[11,"difference_with","","Makes this bit vector the difference with the specified other bit vector\nin-place.",0,null],[11,"symmetric_difference_with","","Makes this bit vector the symmetric difference with the specified other\nbit vector in-place.",0,null],[11,"len","","Returns the number of set bits in this set.",0,null],[11,"is_empty","","Returns whether there are no bits set in this set",0,null],[11,"clear","","Clears all bits in this set",0,null],[11,"contains","","Returns `true` if this set contains the specified integer.",0,null],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",0,null],[11,"is_subset","","Returns `true` if the set is a subset of another.",0,null],[11,"is_superset","","Returns `true` if the set is a superset of another.",0,null],[11,"insert","","Adds a value to the set. Returns `true` if the value was not already\npresent in the set.",0,null],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",0,null],[11,"fmt","","",0,null],[11,"hash","","",0,null],[11,"clone","","",1,null],[11,"clone","","",2,null],[11,"clone","","",3,null],[11,"clone","","",4,null],[11,"clone","","",5,null],[11,"next","","",1,null],[11,"size_hint","","",1,null],[11,"next","","",2,null],[11,"size_hint","","",2,null],[11,"next","","",3,null],[11,"size_hint","","",3,null],[11,"next","","",4,null],[11,"size_hint","","",4,null],[11,"next","","",5,null],[11,"size_hint","","",5,null]],"paths":[[3,"BitSet"],[3,"Iter"],[3,"Union"],[3,"Intersection"],[3,"Difference"],[3,"SymmetricDifference"]]};
searchIndex["kernel32"] = {"doc":"","items":[],"paths":[]};
searchIndex["byteorder"] = {"doc":"This crate provides convenience methods for encoding and decoding numbers\nin either big-endian or little-endian order.","items":[[4,"BigEndian","byteorder","Defines big-endian serialization.",null,null],[4,"LittleEndian","","Defines little-endian serialization.",null,null],[6,"NetworkEndian","","Defines network byte order serialization.",null,null],[6,"NativeEndian","","Defines system native-endian serialization.",null,null],[8,"ReadBytesExt","","Extends `Read` with methods for reading numbers. (For `std::io`.)",null,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,null],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,null],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,null],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,null],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,null],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,null],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,null],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,null],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,null],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from\nthe underlying reader.",0,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from\nthe underlying reader.",0,null],[8,"WriteBytesExt","","Extends `Write` with methods for writing numbers. (For `std::io`.)",null,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,null],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,null],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,null],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,null],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,null],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,null],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,null],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,null],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,null],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to\nthe underlying writer.",1,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to\nthe underlying writer.",1,null],[8,"ByteOrder","","ByteOrder describes types that can serialize integers as bytes.",null,null],[10,"read_u16","","Reads an unsigned 16 bit integer from `buf`.",2,null],[10,"read_u32","","Reads an unsigned 32 bit integer from `buf`.",2,null],[10,"read_u64","","Reads an unsigned 64 bit integer from `buf`.",2,null],[10,"read_uint","","Reads an unsigned n-bytes integer from `buf`.",2,null],[10,"write_u16","","Writes an unsigned 16 bit integer `n` to `buf`.",2,null],[10,"write_u32","","Writes an unsigned 32 bit integer `n` to `buf`.",2,null],[10,"write_u64","","Writes an unsigned 64 bit integer `n` to `buf`.",2,null],[10,"write_uint","","Writes an unsigned integer `n` to `buf` using only `nbytes`.",2,null],[11,"read_i16","","Reads a signed 16 bit integer from `buf`.",2,null],[11,"read_i32","","Reads a signed 32 bit integer from `buf`.",2,null],[11,"read_i64","","Reads a signed 64 bit integer from `buf`.",2,null],[11,"read_int","","Reads a signed n-bytes integer from `buf`.",2,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number.",2,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number.",2,null],[11,"write_i16","","Writes a signed 16 bit integer `n` to `buf`.",2,null],[11,"write_i32","","Writes a signed 32 bit integer `n` to `buf`.",2,null],[11,"write_i64","","Writes a signed 64 bit integer `n` to `buf`.",2,null],[11,"write_int","","Writes a signed integer `n` to `buf` using only `nbytes`.",2,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number.",2,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number.",2,null],[11,"read_u16","","",3,null],[11,"read_u32","","",3,null],[11,"read_u64","","",3,null],[11,"read_uint","","",3,null],[11,"write_u16","","",3,null],[11,"write_u32","","",3,null],[11,"write_u64","","",3,null],[11,"write_uint","","",3,null],[11,"read_u16","","",4,null],[11,"read_u32","","",4,null],[11,"read_u64","","",4,null],[11,"read_uint","","",4,null],[11,"write_u16","","",4,null],[11,"write_u32","","",4,null],[11,"write_u64","","",4,null],[11,"write_uint","","",4,null],[11,"read_u8","","Reads an unsigned 8 bit integer from the underlying reader.",0,null],[11,"read_i8","","Reads a signed 8 bit integer from the underlying reader.",0,null],[11,"read_u16","","Reads an unsigned 16 bit integer from the underlying reader.",0,null],[11,"read_i16","","Reads a signed 16 bit integer from the underlying reader.",0,null],[11,"read_u32","","Reads an unsigned 32 bit integer from the underlying reader.",0,null],[11,"read_i32","","Reads a signed 32 bit integer from the underlying reader.",0,null],[11,"read_u64","","Reads an unsigned 64 bit integer from the underlying reader.",0,null],[11,"read_i64","","Reads a signed 64 bit integer from the underlying reader.",0,null],[11,"read_uint","","Reads an unsigned n-bytes integer from the underlying reader.",0,null],[11,"read_int","","Reads a signed n-bytes integer from the underlying reader.",0,null],[11,"read_f32","","Reads a IEEE754 single-precision (4 bytes) floating point number from\nthe underlying reader.",0,null],[11,"read_f64","","Reads a IEEE754 double-precision (8 bytes) floating point number from\nthe underlying reader.",0,null],[11,"write_u8","","Writes an unsigned 8 bit integer to the underlying writer.",1,null],[11,"write_i8","","Writes a signed 8 bit integer to the underlying writer.",1,null],[11,"write_u16","","Writes an unsigned 16 bit integer to the underlying writer.",1,null],[11,"write_i16","","Writes a signed 16 bit integer to the underlying writer.",1,null],[11,"write_u32","","Writes an unsigned 32 bit integer to the underlying writer.",1,null],[11,"write_i32","","Writes a signed 32 bit integer to the underlying writer.",1,null],[11,"write_u64","","Writes an unsigned 64 bit integer to the underlying writer.",1,null],[11,"write_i64","","Writes a signed 64 bit integer to the underlying writer.",1,null],[11,"write_uint","","Writes an unsigned n-bytes integer to the underlying writer.",1,null],[11,"write_int","","Writes a signed n-bytes integer to the underlying writer.",1,null],[11,"write_f32","","Writes a IEEE754 single-precision (4 bytes) floating point number to\nthe underlying writer.",1,null],[11,"write_f64","","Writes a IEEE754 double-precision (8 bytes) floating point number to\nthe underlying writer.",1,null]],"paths":[[8,"ReadBytesExt"],[8,"WriteBytesExt"],[8,"ByteOrder"],[4,"BigEndian"],[4,"LittleEndian"]]};
searchIndex["winapi"] = {"doc":"","items":[],"paths":[]};
searchIndex["bit_vec"] = {"doc":"Collections implemented with bit vectors.","items":[[3,"BitVec","bit_vec","The bitvector type.",null,null],[3,"Iter","","An iterator for `BitVec`.",null,null],[3,"IntoIter","","",null,null],[3,"Blocks","","An iterator over the blocks of a `BitVec`.",null,null],[8,"BitBlock","","Abstracts over a pile of bits (basically unsigned primitives)",null,null],[10,"bits","","How many bits it has",0,{"inputs":[],"output":{"name":"usize"}}],[11,"bytes","","How many bytes it has",0,{"inputs":[],"output":{"name":"usize"}}],[10,"from_byte","","Convert a byte into this type (lowest-order bits set)",0,{"inputs":[{"name":"u8"}],"output":{"name":"self"}}],[10,"count_ones","","Count the number of 1&#39;s in the bitwise repr",0,null],[10,"zero","","Get `0`",0,{"inputs":[],"output":{"name":"self"}}],[10,"one","","Get `1`",0,{"inputs":[],"output":{"name":"self"}}],[11,"index","","",1,null],[11,"new","","Creates an empty `BitVec`.",1,{"inputs":[],"output":{"name":"self"}}],[11,"from_elem","","Creates a `BitVec` that holds `nbits` elements, setting each element\nto `bit`.",1,{"inputs":[{"name":"usize"},{"name":"bool"}],"output":{"name":"self"}}],[11,"with_capacity","","Constructs a new, empty `BitVec` with the specified capacity.",1,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"from_bytes","","Transforms a byte-vector into a `BitVec`. Each byte becomes eight bits,\nwith the most significant bits of each byte coming first. Each\nbit becomes `true` if equal to 1 or `false` if equal to 0.",1,null],[11,"from_fn","","Creates a `BitVec` of the specified length where the value at each index\nis `f(index)`.",1,{"inputs":[{"name":"usize"},{"name":"f"}],"output":{"name":"self"}}],[11,"blocks","","Iterator over the underlying blocks of data",1,null],[11,"storage","","Exposes the raw block storage of this BitVec",1,null],[11,"storage_mut","","Exposes the raw block storage of this BitVec",1,null],[11,"get","","Retrieves the value at index `i`, or `None` if the index is out of bounds.",1,null],[11,"set","","Sets the value of a bit at an index `i`.",1,null],[11,"set_all","","Sets all bits to 1.",1,null],[11,"negate","","Flips all bits.",1,null],[11,"union","","Calculates the union of two bitvectors. This acts like the bitwise `or`\nfunction.",1,null],[11,"intersect","","Calculates the intersection of two bitvectors. This acts like the\nbitwise `and` function.",1,null],[11,"difference","","Calculates the difference between two bitvectors.",1,null],[11,"all","","Returns `true` if all bits are 1.",1,null],[11,"iter","","Returns an iterator over the elements of the vector in order.",1,null],[11,"none","","Returns `true` if all bits are 0.",1,null],[11,"any","","Returns `true` if any bit is 1.",1,null],[11,"to_bytes","","Organises the bits into bytes, such that the first bit in the\n`BitVec` becomes the high-order bit of the first byte. If the\nsize of the `BitVec` is not a multiple of eight then trailing bits\nwill be filled-in with `false`.",1,null],[11,"eq_vec","","Compares a `BitVec` to a slice of `bool`s.\nBoth the `BitVec` and slice must have the same length.",1,null],[11,"truncate","","Shortens a `BitVec`, dropping excess elements.",1,null],[11,"reserve","","Reserves capacity for at least `additional` more bits to be inserted in the given\n`BitVec`. The collection may reserve more space to avoid frequent reallocations.",1,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more bits to be inserted in the\ngiven `BitVec`. Does nothing if the capacity is already sufficient.",1,null],[11,"capacity","","Returns the capacity in bits for this bit vector. Inserting any\nelement less than this amount will not trigger a resizing.",1,null],[11,"grow","","Grows the `BitVec` in-place, adding `n` copies of `value` to the `BitVec`.",1,null],[11,"pop","","Removes the last bit from the BitVec, and returns it. Returns None if the BitVec is empty.",1,null],[11,"push","","Pushes a `bool` onto the end.",1,null],[11,"len","","Returns the total number of bits in this vector",1,null],[11,"set_len","","Sets the number of bits that this BitVec considers initialized.",1,null],[11,"is_empty","","Returns true if there are no bits in this vector",1,null],[11,"clear","","Clears all bits in this vector.",1,null],[11,"default","","",1,{"inputs":[],"output":{"name":"self"}}],[11,"from_iter","","",1,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"extend","","",1,null],[11,"clone","","",1,null],[11,"clone_from","","",1,null],[11,"partial_cmp","","",1,null],[11,"cmp","","",1,null],[11,"fmt","","",1,null],[11,"hash","","",1,null],[11,"eq","","",1,null],[11,"clone","","",2,null],[11,"next","","",2,null],[11,"size_hint","","",2,null],[11,"next_back","","",2,null],[11,"next","","",3,null],[11,"next_back","","",3,null],[11,"into_iter","","",1,null],[11,"clone","","",4,null],[11,"next","","",4,null],[11,"size_hint","","",4,null],[11,"next_back","","",4,null]],"paths":[[8,"BitBlock"],[3,"BitVec"],[3,"Iter"],[3,"IntoIter"],[3,"Blocks"]]};
searchIndex["strings"] = {"doc":"","items":[[0,"rope","strings","",null,null],[3,"Rope","strings::rope","",null,null],[3,"RopeSlice","","",null,null],[3,"RopeChars","","",null,null],[11,"new","","",0,{"inputs":[],"output":{"name":"rope"}}],[11,"from_string","","",0,{"inputs":[{"name":"string"}],"output":{"name":"rope"}}],[11,"len","","",0,null],[11,"insert_copy","","",0,null],[11,"insert","","",0,null],[11,"push","","",0,null],[11,"push_copy","","",0,null],[11,"remove","","",0,null],[11,"replace","","",0,null],[11,"replace_str","","",0,null],[11,"slice","","",0,null],[11,"full_slice","","",0,null],[11,"chars","","",0,null],[11,"next","","",1,null],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",2,null],[11,"fmt","","",2,null],[11,"fmt","","",0,null],[11,"fmt","","",0,null],[0,"src_rope","strings","",null,null],[3,"Rope","strings::src_rope","",null,null],[3,"RopeSlice","","",null,null],[3,"RopeChars","","",null,null],[11,"new","","",3,{"inputs":[],"output":{"name":"rope"}}],[11,"from_string","","",3,{"inputs":[{"name":"string"}],"output":{"name":"rope"}}],[11,"len","","",3,null],[11,"insert_copy","","",3,null],[11,"insert","","",3,null],[11,"src_insert","","",3,null],[11,"push","","",3,null],[11,"push_copy","","",3,null],[11,"remove","","",3,null],[11,"src_remove","","",3,null],[11,"replace","","",3,null],[11,"replace_str","","",3,null],[11,"col_for_src_loc","","",3,null],[11,"slice","","",3,null],[11,"full_slice","","",3,null],[11,"src_slice","","",3,null],[11,"chars","","",3,null],[11,"next","","",4,null],[11,"from_str","","",3,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",5,null],[11,"fmt","","",5,null],[11,"fmt","","",3,null],[11,"fmt","","",3,null],[0,"string_buffer","strings","",null,null],[3,"StringBuffer","strings::string_buffer","",null,null],[12,"len","","",6,null],[3,"Chars","","",null,null],[11,"new","","",6,{"inputs":[],"output":{"name":"stringbuffer"}}],[11,"with_capacity","","",6,{"inputs":[{"name":"usize"}],"output":{"name":"stringbuffer"}}],[11,"push_str","","",6,null],[11,"cur_offset","","",6,null],[11,"truncate","","",6,null],[11,"chars","","",6,null],[11,"from_str","","",6,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",6,null],[11,"next","","",7,null]],"paths":[[3,"Rope"],[3,"RopeChars"],[3,"RopeSlice"],[3,"Rope"],[3,"RopeChars"],[3,"RopeSlice"],[3,"StringBuffer"],[3,"Chars"]]};
searchIndex["utf8"] = {"doc":"","items":[[3,"Decoder","utf8","A low-level, zero-copy UTF-8 decoder with error handling.",null,null],[3,"LossyDecoder","","A push-based, lossy decoder for UTF-8.\nErrors are replaced with the U+FFFD replacement character.",null,null],[3,"InlineString","","Like `String`, but does not allocate memory and has a fixed capacity of 4 bytes.\nThis is used by `Decoder` to represent either the empty string or a single code point.",null,null],[4,"Result","","",null,null],[13,"Ok","","The input chunk is entirely well-formed.\nThe returned `&amp;str` goes to its end.",0,null],[13,"Incomplete","","The end of the input chunk was reached in the middle of an UTF-8 sequence\nthat is valid so far.\nMore input (up to 3 more bytes) is required to decode that sequence.\nAt the end of the input, the sequence is ill-formed and this is a decoding error.",0,null],[13,"Error","","An ill-formed byte sequence was found. This is a decoding error.\nIf errors are not fatal, decoding should continue after handling the error\n(typically by appending a U+FFFD replacement character to the output)\nby calling `Decoder::decode` again with `remaining_input_after_error` as its argument.",0,null],[12,"remaining_input_after_error","utf8::Result","",0,null],[17,"REPLACEMENT_CHARACTER","utf8","The replacement character, U+FFFD. In lossy decoding, insert it for every decoding error.",null,null],[11,"new","","Create a new decoder.",1,{"inputs":[],"output":{"name":"decoder"}}],[11,"has_incomplete_sequence","","Return whether the input of the last call to `.decode()` returned `Result::Incomplete`.\nIf this is true and there is no more input, this is a decoding error.",1,null],[11,"decode","","Start decoding one chunk of input bytes. The return value is a tuple of:",1,null],[11,"fmt","","",0,null],[11,"clone","","",0,null],[11,"new","","Create a new decoder from a callback.",2,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"feed","","Feed one chunk of input into the decoder.",2,null],[11,"drop","","",2,null],[11,"clone","","",3,null],[11,"deref","","",3,null],[11,"len","","Returns the length of `self`.",3,null],[11,"is_empty","","Returns true if this string has a length of zero bytes.",3,null]],"paths":[[4,"Result"],[3,"Decoder"],[3,"LossyDecoder"],[3,"InlineString"]]};
searchIndex["unicode_segmentation"] = {"doc":"Iterators which split strings on Grapheme Cluster or Word boundaries, according\nto the [Unicode Standard Annex #29](http://www.unicode.org/reports/tr29/) rules.","items":[[3,"Graphemes","unicode_segmentation","External iterator for a string&#39;s\n[grapheme clusters](http://www.unicode.org/reports/tr29/#Grapheme_Cluster_Boundaries).",null,null],[3,"GraphemeIndices","","External iterator for grapheme clusters and byte offsets.",null,null],[3,"UWordBounds","","External iterator for a string&#39;s\n[word boundaries](http://www.unicode.org/reports/tr29/#Word_Boundaries).",null,null],[3,"UWordBoundIndices","","External iterator for word boundaries and byte offsets.",null,null],[3,"UnicodeWords","","An iterator over the substrings of a string which, after splitting the string on\n[word boundaries](http://www.unicode.org/reports/tr29/#Word_Boundaries),\ncontain any characters with the\n[Alphabetic](http://unicode.org/reports/tr44/#Alphabetic)\nproperty, or with\n[General_Category=Number](http://unicode.org/reports/tr44/#General_Category_Values).",null,null],[11,"clone","","",0,null],[11,"next","","",0,null],[11,"size_hint","","",0,null],[11,"next_back","","",0,null],[11,"clone","","",1,null],[11,"size_hint","","",1,null],[11,"next","","",1,null],[11,"next_back","","",1,null],[11,"next","","",2,null],[11,"next_back","","",2,null],[11,"clone","","",3,null],[11,"clone","","",4,null],[11,"next","","",4,null],[11,"size_hint","","",4,null],[11,"next_back","","",4,null],[11,"size_hint","","",3,null],[11,"next","","",3,null],[11,"next_back","","",3,null],[17,"UNICODE_VERSION","","The version of [Unicode](http://www.unicode.org/)\nthat this version of unicode-segmentation is based on.",null,null],[8,"UnicodeSegmentation","","Methods for segmenting strings according to\n[Unicode Standard Annex #29](http://www.unicode.org/reports/tr29/).",null,null],[10,"graphemes","","Returns an iterator over the [grapheme clusters][graphemes] of `self`.",5,null],[10,"grapheme_indices","","Returns an iterator over the grapheme clusters of `self` and their\nbyte offsets. See `graphemes()` for more information.",5,null],[10,"unicode_words","","Returns an iterator over the words of `self`, separated on\n[UAX#29 word boundaries](http://www.unicode.org/reports/tr29/#Word_Boundaries).",5,null],[10,"split_word_bounds","","Returns an iterator over substrings of `self` separated on\n[UAX#29 word boundaries](http://www.unicode.org/reports/tr29/#Word_Boundaries).",5,null],[10,"split_word_bound_indices","","Returns an iterator over substrings of `self`, split on UAX#29 word boundaries,\nand their offsets. See `split_word_bounds()` for more information.",5,null]],"paths":[[3,"GraphemeIndices"],[3,"Graphemes"],[3,"UnicodeWords"],[3,"UWordBounds"],[3,"UWordBoundIndices"],[8,"UnicodeSegmentation"]]};
searchIndex["phf"] = {"doc":"Compile time optimized maps and sets.","items":[[8,"PhfHash","phf","A trait implemented by types which can be used in PHF data structures.",null,null],[10,"phf_hash","","Feeds the value into the state given, updating the hasher as necessary.",0,null],[11,"phf_hash_slice","","Feeds a slice of this type into the state provided.",0,null],[3,"Map","","An immutable map constructed at compile time.",null,null],[3,"Set","","An immutable set constructed at compile time.",null,null],[3,"OrderedMap","","An order-preserving immutable map constructed at compile time.",null,null],[3,"OrderedSet","","An order-preserving immutable set constructed at compile time.",null,null],[0,"map","","An immutable map constructed at compile time.",null,null],[3,"Map","phf::map","An immutable map constructed at compile time.",null,null],[3,"Entries","","An iterator over the key/value pairs in a `Map`.",null,null],[3,"Keys","","An iterator over the keys in a `Map`.",null,null],[3,"Values","","An iterator over the values in a `Map`.",null,null],[11,"fmt","","",1,null],[11,"index","","",1,null],[11,"is_empty","","Returns true if the `Map` is empty.",1,null],[11,"len","","Returns the number of entries in the `Map`.",1,null],[11,"contains_key","","Determines if `key` is in the `Map`.",1,null],[11,"get","","Returns a reference to the value that `key` maps to.",1,null],[11,"get_key","","Returns a reference to the map&#39;s internal static instance of the given\nkey.",1,null],[11,"get_entry","","Like `get`, but returns both the key and the value.",1,null],[11,"entries","","Returns an iterator over the key/value pairs in the map.",1,null],[11,"keys","","Returns an iterator over the keys in the map.",1,null],[11,"values","","Returns an iterator over the values in the map.",1,null],[11,"next","","",2,null],[11,"size_hint","","",2,null],[11,"next_back","","",2,null],[11,"next","","",3,null],[11,"size_hint","","",3,null],[11,"next_back","","",3,null],[11,"next","","",4,null],[11,"size_hint","","",4,null],[11,"next_back","","",4,null],[0,"set","phf","An immutable set constructed at compile time.",null,null],[3,"Set","phf::set","An immutable set constructed at compile time.",null,null],[3,"Iter","","An iterator over the values in a `Set`.",null,null],[11,"fmt","","",5,null],[11,"len","","Returns the number of elements in the `Set`.",5,null],[11,"is_empty","","Returns true if the `Set` contains no elements.",5,null],[11,"get_key","","Returns a reference to the set&#39;s internal static instance of the given\nkey.",5,null],[11,"contains","","Returns true if `value` is in the `Set`.",5,null],[11,"iter","","Returns an iterator over the values in the set.",5,null],[11,"is_disjoint","","Returns true if `other` shares no elements with `self`.",5,null],[11,"is_subset","","Returns true if `other` contains all values in `self`.",5,null],[11,"is_superset","","Returns true if `self` contains all values in `other`.",5,null],[11,"next","","",6,null],[11,"size_hint","","",6,null],[11,"next_back","","",6,null],[0,"ordered_map","phf","An order-preserving immutable map constructed at compile time.",null,null],[3,"OrderedMap","phf::ordered_map","An order-preserving immutable map constructed at compile time.",null,null],[3,"Entries","","An iterator over the entries in a `OrderedMap`.",null,null],[3,"Keys","","An iterator over the keys in a `OrderedMap`.",null,null],[3,"Values","","An iterator over the values in a `OrderedMap`.",null,null],[11,"fmt","","",7,null],[11,"index","","",7,null],[11,"len","","Returns the number of entries in the `Map`.",7,null],[11,"is_empty","","Returns true if the `Map` is empty.",7,null],[11,"get","","Returns a reference to the value that `key` maps to.",7,null],[11,"get_key","","Returns a reference to the map&#39;s internal static instance of the given\nkey.",7,null],[11,"contains_key","","Determines if `key` is in the `Map`.",7,null],[11,"get_index","","Returns the index of the key within the list used to initialize\nthe ordered map.",7,null],[11,"index","","Returns references to both the key and values at an index\nwithin the list used to initialize the ordered map. See `.get_index(key)`.",7,null],[11,"get_entry","","Like `get`, but returns both the key and the value.",7,null],[11,"entries","","Returns an iterator over the key/value pairs in the map.",7,null],[11,"keys","","Returns an iterator over the keys in the map.",7,null],[11,"values","","Returns an iterator over the values in the map.",7,null],[11,"next","","",8,null],[11,"size_hint","","",8,null],[11,"next_back","","",8,null],[11,"next","","",9,null],[11,"size_hint","","",9,null],[11,"next_back","","",9,null],[11,"next","","",10,null],[11,"size_hint","","",10,null],[11,"next_back","","",10,null],[0,"ordered_set","phf","An order-preserving immutable set constructed at compile time.",null,null],[3,"OrderedSet","phf::ordered_set","An order-preserving immutable set constructed at compile time.",null,null],[3,"Iter","","An iterator over the values in a `OrderedSet`.",null,null],[11,"fmt","","",11,null],[11,"len","","Returns the number of elements in the `OrderedSet`.",11,null],[11,"is_empty","","Returns true if the `OrderedSet` contains no elements.",11,null],[11,"get_key","","Returns a reference to the set&#39;s internal static instance of the given\nkey.",11,null],[11,"get_index","","Returns the index of the key within the list used to initialize\nthe ordered set.",11,null],[11,"index","","Returns a reference to the key at an index\nwithin the list used to initialize the ordered set. See `.get_index(key)`.",11,null],[11,"contains","","Returns true if `value` is in the `Set`.",11,null],[11,"iter","","Returns an iterator over the values in the set.",11,null],[11,"is_disjoint","","Returns true if `other` shares no elements with `self`.",11,null],[11,"is_subset","","Returns true if `other` contains all values in `self`.",11,null],[11,"is_superset","","Returns true if `self` contains all values in `other`.",11,null],[11,"next","","",12,null],[11,"size_hint","","",12,null],[11,"next_back","","",12,null]],"paths":[[8,"PhfHash"],[3,"Map"],[3,"Entries"],[3,"Keys"],[3,"Values"],[3,"Set"],[3,"Iter"],[3,"OrderedMap"],[3,"Entries"],[3,"Keys"],[3,"Values"],[3,"OrderedSet"],[3,"Iter"]]};
searchIndex["ansi_term"] = {"doc":"This is a library for controlling colours and formatting, such as\nred bold text or blue underlined text, on ANSI terminals.","items":[[3,"ANSIString","ansi_term","An ANSI String is a string coupled with the Style to display it\nin a terminal.",null,null],[3,"Style","","A style is a collection of properties that can format a string\nusing ANSI escape codes.",null,null],[3,"ANSIStrings","","A set of `ANSIString`s collected together, in order to be written with a\nminimum of control characters.",null,null],[12,"0","","",0,null],[4,"Colour","","A colour is one specific type of ANSI escape code, and can refer\nto either the foreground or background colour.",null,null],[13,"Black","","Colour #0 (foreground code `30`, background code `40`).",1,null],[13,"Red","","Colour #1 (foreground code `31`, background code `41`).",1,null],[13,"Green","","Colour #2 (foreground code `32`, background code `42`).",1,null],[13,"Yellow","","Colour #3 (foreground code `33`, background code `43`).",1,null],[13,"Blue","","Colour #4 (foreground code `34`, background code `44`).",1,null],[13,"Purple","","Colour #5 (foreground code `35`, background code `45`).",1,null],[13,"Cyan","","Colour #6 (foreground code `36`, background code `46`).",1,null],[13,"White","","Colour #7 (foreground code `37`, background code `47`).",1,null],[13,"Fixed","","A colour number from 0 to 255, for use in 256-colour terminal\nenvironments.",1,null],[13,"RGB","","A 24-bit RGB color, as specified by ISO-8613-3.",1,null],[11,"eq","","",2,null],[11,"ne","","",2,null],[11,"fmt","","",2,null],[11,"clone","","",2,null],[11,"fmt","","",2,null],[11,"from","","",2,{"inputs":[{"name":"s"}],"output":{"name":"ansistring"}}],[11,"deref","","",2,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"clone","","",1,null],[11,"fmt","","",1,null],[11,"normal","","Return a Style with the foreground colour set to this colour.",1,null],[11,"paint","","Paints the given text with this colour, returning an ANSI string.\nThis is a short-cut so you don&#39;t have to use Blue.normal() just\nto get blue text.",1,null],[11,"bold","","Returns a Style with the bold property set.",1,null],[11,"dimmed","","Returns a Style with the dimmed property set.",1,null],[11,"italic","","Returns a Style with the italic property set.",1,null],[11,"underline","","Returns a Style with the underline property set.",1,null],[11,"blink","","Returns a Style with the blink property set.",1,null],[11,"reverse","","Returns a Style with the reverse property set.",1,null],[11,"hidden","","Returns a Style with the hidden property set.",1,null],[11,"strikethrough","","Returns a Style with the strikethrough property set.",1,null],[11,"on","","Returns a Style with the background colour property set.",1,null],[11,"eq","","",3,null],[11,"ne","","",3,null],[11,"clone","","",3,null],[11,"fmt","","",3,null],[11,"new","","Creates a new Style with no differences.",3,{"inputs":[],"output":{"name":"style"}}],[11,"paint","","Paints the given text with this colour, returning an ANSI string.",3,null],[11,"bold","","Returns a Style with the bold property set.",3,null],[11,"dimmed","","Returns a Style with the dimmed property set.",3,null],[11,"italic","","Returns a Style with the italic property set.",3,null],[11,"underline","","Returns a Style with the underline property set.",3,null],[11,"blink","","Returns a Style with the blink property set.",3,null],[11,"reverse","","Returns a Style with the reverse property set.",3,null],[11,"hidden","","Returns a Style with the hidden property set.",3,null],[11,"strikethrough","","Returns a Style with the hidden property set.",3,null],[11,"fg","","Returns a Style with the foreground colour property set.",3,null],[11,"on","","Returns a Style with the background colour property set.",3,null],[11,"default","","",3,{"inputs":[],"output":{"name":"style"}}],[11,"fmt","","",0,null]],"paths":[[3,"ANSIStrings"],[4,"Colour"],[3,"ANSIString"],[3,"Style"]]};
searchIndex["cfg_if"] = {"doc":"A macro for defining #[cfg] if-else statements.","items":[[14,"cfg_if","cfg_if","",null,null]],"paths":[]};
searchIndex["unicode_xid"] = {"doc":"Determine if a `char` is a valid identifier for a parser and/or lexer according to\n[Unicode Standard Annex #31](http://www.unicode.org/reports/tr31/) rules.","items":[[17,"UNICODE_VERSION","unicode_xid","The version of [Unicode](http://www.unicode.org/)\nthat this version of unicode-derived-property is based on.",null,null],[8,"UnicodeXID","","Methods for determining if a character is a valid identifier character.",null,null],[10,"is_xid_start","","Returns whether the specified character satisfies the &#39;XID_Start&#39;\nUnicode property.",0,null],[10,"is_xid_continue","","Returns whether the specified `char` satisfies the &#39;XID_Continue&#39;\nUnicode property.",0,null]],"paths":[[8,"UnicodeXID"]]};
searchIndex["debug_unreachable"] = {"doc":"`panic!()` in debug builds, optimization hint in release.","items":[[14,"debug_unreachable","debug_unreachable","`panic!()` in debug builds, optimization hint in release.",null,null]],"paths":[]};
searchIndex["encoding_index_tests"] = {"doc":"Macros and utilities for testing indices.","items":[[14,"single_byte_tests","encoding_index_tests","Makes a common test suite for single-byte indices.",null,null],[14,"multi_byte_tests","","Makes a common test suite for multi-byte indices.",null,null],[14,"multi_byte_range_tests","","Makes a common test suite for multi-byte range indices.",null,null]],"paths":[]};
searchIndex["unreachable"] = {"doc":"# unreachable","items":[[5,"unreachable","unreachable","Hint to the optimizer that any code path which calls this function is\nstatically unreachable and can be removed.",null,null],[8,"UncheckedOptionExt","","An extension trait for `Option&lt;T&gt;` providing unchecked unwrapping methods.",null,null],[10,"unchecked_unwrap","","Get the value out of this Option without checking for None.",0,null],[10,"unchecked_unwrap_none","","Assert that this Option is a None to the optimizer.",0,null],[8,"UncheckedResultExt","","An extension trait for `Result&lt;T, E&gt;` providing unchecked unwrapping methods.",null,null],[10,"unchecked_unwrap_ok","","Get the value out of this Result without checking for Err.",1,null],[10,"unchecked_unwrap_err","","Get the error out of this Result without checking for Ok.",1,null]],"paths":[[8,"UncheckedOptionExt"],[8,"UncheckedResultExt"]]};
searchIndex["vec_map"] = {"doc":"A simple map based on a vector for small integer keys. Space requirements\nare O(highest integer key).","items":[[3,"VecMap","vec_map","A map optimized for small integer keys.",null,null],[3,"VacantEntry","","A vacant Entry.",null,null],[3,"OccupiedEntry","","An occupied Entry.",null,null],[3,"Iter","","An iterator over the key-value pairs of a map.",null,null],[3,"IterMut","","An iterator over the key-value pairs of a map, with the\nvalues being mutable.",null,null],[3,"Keys","","An iterator over the keys of a map.",null,null],[3,"Values","","An iterator over the values of a map.",null,null],[3,"IntoIter","","A consuming iterator over the key-value pairs of a map.",null,null],[3,"Drain","","A draining iterator over the key-value pairs of a map.",null,null],[4,"Entry","","A view into a single entry in a map, which may either be vacant or occupied.",null,null],[13,"Vacant","","A vacant Entry",0,null],[13,"Occupied","","An occupied Entry",0,null],[11,"clone","","",1,null],[11,"default","","",1,{"inputs":[],"output":{"name":"self"}}],[11,"hash","","",1,null],[11,"new","","Creates an empty `VecMap`.",1,{"inputs":[],"output":{"name":"self"}}],[11,"with_capacity","","Creates an empty `VecMap` with space for at least `capacity`\nelements before resizing.",1,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"capacity","","Returns the number of elements the `VecMap` can hold without\nreallocating.",1,null],[11,"reserve_len","","Reserves capacity for the given `VecMap` to contain `len` distinct keys.\nIn the case of `VecMap` this means reallocations will not occur as long\nas all inserted keys are less than `len`.",1,null],[11,"reserve_len_exact","","Reserves the minimum capacity for the given `VecMap` to contain `len` distinct keys.\nIn the case of `VecMap` this means reallocations will not occur as long as all inserted\nkeys are less than `len`.",1,null],[11,"keys","","Returns an iterator visiting all keys in ascending order of the keys.\nThe iterator&#39;s element type is `usize`.",1,null],[11,"values","","Returns an iterator visiting all values in ascending order of the keys.\nThe iterator&#39;s element type is `&amp;&#39;r V`.",1,null],[11,"iter","","Returns an iterator visiting all key-value pairs in ascending order of the keys.\nThe iterator&#39;s element type is `(usize, &amp;&#39;r V)`.",1,null],[11,"iter_mut","","Returns an iterator visiting all key-value pairs in ascending order of the keys,\nwith mutable references to the values.\nThe iterator&#39;s element type is `(usize, &amp;&#39;r mut V)`.",1,null],[11,"append","","Moves all elements from `other` into the map while overwriting existing keys.",1,null],[11,"split_off","","Splits the collection into two at the given key.",1,null],[11,"drain","","Returns an iterator visiting all key-value pairs in ascending order of\nthe keys, emptying (but not consuming) the original `VecMap`.\nThe iterator&#39;s element type is `(usize, &amp;&#39;r V)`. Keeps the allocated memory for reuse.",1,null],[11,"len","","Returns the number of elements in the map.",1,null],[11,"is_empty","","Returns true if the map contains no elements.",1,null],[11,"clear","","Clears the map, removing all key-value pairs.",1,null],[11,"get","","Returns a reference to the value corresponding to the key.",1,null],[11,"contains_key","","Returns true if the map contains a value for the specified key.",1,null],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",1,null],[11,"insert","","Inserts a key-value pair into the map. If the key already had a value\npresent in the map, that value is returned. Otherwise, `None` is returned.",1,null],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",1,null],[11,"entry","","Gets the given key&#39;s corresponding entry in the map for in-place manipulation.",1,null],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and\nreturns a mutable reference to the value in the entry.",0,null],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default\nfunction if empty, and returns a mutable reference to the value in the\nentry.",0,null],[11,"insert","","Sets the value of the entry with the VacantEntry&#39;s key,\nand returns a mutable reference to it.",2,null],[11,"get","","Gets a reference to the value in the entry.",3,null],[11,"get_mut","","Gets a mutable reference to the value in the entry.",3,null],[11,"into_mut","","Converts the entry into a mutable reference to its value.",3,null],[11,"insert","","Sets the value of the entry with the OccupiedEntry&#39;s key,\nand returns the entry&#39;s old value.",3,null],[11,"remove","","Takes the value of the entry out of the map, and returns it.",3,null],[11,"eq","","",1,null],[11,"partial_cmp","","",1,null],[11,"cmp","","",1,null],[11,"fmt","","",1,null],[11,"from_iter","","",1,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"into_iter","","Returns an iterator visiting all key-value pairs in ascending order of\nthe keys, consuming the original `VecMap`.\nThe iterator&#39;s element type is `(usize, &amp;&#39;r V)`.",1,null],[11,"extend","","",1,null],[11,"extend","","",1,null],[11,"index","","",1,null],[11,"index","","",1,null],[11,"index_mut","","",1,null],[11,"index_mut","","",1,null],[11,"clone","","",4,null],[11,"next","","",4,null],[11,"size_hint","","",4,null],[11,"next_back","","",4,null],[11,"next","","",5,null],[11,"size_hint","","",5,null],[11,"next_back","","",5,null],[11,"clone","","",6,null],[11,"clone","","",7,null],[11,"next","","",8,null],[11,"size_hint","","",8,null],[11,"next_back","","",8,null],[11,"next","","",6,null],[11,"size_hint","","",6,null],[11,"next_back","","",6,null],[11,"next","","",7,null],[11,"size_hint","","",7,null],[11,"next_back","","",7,null],[11,"next","","",9,null],[11,"size_hint","","",9,null],[11,"next_back","","",9,null]],"paths":[[4,"Entry"],[3,"VecMap"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"Iter"],[3,"IterMut"],[3,"Keys"],[3,"Values"],[3,"Drain"],[3,"IntoIter"]]};
searchIndex["glob"] = {"doc":"Support for matching file paths against Unix shell style patterns.","items":[[3,"Paths","glob","An iterator that yields `Path`s from the filesystem that match a particular\npattern.",null,null],[3,"GlobError","","A glob iteration error.",null,null],[3,"PatternError","","A pattern parsing error.",null,null],[12,"pos","","The approximate character index of where the error occurred.",0,null],[12,"msg","","A message describing the error.",0,null],[3,"Pattern","","A compiled Unix shell style pattern.",null,null],[3,"MatchOptions","","Configuration options to modify the behaviour of `Pattern::matches_with(..)`",null,null],[12,"case_sensitive","","Whether or not patterns should be matched in a case-sensitive manner.\nThis currently only considers upper/lower case relationships between\nASCII characters, but in future this might be extended to work with\nUnicode.",1,null],[12,"require_literal_separator","","If this is true then path-component separator characters (e.g. `/` on\nPosix) must be matched by a literal `/`, rather than by `*` or `?` or\n`[...]`",1,null],[12,"require_literal_leading_dot","","If this is true then paths that contain components that start with a `.`\nwill not match unless the `.` appears literally in the pattern: `*`, `?`, `**`,\nor `[...]` will not match. This is useful because such files are\nconventionally considered hidden on Unix systems and it might be\ndesirable to skip them when listing files.",1,null],[5,"glob","","Return an iterator that produces all the Paths that match the given pattern,\nwhich may be absolute or relative to the current working directory.",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"glob_with","","Return an iterator that produces all the Paths that match the given pattern,\nwhich may be absolute or relative to the current working directory.",null,{"inputs":[{"name":"str"},{"name":"matchoptions"}],"output":{"name":"result"}}],[6,"GlobResult","","An alias for a glob iteration result.",null,null],[11,"fmt","","",2,null],[11,"path","","The Path that the error corresponds to.",2,null],[11,"error","","The error in question.",2,null],[11,"description","","",2,null],[11,"cause","","",2,null],[11,"fmt","","",2,null],[11,"next","","",3,null],[11,"fmt","","",0,null],[11,"description","","",0,null],[11,"fmt","","",0,null],[11,"clone","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"partial_cmp","","",4,null],[11,"lt","","",4,null],[11,"le","","",4,null],[11,"gt","","",4,null],[11,"ge","","",4,null],[11,"cmp","","",4,null],[11,"hash","","",4,null],[11,"default","","",4,{"inputs":[],"output":{"name":"pattern"}}],[11,"fmt","","",4,null],[11,"fmt","","",4,null],[11,"from_str","","",4,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"new","","This function compiles Unix shell style patterns.",4,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"escape","","Escape metacharacters within the given string by surrounding them in\nbrackets. The resulting string will, when compiled into a `Pattern`,\nmatch the input string and nothing else.",4,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"matches","","Return if the given `str` matches this `Pattern` using the default\nmatch options (i.e. `MatchOptions::new()`).",4,null],[11,"matches_path","","Return if the given `Path`, when converted to a `str`, matches this\n`Pattern` using the default match options (i.e. `MatchOptions::new()`).",4,null],[11,"matches_with","","Return if the given `str` matches this `Pattern` using the specified\nmatch options.",4,null],[11,"matches_path_with","","Return if the given `Path`, when converted to a `str`, matches this\n`Pattern` using the specified match options.",4,null],[11,"as_str","","Access the original glob pattern.",4,null],[11,"clone","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"partial_cmp","","",1,null],[11,"lt","","",1,null],[11,"le","","",1,null],[11,"gt","","",1,null],[11,"ge","","",1,null],[11,"cmp","","",1,null],[11,"hash","","",1,null],[11,"default","","",1,{"inputs":[],"output":{"name":"matchoptions"}}],[11,"new","","Constructs a new `MatchOptions` with default field values. This is used\nwhen calling functions that do not take an explicit `MatchOptions`\nparameter.",1,{"inputs":[],"output":{"name":"matchoptions"}}]],"paths":[[3,"PatternError"],[3,"MatchOptions"],[3,"GlobError"],[3,"Paths"],[3,"Pattern"]]};
searchIndex["multimap"] = {"doc":"A MultiMap implementation which is just a wrapper around std::collections::HashMap.\nSee HashMap&#39;s documentation for more details.","items":[[3,"IterAll","multimap","HashMap iterator.",null,null],[3,"IterAllMut","","HashMap mutable values iterator.",null,null],[3,"OccupiedEntry","","A view into a single occupied location in a MultiMap.",null,null],[3,"VacantEntry","","A view into a single empty location in a MultiMap.",null,null],[3,"MultiMap","","",null,null],[3,"Iter","","",null,null],[3,"IterMut","","",null,null],[4,"Entry","","A view into a single location in a map, which may be vacant or occupied.",null,null],[13,"Occupied","","An occupied Entry.",0,null],[13,"Vacant","","A vacant Entry.",0,null],[11,"get","","Gets a reference to the first item in value in the vector corresponding to entry.",1,null],[11,"get_vec","","Gets a reference to the values (vector) corresponding to entry.",1,null],[11,"get_mut","","Gets a mut reference to the first item in value in the vector corresponding to entry.",1,null],[11,"get_vec_mut","","Gets a mut reference to the values (vector) corresponding to entry.",1,null],[11,"into_mut","","Converts the OccupiedEntry into a mutable reference to the first item in value in the entry\nwith a lifetime bound to the map itself",1,null],[11,"into_vec_mut","","Converts the OccupiedEntry into a mutable reference to the values (vector) in the entry\nwith a lifetime bound to the map itself",1,null],[11,"insert","","Inserts a new value onto the vector of the entry.",1,null],[11,"insert_vec","","Extends the existing vector with the specified values.",1,null],[11,"remove","","Takes the values (vector) out of the entry, and returns it",1,null],[11,"insert","","Sets the first value in the vector of the entry with the VacantEntry&#39;s key,\nand returns a mutable reference to it.",2,null],[11,"insert_vec","","Sets values in the entry with the VacantEntry&#39;s key,\nand returns a mutable reference to it.",2,null],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry. This will return a mutable reference to the\nfirst value in the vector corresponding to the specified key.",0,null],[11,"or_insert_vec","","Ensures a value is in the entry by inserting the default values if empty, and returns\na mutable reference to the values (the corresponding vector to the specified key) in\nthe entry.",0,null],[11,"clone","","",3,null],[11,"new","","Creates an empty MultiMap",3,{"inputs":[],"output":{"name":"multimap"}}],[11,"with_capacity","","Creates an empty multimap with the given initial capacity.",3,{"inputs":[{"name":"usize"}],"output":{"name":"multimap"}}],[11,"insert","","Inserts a key-value pair into the multimap. If the key does exists in\nthe map then the key is pushed to that key&#39;s vector. If the key doesn&#39;t\nexists in the map a new vector with the given value is inserted.",3,null],[11,"contains_key","","Returns true if the map contains a value for the specified key.",3,null],[11,"len","","Returns the number of elements in the map.",3,null],[11,"remove","","Removes a key from the map, returning the vector of values at\nthe key if the key was previously in the map.",3,null],[11,"get","","Returns a reference to the first item in the vector corresponding to\nthe key.",3,null],[11,"get_mut","","Returns a mutable reference to the first item in the vector corresponding to\nthe key.",3,null],[11,"get_vec","","Returns a reference to the vector corresponding to the key.",3,null],[11,"get_vec_mut","","Returns a mutable reference to the vector corresponding to the key.",3,null],[11,"capacity","","Returns the number of elements the map can hold without reallocating.",3,null],[11,"is_empty","","Returns true if the map contains no elements.",3,null],[11,"clear","","Clears the map, removing all key-value pairs.\nKeeps the allocated memory for reuse.",3,null],[11,"keys","","An iterator visiting all keys in arbitrary order.\nIterator element type is &amp;&#39;a K.",3,null],[11,"iter","","An iterator visiting all key-value pairs in arbitrary order. The iterator returns\na reference to the key and the first element in the corresponding key&#39;s vector.\nIterator element type is (&amp;&#39;a K, &amp;&#39;a V).",3,null],[11,"iter_mut","","An iterator visiting all key-value pairs in arbitrary order. The iterator returns\na reference to the key and a mutable reference to the first element in the\ncorresponding key&#39;s vector. Iterator element type is (&amp;&#39;a K, &amp;&#39;a mut V).",3,null],[11,"iter_all","","An iterator visiting all key-value pairs in arbitrary order. The iterator returns\na reference to the key and the corresponding key&#39;s vector.\nIterator element type is (&amp;&#39;a K, &amp;&#39;a V).",3,null],[11,"iter_all_mut","","An iterator visiting all key-value pairs in arbitrary order. The iterator returns\na reference to the key and the corresponding key&#39;s vector.\nIterator element type is (&amp;&#39;a K, &amp;&#39;a V).",3,null],[11,"entry","","Gets the specified key&#39;s corresponding entry in the map for in-place manipulation.\nIt&#39;s possible to both manipulate the vector and the &#39;value&#39; (the first value in the\nvector).",3,null],[11,"index","","",3,null],[11,"fmt","","",3,null],[11,"eq","","",3,null],[11,"default","","",3,{"inputs":[],"output":{"name":"multimap"}}],[11,"from_iter","","",3,{"inputs":[{"name":"t"}],"output":{"name":"multimap"}}],[11,"into_iter","","",3,null],[11,"extend","","",3,null],[11,"extend","","",3,null],[11,"extend","","",3,null],[11,"extend","","",3,null],[11,"clone","","",4,null],[11,"next","","",4,null],[11,"size_hint","","",4,null],[11,"len","","",4,null],[11,"next","","",5,null],[11,"size_hint","","",5,null],[11,"len","","",5,null],[11,"len","","",6,null],[11,"len","","",7,null],[11,"next","","",6,null],[11,"size_hint","","",6,null],[11,"next","","",7,null],[11,"size_hint","","",7,null],[11,"clone","","",6,null]],"paths":[[4,"Entry"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"MultiMap"],[3,"Iter"],[3,"IterMut"],[3,"IterAll"],[3,"IterAllMut"]]};
searchIndex["dtoa"] = {"doc":"","items":[[5,"write","dtoa","",null,{"inputs":[{"name":"w"},{"name":"v"}],"output":{"name":"result"}}],[8,"Floating","","",null,null],[10,"write","","",0,null],[14,"diyfp","","",null,null],[14,"dtoa","","",null,null]],"paths":[[8,"Floating"]]};
searchIndex["rustc_demangle"] = {"doc":"Demangle Rust compiler symbol names.","items":[[3,"Demangle","rustc_demangle","Representation of a demangled symbol name.",null,null],[5,"demangle","","De-mangles a Rust symbol into a more readable version",null,{"inputs":[{"name":"str"}],"output":{"name":"demangle"}}],[11,"as_str","","Returns the underlying string that&#39;s being demangled.",0,null],[11,"fmt","","",0,null],[11,"fmt","","",0,null]],"paths":[[3,"Demangle"]]};
searchIndex["unicode_width"] = {"doc":"Determine displayed width of `char` and `str` types according to\n[Unicode Standard Annex #11](http://www.unicode.org/reports/tr11/)\nrules.","items":[[17,"UNICODE_VERSION","unicode_width","The version of [Unicode](http://www.unicode.org/)\nthat this version of unicode-width is based on.",null,null],[8,"UnicodeWidthChar","","Methods for determining displayed width of Unicode characters.",null,null],[10,"width","","Returns the character&#39;s displayed width in columns, or `None` if the\ncharacter is a control character other than `&#39;\\x00&#39;`.",0,null],[10,"width_cjk","","Returns the character&#39;s displayed width in columns, or `None` if the\ncharacter is a control character other than `&#39;\\x00&#39;`.",0,null],[8,"UnicodeWidthStr","","Methods for determining displayed width of Unicode strings.",null,null],[10,"width","","Returns the string&#39;s displayed width in columns.",1,null],[10,"width_cjk","","Returns the string&#39;s displayed width in columns.",1,null]],"paths":[[8,"UnicodeWidthChar"],[8,"UnicodeWidthStr"]]};
searchIndex["num_traits"] = {"doc":"Numeric traits for generic mathematics","items":[[3,"ParseFloatError","num_traits","",null,null],[12,"kind","","",0,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",1,null],[13,"Invalid","","",1,null],[0,"identities","","",null,null],[5,"zero","num_traits::identities","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",2,null],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",3,{"inputs":[],"output":{"name":"self"}}],[0,"sign","num_traits","",null,null],[5,"abs","num_traits::sign","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",4,null],[10,"abs_sub","","The positive difference of two numbers.",4,null],[10,"signum","","Returns the sign of the number.",4,null],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",4,null],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",4,null],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[0,"ops","num_traits","",null,null],[0,"saturating","num_traits::ops","",null,null],[8,"Saturating","num_traits::ops::saturating","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator.\nReturns a+b, saturating at the numeric bounds instead of overflowing.",5,null],[10,"saturating_sub","","Saturating subtraction operator.\nReturns a-b, saturating at the numeric bounds instead of overflowing.",5,null],[0,"checked","num_traits::ops","",null,null],[8,"CheckedAdd","num_traits::ops::checked","Performs addition that returns `None` instead of wrapping around on\noverflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is\nreturned.",6,null],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens,\n`None` is returned.",7,null],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or\noverflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow\nor overflow happens, `None` is returned.",8,null],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of\nwrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by\nzero. If any of that happens, `None` is returned.",9,null],[0,"bounds","num_traits","",null,null],[8,"Bounded","num_traits::bounds","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",10,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",10,{"inputs":[],"output":{"name":"self"}}],[0,"float","num_traits","",null,null],[8,"Float","num_traits::float","",null,null],[10,"nan","","Returns the `NaN` value.",11,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",11,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",11,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",11,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",11,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",11,{"inputs":[],"output":{"name":"self"}}],[11,"epsilon","","Returns epsilon, a small positive value.",11,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",11,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",11,null],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and\nfalse otherwise.",11,null],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",11,null],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,\n[subnormal][subnormal], or `NaN`.",11,null],[10,"classify","","Returns the floating point category of the number. If only one property\nis going to be tested, it is generally faster to use the specific\npredicate instead.",11,null],[10,"floor","","Returns the largest integer less than or equal to a number.",11,null],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",11,null],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from\n`0.0`.",11,null],[10,"trunc","","Return the integer part of a number.",11,null],[10,"fract","","Returns the fractional part of a number.",11,null],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the\nnumber is `Float::nan()`.",11,null],[10,"signum","","Returns a number that represents the sign of `self`.",11,null],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and\n`Float::infinity()`.",11,null],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and\n`Float::neg_infinity()`.",11,null],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding\nerror. This produces a more accurate result with better performance than\na separate multiplication operation followed by an add.",11,null],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",11,null],[10,"powi","","Raise a number to an integer power.",11,null],[10,"powf","","Raise a number to a floating point power.",11,null],[10,"sqrt","","Take the square root of a number.",11,null],[10,"exp","","Returns `e^(self)`, (the exponential function).",11,null],[10,"exp2","","Returns `2^(self)`.",11,null],[10,"ln","","Returns the natural logarithm of the number.",11,null],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",11,null],[10,"log2","","Returns the base 2 logarithm of the number.",11,null],[10,"log10","","Returns the base 10 logarithm of the number.",11,null],[11,"to_degrees","","Converts radians to degrees.",11,null],[11,"to_radians","","Converts degrees to radians.",11,null],[10,"max","","Returns the maximum of the two numbers.",11,null],[10,"min","","Returns the minimum of the two numbers.",11,null],[10,"abs_sub","","The positive difference of two numbers.",11,null],[10,"cbrt","","Take the cubic root of a number.",11,null],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given\nlegs of length `x` and `y`.",11,null],[10,"sin","","Computes the sine of a number (in radians).",11,null],[10,"cos","","Computes the cosine of a number (in radians).",11,null],[10,"tan","","Computes the tangent of a number (in radians).",11,null],[10,"asin","","Computes the arcsine of a number. Return value is in radians in\nthe range [-pi/2, pi/2] or NaN if the number is outside the range\n[-1, 1].",11,null],[10,"acos","","Computes the arccosine of a number. Return value is in radians in\nthe range [0, pi] or NaN if the number is outside the range\n[-1, 1].",11,null],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the\nrange [-pi/2, pi/2];",11,null],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",11,null],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns\n`(sin(x), cos(x))`.",11,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the\nnumber is close to zero.",11,null],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if\nthe operations were performed separately.",11,null],[10,"sinh","","Hyperbolic sine function.",11,null],[10,"cosh","","Hyperbolic cosine function.",11,null],[10,"tanh","","Hyperbolic tangent function.",11,null],[10,"asinh","","Inverse hyperbolic sine function.",11,null],[10,"acosh","","Inverse hyperbolic cosine function.",11,null],[10,"atanh","","Inverse hyperbolic tangent function.",11,null],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively.\nThe original number can be recovered by `sign * mantissa * 2 ^ exponent`.\nThe floating point encoding is documented in the [Reference][floating-point].",11,null],[8,"FloatConst","","",null,null],[10,"E","","Return Euler’s number.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_1_PI","","Return `1.0 / π`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_1_SQRT_2","","Return `1.0 / sqrt(2.0)`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_2_PI","","Return `2.0 / π`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_2_SQRT_PI","","Return `2.0 / sqrt(π)`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_2","","Return `π / 2.0`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_3","","Return `π / 3.0`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_4","","Return `π / 4.0`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_6","","Return `π / 6.0`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"FRAC_PI_8","","Return `π / 8.0`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"LN_10","","Return `ln(10.0)`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"LN_2","","Return `ln(2.0)`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"LOG10_E","","Return `log10(e)`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"LOG2_E","","Return `log2(e)`.",12,{"inputs":[],"output":{"name":"self"}}],[10,"PI","","Return Archimedes’ constant.",12,{"inputs":[],"output":{"name":"self"}}],[10,"SQRT_2","","Return `sqrt(2.0)`.",12,{"inputs":[],"output":{"name":"self"}}],[0,"cast","num_traits","",null,null],[5,"cast","num_traits::cast","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",13,null],[11,"to_i8","","Converts the value of `self` to an `i8`.",13,null],[11,"to_i16","","Converts the value of `self` to an `i16`.",13,null],[11,"to_i32","","Converts the value of `self` to an `i32`.",13,null],[10,"to_i64","","Converts the value of `self` to an `i64`.",13,null],[11,"to_usize","","Converts the value of `self` to a `usize`.",13,null],[11,"to_u8","","Converts the value of `self` to an `u8`.",13,null],[11,"to_u16","","Converts the value of `self` to an `u16`.",13,null],[11,"to_u32","","Converts the value of `self` to an `u32`.",13,null],[10,"to_u64","","Converts the value of `self` to an `u64`.",13,null],[11,"to_f32","","Converts the value of `self` to an `f32`.",13,null],[11,"to_f64","","Converts the value of `self` to an `f64`.",13,null],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",14,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into\na primitive via the `ToPrimitive` trait.",15,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"int","num_traits","",null,null],[8,"PrimInt","num_traits::int","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",16,null],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",16,null],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof `self`.",16,null],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof `self`.",16,null],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping\nthe truncated bits to the end of the resulting integer.",16,null],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping\nthe truncated bits to the beginning of the resulting integer.",16,null],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",16,null],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying\nthe &quot;sign bit&quot; in the most significant bits even for unsigned types.",16,null],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",16,null],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling\nzeros in the most significant bits.",16,null],[10,"swap_bytes","","Reverses the byte order of the integer.",16,null],[10,"from_be","","Convert an integer from big endian to the target&#39;s endianness.",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target&#39;s endianness.",16,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target&#39;s endianness.",16,null],[10,"to_le","","Convert `self` to little endian from the target&#39;s endianness.",16,null],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",16,null],[0,"pow","num_traits","",null,null],[5,"pow","num_traits::pow","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[8,"Num","num_traits","The base trait for numeric types",null,null],[16,"FromStrRadixErr","","",17,null],[10,"from_str_radix","","Convert from a string and radix &lt;= 36.",17,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"fmt","","",1,null],[11,"fmt","","",0,null]],"paths":[[3,"ParseFloatError"],[4,"FloatErrorKind"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"Bounded"],[8,"Float"],[8,"FloatConst"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"PrimInt"],[8,"Num"]]};
searchIndex["bitflags"] = {"doc":"A typesafe bitmask flag generator.","items":[[14,"bitflags","bitflags","The `bitflags!` macro generates a `struct` that holds a set of C-style\nbitmask flags. It is useful for creating typesafe wrappers for C APIs.",null,null]],"paths":[]};
searchIndex["diff"] = {"doc":"","items":[[4,"Result","diff","A fragment of a computed diff.",null,null],[13,"Left","","",0,null],[13,"Both","","",0,null],[13,"Right","","",0,null],[5,"slice","","Computes the diff between two slices.",null,null],[5,"lines","","Computes the diff between the lines of two strings.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"vec"}}],[5,"chars","","Computes the diff between the chars of two strings.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"vec"}}],[11,"clone","","",0,null],[11,"fmt","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null]],"paths":[[4,"Result"]]};
searchIndex["phf_shared"] = {"doc":"","items":[[5,"displace","phf_shared","",null,{"inputs":[{"name":"u32"},{"name":"u32"},{"name":"u32"},{"name":"u32"}],"output":{"name":"u32"}}],[5,"split","","",null,null],[5,"hash","","`key` is from `phf_generator::HashState::key`.",null,{"inputs":[{"name":"t"},{"name":"u64"}],"output":{"name":"u64"}}],[5,"get_index","","Return an index into `phf_generator::HashState::map`.",null,null],[8,"PhfHash","","A trait implemented by types which can be used in PHF data structures.",null,null],[10,"phf_hash","","Feeds the value into the state given, updating the hasher as necessary.",0,null],[11,"phf_hash_slice","","Feeds a slice of this type into the state provided.",0,null]],"paths":[[8,"PhfHash"]]};
searchIndex["lazy_static"] = {"doc":"A macro for declaring lazily evaluated statics.","items":[[8,"__Deref","lazy_static","The `Deref` trait is used to specify the functionality of dereferencing\noperations, like `*v`.",null,null],[16,"Target","","The resulting type after dereferencing",0,null],[10,"deref","","The method called to dereference a value",0,null],[0,"lazy","","",null,null],[3,"Lazy","lazy_static::lazy","",null,null],[12,"0","","",1,null],[12,"1","","",1,null],[11,"get","","",1,null],[14,"__lazy_static_create","lazy_static","",null,null],[14,"lazy_static","","",null,null]],"paths":[[8,"__Deref"],[3,"Lazy"]]};
searchIndex["matches"] = {"doc":"","items":[[14,"matches","matches","",null,null],[14,"_tt_as_expr_hack","","Work around &quot;error: unexpected token: `an interpolated tt`&quot;, whatever that means.",null,null]],"paths":[]};
searchIndex["mac"] = {"doc":"# mac","items":[[0,"test","mac","Macros for writing test suites.",null,null],[0,"mem","","Macros for low-level memory manipulation.",null,null],[0,"format","","Macros for string formatting.",null,null],[0,"syntax_ext","","Macros useful when writing procedural syntax extensions.",null,null],[0,"matches","","Pattern Matching macros.",null,null],[14,"test_eq","","Generate a test function `$name` which asserts that `$left` and `$right`\nare equal.",null,null],[14,"addrs_of","","Make a tuple of the addresses of some of a struct&#39;s fields.",null,null],[14,"format_if","","Conditionally perform string formatting.",null,null],[14,"ext_bail","","Call `span_err` on an `ExtCtxt` and return `DummyResult::any`.",null,null],[14,"ext_bail_if","","`ext_bail!` if the condition `$e` is true.",null,null],[14,"ext_expect","","Unwrap the `Option` `$e`, or `ext_bail!`.",null,null],[14,"matches","","Returns true if an expression matches a pattern.",null,null],[14,"unwrap_or_return","","Unwraps an `Option` or returns from the function with the specified return\nvalue.",null,null],[14,"do_while","","Do-while loop.",null,null]],"paths":[]};
searchIndex["utf8_ranges"] = {"doc":"Crate `utf8-ranges` converts ranges of Unicode scalar values to equivalent\nranges of UTF-8 bytes. This is useful for constructing byte based automatons\nthat need to embed UTF-8 decoding.","items":[[3,"Utf8Range","utf8_ranges","A single inclusive range of UTF-8 bytes.",null,null],[12,"start","","Start of byte range (inclusive).",0,null],[12,"end","","End of byte range (inclusive).",0,null],[3,"Utf8Sequences","","An iterator over ranges of matching UTF-8 byte sequences.",null,null],[4,"Utf8Sequence","","Utf8Sequence represents a sequence of byte ranges.",null,null],[13,"One","","One byte range.",1,null],[13,"Two","","Two successive byte ranges.",1,null],[13,"Three","","Three successive byte ranges.",1,null],[13,"Four","","Four successive byte ranges.",1,null],[11,"clone","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"as_slice","","Returns the underlying sequence of byte ranges as a slice.",1,null],[11,"len","","Returns the number of byte ranges in this sequence.",1,null],[11,"matches","","Returns true if and only if a prefix of `bytes` matches this sequence\nof byte ranges.",1,null],[11,"fmt","","",1,null],[11,"clone","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"matches","","Returns true if and only if the given byte is in this range.",0,null],[11,"fmt","","",0,null],[11,"new","","Create a new iterator over UTF-8 byte ranges for the scalar value range\ngiven.",2,{"inputs":[{"name":"char"},{"name":"char"}],"output":{"name":"self"}}],[11,"next","","",2,null]],"paths":[[3,"Utf8Range"],[4,"Utf8Sequence"],[3,"Utf8Sequences"]]};
searchIndex["void"] = {"doc":"# Void","items":[[4,"Void","void","The empty type for cases which can&#39;t occur.",null,null],[5,"unreachable","","A safe version of `intrinsincs::unreachable`.",null,null],[8,"ResultVoidExt","","Extensions to `Result&lt;T, Void&gt;`",null,null],[10,"void_unwrap","","Get the value out of a wrapper.",0,null],[8,"ResultVoidErrExt","","Extensions to `Result&lt;Void, E&gt;`",null,null],[10,"void_unwrap_err","","Get the error out of a wrapper.",1,null],[11,"clone","","",2,null],[11,"fmt","","",2,null],[11,"fmt","","",2,null],[11,"eq","","",2,null],[11,"partial_cmp","","",2,null]],"paths":[[8,"ResultVoidExt"],[8,"ResultVoidErrExt"],[4,"Void"]]};
searchIndex["getopts"] = {"doc":"Simple getopt alternative.","items":[[3,"Options","getopts","A description of the options that a program can handle.",null,null],[3,"Matches","","The result of checking command line arguments. Contains a vector\nof matches and a vector of free strings.",null,null],[12,"free","","Free string fragments",0,null],[4,"ParsingStyle","","What parsing style to use when parsing arguments.",null,null],[13,"FloatingFrees","","Flags and &quot;free&quot; arguments can be freely inter-mixed.",1,null],[13,"StopAtFirstFree","","As soon as a &quot;free&quot; argument (i.e. non-flag) is encountered, stop\nconsidering any remaining arguments as flags.",1,null],[4,"HasArg","","Describes whether an option has an argument.",null,null],[13,"Yes","","The option requires an argument.",2,null],[13,"No","","The option takes no argument.",2,null],[13,"Maybe","","The option argument is optional.",2,null],[4,"Occur","","Describes how often an option may occur.",null,null],[13,"Req","","The option occurs once.",3,null],[13,"Optional","","The option occurs at most once.",3,null],[13,"Multi","","The option occurs zero or more times.",3,null],[4,"Fail","","The type returned when the command line does not conform to the\nexpected format. Use the `Debug` implementation to output detailed\ninformation.",null,null],[13,"ArgumentMissing","","The option requires an argument but none was passed.",4,null],[13,"UnrecognizedOption","","The passed option is not declared among the possible options.",4,null],[13,"OptionMissing","","A required option is not present.",4,null],[13,"OptionDuplicated","","A single occurrence option is being used multiple times.",4,null],[13,"UnexpectedArgument","","There&#39;s an argument being passed to a non-argument option.",4,null],[4,"FailType","","The type of failure that occurred.",null,null],[13,"ArgumentMissing_","","",5,null],[13,"UnrecognizedOption_","","",5,null],[13,"OptionMissing_","","",5,null],[13,"OptionDuplicated_","","",5,null],[13,"UnexpectedArgument_","","",5,null],[6,"Result","","The result of parsing a command line with a set of options.",null,null],[11,"new","","Create a blank set of options.",6,{"inputs":[],"output":{"name":"options"}}],[11,"parsing_style","","Set the parsing style.",6,null],[11,"opt","","Create a generic option group, stating all parameters explicitly.",6,null],[11,"optflag","","Create a long option that is optional and does not take an argument.",6,null],[11,"optflagmulti","","Create a long option that can occur more than once and does not\ntake an argument.",6,null],[11,"optflagopt","","Create a long option that is optional and takes an optional argument.",6,null],[11,"optmulti","","Create a long option that is optional, takes an argument, and may occur\nmultiple times.",6,null],[11,"optopt","","Create a long option that is optional and takes an argument.",6,null],[11,"reqopt","","Create a long option that is required and takes an argument.",6,null],[11,"parse","","Parse command line arguments according to the provided options.",6,null],[11,"short_usage","","Derive a short one-line usage summary from a set of long options.",6,null],[11,"usage","","Derive a usage message from a set of options.",6,null],[11,"clone","","",1,null],[11,"eq","","",1,null],[11,"clone","","",2,null],[11,"eq","","",2,null],[11,"clone","","",3,null],[11,"eq","","",3,null],[11,"clone","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"clone","","",4,null],[11,"fmt","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"description","","",4,null],[11,"clone","","",5,null],[11,"eq","","",5,null],[11,"opt_present","","Returns true if an option was matched.",0,null],[11,"opt_count","","Returns the number of times an option was matched.",0,null],[11,"opts_present","","Returns true if any of several options were matched.",0,null],[11,"opts_str","","Returns the string argument supplied to one of several matching options or `None`.",0,null],[11,"opt_strs","","Returns a vector of the arguments provided to all matches of the given\noption.",0,null],[11,"opt_str","","Returns the string argument supplied to a matching option or `None`.",0,null],[11,"opt_default","","Returns the matching string, a default, or `None`.",0,null],[11,"fmt","","",4,null]],"paths":[[3,"Matches"],[4,"ParsingStyle"],[4,"HasArg"],[4,"Occur"],[4,"Fail"],[4,"FailType"],[3,"Options"]]};
searchIndex["log"] = {"doc":"A lightweight logging facade.","items":[[3,"LogRecord","log","The &quot;payload&quot; of a log message.",null,null],[3,"LogMetadata","","Metadata about a log message.",null,null],[3,"LogLocation","","The location of a log message.",null,null],[3,"MaxLogLevelFilter","","A token providing read and write access to the global maximum log level\nfilter.",null,null],[3,"SetLoggerError","","The type returned by `set_logger` if `set_logger` has already been called.",null,null],[3,"ShutdownLoggerError","","The type returned by `shutdown_logger_raw` if `shutdown_logger_raw` has\nalready been called or if `set_logger_raw` has not been called yet.",null,null],[4,"LogLevel","","An enum representing the available verbosity levels of the logging framework",null,null],[13,"Error","","The &quot;error&quot; level.",0,null],[13,"Warn","","The &quot;warn&quot; level.",0,null],[13,"Info","","The &quot;info&quot; level.",0,null],[13,"Debug","","The &quot;debug&quot; level.",0,null],[13,"Trace","","The &quot;trace&quot; level.",0,null],[4,"LogLevelFilter","","An enum representing the available verbosity level filters of the logging\nframework.",null,null],[13,"Off","","A level lower than all log levels.",1,null],[13,"Error","","Corresponds to the `Error` log level.",1,null],[13,"Warn","","Corresponds to the `Warn` log level.",1,null],[13,"Info","","Corresponds to the `Info` log level.",1,null],[13,"Debug","","Corresponds to the `Debug` log level.",1,null],[13,"Trace","","Corresponds to the `Trace` log level.",1,null],[5,"max_log_level","","Returns the current maximum log level.",null,{"inputs":[],"output":{"name":"loglevelfilter"}}],[5,"set_logger","","Sets the global logger.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"set_logger_raw","","Sets the global logger from a raw pointer.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"shutdown_logger","","Shuts down the global logger.",null,{"inputs":[],"output":{"name":"result"}}],[5,"shutdown_logger_raw","","Shuts down the global logger.",null,{"inputs":[],"output":{"name":"result"}}],[8,"Log","","A trait encapsulating the operations required of a logger",null,null],[10,"enabled","","Determines if a log message with the specified metadata would be\nlogged.",2,null],[10,"log","","Logs the `LogRecord`.",2,null],[11,"fmt","","",0,null],[11,"clone","","",0,null],[11,"eq","","",0,null],[11,"eq","","",0,null],[11,"partial_cmp","","",0,null],[11,"partial_cmp","","",0,null],[11,"cmp","","",0,null],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",0,null],[11,"max","","Returns the most verbose logging level.",0,{"inputs":[],"output":{"name":"loglevel"}}],[11,"to_log_level_filter","","Converts the `LogLevel` to the equivalent `LogLevelFilter`.",0,null],[11,"fmt","","",1,null],[11,"clone","","",1,null],[11,"eq","","",1,null],[11,"eq","","",1,null],[11,"partial_cmp","","",1,null],[11,"partial_cmp","","",1,null],[11,"cmp","","",1,null],[11,"from_str","","",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",1,null],[11,"max","","Returns the most verbose logging level filter.",1,{"inputs":[],"output":{"name":"loglevelfilter"}}],[11,"to_log_level","","Converts `self` to the equivalent `LogLevel`.",1,null],[11,"args","","The message body.",3,null],[11,"metadata","","Metadata about the log directive.",3,null],[11,"location","","The location of the log directive.",3,null],[11,"level","","The verbosity level of the message.",3,null],[11,"target","","The name of the target of the directive.",3,null],[11,"level","","The verbosity level of the message.",4,null],[11,"target","","The name of the target of the directive.",4,null],[11,"clone","","",5,null],[11,"fmt","","",5,null],[11,"module_path","","The module path of the message.",5,null],[11,"file","","The source file containing the message.",5,null],[11,"line","","The line containing the message.",5,null],[11,"fmt","","",6,null],[11,"get","","Gets the current maximum log level filter.",6,null],[11,"set","","Sets the maximum log level.",6,null],[11,"fmt","","",7,null],[11,"fmt","","",7,null],[11,"description","","",7,null],[11,"fmt","","",8,null],[11,"fmt","","",8,null],[11,"description","","",8,null],[14,"log","","The standard logging macro.",null,null],[14,"error","","Logs a message at the error level.",null,null],[14,"warn","","Logs a message at the warn level.",null,null],[14,"info","","Logs a message at the info level.",null,null],[14,"debug","","Logs a message at the debug level.",null,null],[14,"trace","","Logs a message at the trace level.",null,null],[14,"log_enabled","","Determines if a message logged at the specified level in that module will\nbe logged.",null,null]],"paths":[[4,"LogLevel"],[4,"LogLevelFilter"],[8,"Log"],[3,"LogRecord"],[3,"LogMetadata"],[3,"LogLocation"],[3,"MaxLogLevelFilter"],[3,"SetLoggerError"],[3,"ShutdownLoggerError"]]};
searchIndex["itoa"] = {"doc":"","items":[[5,"write","itoa","",null,{"inputs":[{"name":"w"},{"name":"v"}],"output":{"name":"result"}}],[8,"Integer","","",null,null],[10,"write","","",0,null]],"paths":[[8,"Integer"]]};
initSearch(searchIndex);
